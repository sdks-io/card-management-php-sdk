<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellCardManagementAPIsLib\Exceptions\ApiException;
use ShellCardManagementAPIsLib\Exceptions\FleetmanagementV2RestrictionSearchcard401ErrorException;
use ShellCardManagementAPIsLib\Exceptions\FleetmanagementV2RestrictionSearchcard500ErrorException;
use ShellCardManagementAPIsLib\Models\AccountRestrictionRequest;
use ShellCardManagementAPIsLib\Models\AccountRestrictionResponse;
use ShellCardManagementAPIsLib\Models\BudleDetailsRequest;
use ShellCardManagementAPIsLib\Models\BundleDetailsResponse;
use ShellCardManagementAPIsLib\Models\CardRestrictionReq;
use ShellCardManagementAPIsLib\Models\CardRestrictionResponse;
use ShellCardManagementAPIsLib\Models\CreateBundleRequest;
use ShellCardManagementAPIsLib\Models\CreateBundleResponse;
use ShellCardManagementAPIsLib\Models\DeleteBundleRequest;
use ShellCardManagementAPIsLib\Models\DeleteBundleResponse;
use ShellCardManagementAPIsLib\Models\SearchAccountLimitRequest;
use ShellCardManagementAPIsLib\Models\SearchAccountLimitResponse;
use ShellCardManagementAPIsLib\Models\SearchCardRestrictionReq;
use ShellCardManagementAPIsLib\Models\SearchCardRestrictionRes;
use ShellCardManagementAPIsLib\Models\SummaryofbundleResponse;
use ShellCardManagementAPIsLib\Models\SummaryofbundlerRequest;
use ShellCardManagementAPIsLib\Models\UpdateBundleRequest;
use ShellCardManagementAPIsLib\Models\UpdateBundleResponse;

class RestrictionController extends BaseController
{
    /**
     * This API will allows querying card details including the day/time and product restrictions.
     *
     * #### Supported operations
     *
     * * Search by list of cards or bundle
     *
     * * Include card bundle details (optional)
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param SearchCardRestrictionReq|null $body Restriction search card request body
     *
     * @return SearchCardRestrictionRes Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function searchCardRestriction(
        string $apikey,
        string $requestId,
        ?SearchCardRestrictionReq $body = null
    ): SearchCardRestrictionRes {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v2/restriction/searchcard')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV2RestrictionSearchcard401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV2RestrictionSearchcard500ErrorException::class
                )
            )
            ->type(SearchCardRestrictionRes::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * The Card Limit and Restriction API is REST-based and employs Basic and ApiKey authentication. The
     * API endpoints accept JSON-encoded request bodies, return JSON-encoded responses and use standard
     * HTTP response codes.
     *
     *
     *
     * All resources are located in the Shell Card Platform.  The Shell Card Platform is the overall
     * platform that encompasses all the internal Shell systems used to manage resources. The internal
     * workings of the platform are not important when interacting with the API. However, it is worth
     * noting that the platform uses a microservice architecture to communicate with various backend
     * systems and some API calls are processed asynchronously.
     *
     *
     *
     * All endpoints use the `POST` verb for retrieving, updating, creating and deleting resources in the
     * Shell Card Platform. The endpoints that retrieve resources from the Shell Card Platform allow
     * flexible search parameters in the API request body.
     *
     *
     *
     * **Important Note** - This operation allows setting or updating the restrictions on existing cards.
     * (For up to 3 cards in a single call).
     *
     *
     *
     * All restrictions of the cards are submitted and executed after successful below condition.
     *
     * •    The card exists.
     *
     * •    Day time restriction cannot be set to restrict the use of a card on all days of the week i.e., the
     * values for all the days in the restriction cannot be set to false.
     *
     * •    Either of the usage, daytime, location or product restriction ‘Reset’ is set to ‘True’ or applied
     * on the card.
     *
     * •    All the limits in the usage restriction profile for a card is not set to ‘0’/null.
     *
     * •    If IsVelocityCeiling is ‘true’, API will validate below condition:
     *
     * Usage restrictions for a card are lower than Customer Card Type level limits, if there are no
     * customer level overrides available then lower than OU card type limits.
     *
     * •    In usage restrictions, the limits per transaction should be less than or equal to Daily, Daily
     * should be less than or equal to Weekly, Weekly should be less than or equal to Monthly, Monthly
     * should be less than or equal to Yearly (Annually). Exception being null/blank will be skipped. i.e.,
     * Daily value should be less than equal to Monthly value if Weekly value is null/blank. Lifetime limit
     * is not considered for usage restrictions limits validation.
     *
     * •    Apply the card type limit to Gateway when a value is NULL in the input. However, if the card type
     * limit is NULL for the same field, then no limit will be applied in Gateway.
     *
     * •    If ‘SetDefaultOnVelocityUpdate’ is ‘true’ then the operation will apply customer cardtype or OU
     * level velocity limits on existing cards when restrictions are modified without providing custom
     * values for all fields.
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param CardRestrictionReq|null $body Card Restriction request body
     *
     * @return CardRestrictionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function applyRestriction(
        string $apikey,
        string $requestId,
        ?CardRestrictionReq $body = null
    ): CardRestrictionResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v2/restriction/card')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(CardRestrictionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API enables clients to create a new card bundle and apply restrictions.
     *
     * #### Supported operations
     *
     * * Create bundle and include mandatory -
     *
     * * Usage, day/time, product and location restrictions
     *
     * * List of cards to add to bundle
     *
     * * Create bundle and include optional identifier of bundle in external system
     *
     * #### Validation rules
     *
     * The following are the key validation rules with the associated error codes for failed validation-
     *
     * * `7012` - At least one card must be added to the bundle
     *
     * *  `7011` - The total number of cards passed in the input must be 500 or less.
     *
     * *  `7014` - All the cards passed in the input are part of the selected account.
     *
     * *  `7013` - At least one restriction must be applied to the bundle i.e. either of usage, day/time,
     * location or product restriction.
     *
     * *  `7005` - Day time restriction cannot be set to restrict the use of a card on all days of the
     * week.
     *
     * *  `7000` - Usage restriction of the bundle is not open ended i.e. all the limits within the usage
     * restriction must not be set to 0/null.
     *
     * *  `7004` - In the usage restrictions, the limits per transaction should be less than or equal to
     * Daily, Daily should be less than or equal to Weekly, Weekly should be less than or equal to Monthly.
     * Exception being 0/blank will be skipped, i.e. Daily value should be less than equal to Monthly value
     * if Weekly value is 0/blank.
     *
     * *  `0007` - Error returned if request parameters fail validation e.g. mandatory check.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param CreateBundleRequest|null $body CreateBundle request body
     *
     * @return CreateBundleResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createBundle(
        string $apikey,
        string $requestId,
        ?CreateBundleRequest $body = null
    ): CreateBundleResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/restriction/createbundle')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(CreateBundleResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API enables clients to update an existing card bundle and its associated restrictions.
     *
     * #### Supported operations
     *
     * * Add new cards to an existing bundle
     *
     * * Remove cards from existing bundle
     *
     * * Update restrictions applied to existing bundle
     *
     *
     *
     * The following are the key validation rules with the associated error codes for failed validation-
     *
     *
     * #### Validation rules
     *
     * *  `9007` - The cards must exist in the cards platform for adding or removing cards.
     *
     * *  `7014` - All the cards passed in the input are part of the selected account.
     *
     * *  `7018` - All the cards passed in the input are part of the selected bundle.
     *
     * *  `7011` - The total number of cards passed in the input must be 500 or less.
     *
     * *  `7012` - The action to remove cards should not result in removing all the cards from the bundle.
     *
     * *  `7016` - At least one restriction must be modified for â€œUpdateâ€ request action.
     *
     * *  `7013` - All restrictions cannot be marked for â€œResetâ€ for â€œUpdateâ€ request action.
     *
     * *  `7005` - Day time restriction cannot be set to restrict the use of a card on all days of the
     * week. This validation is applicable for Update request action.
     *
     * *  `7000` - Usage restriction of the bundle is not open ended i.e., all the limits within the
     * usage restriction must not be set to 0/null. This validation is applicable for Update request action.
     *
     * *  `7004` - In the usage restrictions, the limits per transaction should be less than or equal to
     * Daily, Daily should be less than or equal to Weekly, Weekly should be less than or equal to Monthly.
     * Exception being 0/blank will be skipped, i.e., Daily value should be less than equal to Monthly
     * value if Weekly value is 0/blank. This validation is applicable for Update request action.
     *
     * *  `0007` - Error returned if request parameters fail validation e.g. at least one card must be
     * provided in the input.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param UpdateBundleRequest|null $body Update Bundle request body
     *
     * @return UpdateBundleResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateBundle(
        string $apikey,
        string $requestId,
        ?UpdateBundleRequest $body = null
    ): UpdateBundleResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/restriction/updatebundle')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(UpdateBundleResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API enables clients to delete an existing card bundle in the Shell Card Platform. Once the card
     * bundle is deleted the usage and product restrictions of the cards that were present in the bundle
     * will be reset based on the request.
     *
     * #### Supported operations
     *
     * * Delete card bundle by bundle Id
     *
     * #### Validation rules
     *
     * The following are the key validation rules with the associated error codes for failed validation-
     *
     * *  `7019` - The given card bundle is not available in the Shell Card Platform.
     *
     * *  `0007` - Error returned if request parameters fail validation e.g. mandatory check.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param DeleteBundleRequest|null $body Update Bundle request body
     *
     * @return DeleteBundleResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteBundle(
        string $apikey,
        string $requestId,
        ?DeleteBundleRequest $body = null
    ): DeleteBundleResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/restriction/deletebundle')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(DeleteBundleResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API allows clients to get a summary of card bundles associated with Payer/Account. This API
     * will return the basic bundle details including card and restriction details. Optionally the API will
     * also include a count of cards that are not associated with the bundle but returned by the search
     * criteria.
     *
     *
     *
     * Note - to include count of cards of an account that are not associated with any bundles, in the
     * input parameter SearchCardBundles either pass all the bundles of the account in the list or pass
     * only account with bundle id left blank/null.
     *
     *
     *
     * #### Supported operations
     *
     * * Get summary of bundles by list of bundle Ids
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param SummaryofbundlerRequest|null $body Summary of Bundle request body
     *
     * @return SummaryofbundleResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function summaryofbundles(
        string $apikey,
        string $requestId,
        ?SummaryofbundlerRequest $body = null
    ): SummaryofbundleResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/restriction/summaryofbundles'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(SummaryofbundleResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API allows setting or updating the usage restrictions of an existing account.
     *
     *
     *
     * Then validation rules applied for this API.
     *
     *
     *
     * •    The account exists.
     *
     * •    Day time restriction cannot be set to restrict the use of a card, under the account, on all days
     * of the week.
     *
     * •    Either of the usage, daytime or location is either marked for reset or new restriction values
     * provided for the account.
     *
     * •    In usage restrictions, the limits per transaction should be less than or equal to Daily, Daily
     * should be less than or equal to Weekly, Weekly should be less than or equal to Monthly. Exception
     * being 0/blank will be skipped, i.e., Daily value should be less than equal to Monthly value if
     * Weekly value is 0/blank.
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param AccountRestrictionRequest|null $body Account Restriction request body
     *
     * @return AccountRestrictionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restrictionAccount(
        string $apikey,
        string $requestId,
        ?AccountRestrictionRequest $body = null
    ): AccountRestrictionResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/restriction/account')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(AccountRestrictionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API will allow user to get account level limits for the given account. It returns the velocity
     * limits if its overridden at the account else the values will be null/empty.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param SearchAccountLimitRequest|null $body Search Account Limit RequestBody
     *
     * @return SearchAccountLimitResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function searchAccountLimit(
        string $apikey,
        string $requestId,
        ?SearchAccountLimitRequest $body = null
    ): SearchAccountLimitResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/restriction/searchaccountlimit'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(SearchAccountLimitResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API allows to get the details of a specific card bundle. It returns the bundle basic details
     * along with the cards in the bundle and restrictions applied on them.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param BudleDetailsRequest|null $body Bundle Details Request body
     *
     * @return BundleDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function bundledetails(
        string $apikey,
        string $requestId,
        ?BudleDetailsRequest $body = null
    ): BundleDetailsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/restriction/bundledetails')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init("The server cannot or will not process the request  due to something that is pe" .
                "rceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n " .
                "request message framing, or deceptive request routing).")
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('The request has not been applied because it lacks valid  authentication creden' .
                'tials for the target resource.')
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('The server understood the request but refuses to authorize it.')
            )
            ->throwErrorOn(
                '404',
                ErrorType::init('The origin server did not find a current representation  for the target resour' .
                'ce or is not willing to disclose  that one exists.')
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.'
                )
            )
            ->type(BundleDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
