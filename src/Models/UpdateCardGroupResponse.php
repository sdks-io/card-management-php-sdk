<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class UpdateCardGroupResponse implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $mainReference;

    /**
     * @var int|null
     */
    private $updateCardGroupReference;

    /**
     * @var int|null
     */
    private $newCardGroupReference;

    /**
     * @var UpdateCardGroupResponseMoveCardReferencesItems[]|null
     */
    private $moveCardReferences;

    /**
     * @var ErrorStatus|null
     */
    private $error;

    /**
     * @var string|null
     */
    private $requestId;

    /**
     * Returns Main Reference.
     * Reference number for tracking the overall request.
     * The value will be null when the validation fails.
     */
    public function getMainReference(): ?int
    {
        return $this->mainReference;
    }

    /**
     * Sets Main Reference.
     * Reference number for tracking the overall request.
     * The value will be null when the validation fails.
     *
     * @maps MainReference
     */
    public function setMainReference(?int $mainReference): void
    {
        $this->mainReference = $mainReference;
    }

    /**
     * Returns Update Card Group Reference.
     * Reference number for tracking the execution of terminate card-group request.
     * Reference number will be null when the validations fail or TerminateCardGroup in the request object
     * is false.
     */
    public function getUpdateCardGroupReference(): ?int
    {
        return $this->updateCardGroupReference;
    }

    /**
     * Sets Update Card Group Reference.
     * Reference number for tracking the execution of terminate card-group request.
     * Reference number will be null when the validations fail or TerminateCardGroup in the request object
     * is false.
     *
     * @maps UpdateCardGroupReference
     */
    public function setUpdateCardGroupReference(?int $updateCardGroupReference): void
    {
        $this->updateCardGroupReference = $updateCardGroupReference;
    }

    /**
     * Returns New Card Group Reference.
     * Reference number for tracking the execution of new card group creation in the case when the cards in
     * the terminating card-group have to be moved to a new card-group.
     *
     * Reference number will be null when the validations fail or new card-group creation is not requested.
     */
    public function getNewCardGroupReference(): ?int
    {
        return $this->newCardGroupReference;
    }

    /**
     * Sets New Card Group Reference.
     * Reference number for tracking the execution of new card group creation in the case when the cards in
     * the terminating card-group have to be moved to a new card-group.
     *
     * Reference number will be null when the validations fail or new card-group creation is not requested.
     *
     * @maps NewCardGroupReference
     */
    public function setNewCardGroupReference(?int $newCardGroupReference): void
    {
        $this->newCardGroupReference = $newCardGroupReference;
    }

    /**
     * Returns Move Card References.
     * List of cards submitted successfully for processing the move to the target card-group or to change
     * card-group to null.
     * This list will be empty when the validations fail or there are no cards in the card-group that is
     * getting terminated or MoveCards in the request object is false
     *
     * @return UpdateCardGroupResponseMoveCardReferencesItems[]|null
     */
    public function getMoveCardReferences(): ?array
    {
        return $this->moveCardReferences;
    }

    /**
     * Sets Move Card References.
     * List of cards submitted successfully for processing the move to the target card-group or to change
     * card-group to null.
     * This list will be empty when the validations fail or there are no cards in the card-group that is
     * getting terminated or MoveCards in the request object is false
     *
     * @maps MoveCardReferences
     *
     * @param UpdateCardGroupResponseMoveCardReferencesItems[]|null $moveCardReferences
     */
    public function setMoveCardReferences(?array $moveCardReferences): void
    {
        $this->moveCardReferences = $moveCardReferences;
    }

    /**
     * Returns Error.
     */
    public function getError(): ?ErrorStatus
    {
        return $this->error;
    }

    /**
     * Sets Error.
     *
     * @maps Error
     */
    public function setError(?ErrorStatus $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Request Id.
     * API Request ID
     */
    public function getRequestId(): ?string
    {
        return $this->requestId;
    }

    /**
     * Sets Request Id.
     * API Request ID
     *
     * @maps RequestId
     */
    public function setRequestId(?string $requestId): void
    {
        $this->requestId = $requestId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->mainReference)) {
            $json['MainReference']            = $this->mainReference;
        }
        if (isset($this->updateCardGroupReference)) {
            $json['UpdateCardGroupReference'] = $this->updateCardGroupReference;
        }
        if (isset($this->newCardGroupReference)) {
            $json['NewCardGroupReference']    = $this->newCardGroupReference;
        }
        if (isset($this->moveCardReferences)) {
            $json['MoveCardReferences']       = $this->moveCardReferences;
        }
        if (isset($this->error)) {
            $json['Error']                    = $this->error;
        }
        if (isset($this->requestId)) {
            $json['RequestId']                = $this->requestId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
