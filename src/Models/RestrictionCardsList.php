<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class RestrictionCardsList implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var bool|null
     */
    private $resetUsageRestrictions;

    /**
     * @var array
     */
    private $resetDayTimeRestrictions = [];

    /**
     * @var array
     */
    private $resetProductRestrictions = [];

    /**
     * @var array
     */
    private $resetLocationRestrictions = [];

    /**
     * @var array
     */
    private $usageRestrictions = [];

    /**
     * @var DayTimeRestriction|null
     */
    private $dayTimeRestrictions;

    /**
     * @var array
     */
    private $productRestrictions = [];

    /**
     * @var LocationRestriction|null
     */
    private $locationRestrictions;

    /**
     * Returns Account Id.
     * Account ID of the customer.
     *
     * Optional if AccountNumber is passed, else Mandatory.
     *
     * This input is a search criterion, if given.
     *
     * Example: 123456
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.
     *
     * Optional if AccountNumber is passed, else Mandatory.
     *
     * This input is a search criterion, if given.
     *
     * Example: 123456
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the customer.
     *
     * Optional if AccountNumber is passed, else Mandatory.
     *
     * This input is a search criterion, if given.
     *
     * Example: 123456
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card Id
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card Id
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns P AN.
     * Card PAN.
     *
     * Optional if CardId is given, else mandatory.
     *
     * Example: 7002051006629890645
     *
     * Note:
     *
     * • PAN is ignored if CardId is given.
     *
     * When PAN matches with multiple cards, the restriction will be applied on the latest issued card.
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * Card PAN.
     *
     * Optional if CardId is given, else mandatory.
     *
     * Example: 7002051006629890645
     *
     * Note:
     *
     * • PAN is ignored if CardId is given.
     *
     * When PAN matches with multiple cards, the restriction will be applied on the latest issued card.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * Card PAN.
     *
     * Optional if CardId is given, else mandatory.
     *
     * Example: 7002051006629890645
     *
     * Note:
     *
     * • PAN is ignored if CardId is given.
     *
     * When PAN matches with multiple cards, the restriction will be applied on the latest issued card.
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Reset Usage Restrictions.
     * True/False.
     *
     * If true, the usage restrictions applied on the card in Gateway will be reset to Customer Card Type
     * level max limits, if there are no customer level overrides available then OU card type max limits.
     * Else, the card restrictions will be updated with the usage restrictions provided in the API.
     *
     * This property is not dependent on IsVelocityCeiling or SetDefaultOnVelocityUpdate flags.
     */
    public function getResetUsageRestrictions(): ?bool
    {
        return $this->resetUsageRestrictions;
    }

    /**
     * Sets Reset Usage Restrictions.
     * True/False.
     *
     * If true, the usage restrictions applied on the card in Gateway will be reset to Customer Card Type
     * level max limits, if there are no customer level overrides available then OU card type max limits.
     * Else, the card restrictions will be updated with the usage restrictions provided in the API.
     *
     * This property is not dependent on IsVelocityCeiling or SetDefaultOnVelocityUpdate flags.
     *
     * @maps ResetUsageRestrictions
     */
    public function setResetUsageRestrictions(?bool $resetUsageRestrictions): void
    {
        $this->resetUsageRestrictions = $resetUsageRestrictions;
    }

    /**
     * Returns Reset Day Time Restrictions.
     * True/False.
     *
     * If true, the Day/Time restrictions applied on the card will be deleted. Else, the card restrictions
     * will be updated with the day/time restrictions provided in the API.
     */
    public function getResetDayTimeRestrictions(): ?bool
    {
        if (count($this->resetDayTimeRestrictions) == 0) {
            return null;
        }
        return $this->resetDayTimeRestrictions['value'];
    }

    /**
     * Sets Reset Day Time Restrictions.
     * True/False.
     *
     * If true, the Day/Time restrictions applied on the card will be deleted. Else, the card restrictions
     * will be updated with the day/time restrictions provided in the API.
     *
     * @maps ResetDayTimeRestrictions
     */
    public function setResetDayTimeRestrictions(?bool $resetDayTimeRestrictions): void
    {
        $this->resetDayTimeRestrictions['value'] = $resetDayTimeRestrictions;
    }

    /**
     * Unsets Reset Day Time Restrictions.
     * True/False.
     *
     * If true, the Day/Time restrictions applied on the card will be deleted. Else, the card restrictions
     * will be updated with the day/time restrictions provided in the API.
     */
    public function unsetResetDayTimeRestrictions(): void
    {
        $this->resetDayTimeRestrictions = [];
    }

    /**
     * Returns Reset Product Restrictions.
     * True/False.
     *
     * If true, Default fuel/non-fuel sets configured at the purchase category level will be applied to the
     * card. Else, the card will be applied with product restrictions provided in the API.
     */
    public function getResetProductRestrictions(): ?bool
    {
        if (count($this->resetProductRestrictions) == 0) {
            return null;
        }
        return $this->resetProductRestrictions['value'];
    }

    /**
     * Sets Reset Product Restrictions.
     * True/False.
     *
     * If true, Default fuel/non-fuel sets configured at the purchase category level will be applied to the
     * card. Else, the card will be applied with product restrictions provided in the API.
     *
     * @maps ResetProductRestrictions
     */
    public function setResetProductRestrictions(?bool $resetProductRestrictions): void
    {
        $this->resetProductRestrictions['value'] = $resetProductRestrictions;
    }

    /**
     * Unsets Reset Product Restrictions.
     * True/False.
     *
     * If true, Default fuel/non-fuel sets configured at the purchase category level will be applied to the
     * card. Else, the card will be applied with product restrictions provided in the API.
     */
    public function unsetResetProductRestrictions(): void
    {
        $this->resetProductRestrictions = [];
    }

    /**
     * Returns Reset Location Restrictions.
     * True/False.
     *
     * If true, the location restrictions applied on the card will be deleted. Else, the card restrictions
     * will be updated with the location restrictions provided in the API.
     */
    public function getResetLocationRestrictions(): ?bool
    {
        if (count($this->resetLocationRestrictions) == 0) {
            return null;
        }
        return $this->resetLocationRestrictions['value'];
    }

    /**
     * Sets Reset Location Restrictions.
     * True/False.
     *
     * If true, the location restrictions applied on the card will be deleted. Else, the card restrictions
     * will be updated with the location restrictions provided in the API.
     *
     * @maps ResetLocationRestrictions
     */
    public function setResetLocationRestrictions(?bool $resetLocationRestrictions): void
    {
        $this->resetLocationRestrictions['value'] = $resetLocationRestrictions;
    }

    /**
     * Unsets Reset Location Restrictions.
     * True/False.
     *
     * If true, the location restrictions applied on the card will be deleted. Else, the card restrictions
     * will be updated with the location restrictions provided in the API.
     */
    public function unsetResetLocationRestrictions(): void
    {
        $this->resetLocationRestrictions = [];
    }

    /**
     * Returns Usage Restrictions.
     */
    public function getUsageRestrictions(): ?UsageRestrictionsCard
    {
        if (count($this->usageRestrictions) == 0) {
            return null;
        }
        return $this->usageRestrictions['value'];
    }

    /**
     * Sets Usage Restrictions.
     *
     * @maps UsageRestrictions
     */
    public function setUsageRestrictions(?UsageRestrictionsCard $usageRestrictions): void
    {
        $this->usageRestrictions['value'] = $usageRestrictions;
    }

    /**
     * Unsets Usage Restrictions.
     */
    public function unsetUsageRestrictions(): void
    {
        $this->usageRestrictions = [];
    }

    /**
     * Returns Day Time Restrictions.
     * Details of the day/time restrictions such as weekdays and time range in which transactions should be
     * allowed on the card.
     */
    public function getDayTimeRestrictions(): ?DayTimeRestriction
    {
        return $this->dayTimeRestrictions;
    }

    /**
     * Sets Day Time Restrictions.
     * Details of the day/time restrictions such as weekdays and time range in which transactions should be
     * allowed on the card.
     *
     * @maps DayTimeRestrictions
     */
    public function setDayTimeRestrictions(?DayTimeRestriction $dayTimeRestrictions): void
    {
        $this->dayTimeRestrictions = $dayTimeRestrictions;
    }

    /**
     * Returns Product Restrictions.
     */
    public function getProductRestrictions(): ?ProductRestrictionCard
    {
        if (count($this->productRestrictions) == 0) {
            return null;
        }
        return $this->productRestrictions['value'];
    }

    /**
     * Sets Product Restrictions.
     *
     * @maps ProductRestrictions
     */
    public function setProductRestrictions(?ProductRestrictionCard $productRestrictions): void
    {
        $this->productRestrictions['value'] = $productRestrictions;
    }

    /**
     * Unsets Product Restrictions.
     */
    public function unsetProductRestrictions(): void
    {
        $this->productRestrictions = [];
    }

    /**
     * Returns Location Restrictions.
     */
    public function getLocationRestrictions(): ?LocationRestriction
    {
        return $this->locationRestrictions;
    }

    /**
     * Sets Location Restrictions.
     *
     * @maps LocationRestrictions
     */
    public function setLocationRestrictions(?LocationRestriction $locationRestrictions): void
    {
        $this->locationRestrictions = $locationRestrictions;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']                 = $this->accountId['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                    = $this->cardId['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']                       = $this->pAN['value'];
        }
        if (isset($this->resetUsageRestrictions)) {
            $json['ResetUsageRestrictions']    = $this->resetUsageRestrictions;
        }
        if (!empty($this->resetDayTimeRestrictions)) {
            $json['ResetDayTimeRestrictions']  = $this->resetDayTimeRestrictions['value'];
        }
        if (!empty($this->resetProductRestrictions)) {
            $json['ResetProductRestrictions']  = $this->resetProductRestrictions['value'];
        }
        if (!empty($this->resetLocationRestrictions)) {
            $json['ResetLocationRestrictions'] = $this->resetLocationRestrictions['value'];
        }
        if (!empty($this->usageRestrictions)) {
            $json['UsageRestrictions']         = $this->usageRestrictions['value'];
        }
        if (isset($this->dayTimeRestrictions)) {
            $json['DayTimeRestrictions']       = $this->dayTimeRestrictions;
        }
        if (!empty($this->productRestrictions)) {
            $json['ProductRestrictions']       = $this->productRestrictions['value'];
        }
        if (isset($this->locationRestrictions)) {
            $json['LocationRestrictions']      = $this->locationRestrictions;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
