<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

/**
 * Request entity object for CardDetail
 */
class CardDetail implements \JsonSerializable
{
    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $cardTypeId = [];

    /**
     * @var array
     */
    private $tokenTypeId = [];

    /**
     * @var array
     */
    private $embossText = [];

    /**
     * @var array
     */
    private $vRN = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var bool|null
     */
    private $odometerInputRequired;

    /**
     * @var bool|null
     */
    private $fleetIdInputRequired;

    /**
     * @var array
     */
    private $purchaseCategoryId = [];

    /**
     * @var string|null
     */
    private $selfSelectedEncryptedPIN;

    /**
     * @var array
     */
    private $selfSelectedPINKeyID = [];

    /**
     * @var array
     */
    private $selfSelectedPINSessionKey = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var bool|null
     */
    private $isNewCardGroup;

    /**
     * @var bool|null
     */
    private $embossCardGroup;

    /**
     * @var int|null
     */
    private $cardDeliveryType;

    /**
     * @var CardContact|null
     */
    private $cardContact;

    /**
     * @var array
     */
    private $pINDeliveryAddressType = [];

    /**
     * @var int|null
     */
    private $pINAdviceType;

    /**
     * @var PINContact|null
     */
    private $pINContact;

    /**
     * @var bool|null
     */
    private $notifyCaller;

    /**
     * @var array
     */
    private $caller = [];

    /**
     * @var bool|null
     */
    private $notifyCallerOnSync;

    /**
     * @var bool|null
     */
    private $validateFleetId;

    /**
     * @var array
     */
    private $fleetOption = [];

    /**
     * @var array
     */
    private $bundleId = [];

    /**
     * @var array
     */
    private $usageRestrictionAction = [];

    /**
     * @var array
     */
    private $productRestrictionAction = [];

    /**
     * @var string[]|null
     */
    private $products;

    /**
     * @var string[]|null
     */
    private $productGroups;

    /**
     * @var array
     */
    private $expiryDate = [];

    /**
     * @var array
     */
    private $clientReferenceId = [];

    /**
     * @var int|null
     */
    private $autoRenew;

    /**
     * Returns Payer Id.
     * Payer Id  of the selected payer.<br />
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id  of the selected payer.<br />
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id  of the selected payer.<br />
     * Optional if PayerNumber is passed else Mandatory
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional if PayerId is passed else Mandatory
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Account Id.
     * Account ID of the customer.<br />
     * Optional if AccountNumber is passed, else mandatory.<br />
     * This input is a search criterion, if given.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.<br />
     * Optional if AccountNumber is passed, else mandatory.<br />
     * This input is a search criterion, if given.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the customer.<br />
     * Optional if AccountNumber is passed, else mandatory.<br />
     * This input is a search criterion, if given.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.<br />
     * Optional if AccountId is passed, else mandatory.<br />
     * This input is a search criterion, if given.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.<br />
     * Optional if AccountId is passed, else mandatory.<br />
     * This input is a search criterion, if given.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.<br />
     * Optional if AccountId is passed, else mandatory.<br />
     * This input is a search criterion, if given.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.<br />
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.<br />
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.<br />
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id of the selected payer.<br />
     * Optional If ColCo Code is passed else Mandatory
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id of the selected payer.<br />
     * Optional If ColCo Code is passed else Mandatory
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id of the selected payer.<br />
     * Optional If ColCo Code is passed else Mandatory
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Card Type Id.
     * Card Type ID<br />
     * Mandatory
     */
    public function getCardTypeId(): ?int
    {
        if (count($this->cardTypeId) == 0) {
            return null;
        }
        return $this->cardTypeId['value'];
    }

    /**
     * Sets Card Type Id.
     * Card Type ID<br />
     * Mandatory
     *
     * @maps CardTypeId
     */
    public function setCardTypeId(?int $cardTypeId): void
    {
        $this->cardTypeId['value'] = $cardTypeId;
    }

    /**
     * Unsets Card Type Id.
     * Card Type ID<br />
     * Mandatory
     */
    public function unsetCardTypeId(): void
    {
        $this->cardTypeId = [];
    }

    /**
     * Returns Token Type Id.
     * Token Type Id – Linked to the selected card type<br />
     * Optional<br />
     * Default – Assign the default token type associated with the card type of the card being created.<br
     * />
     * The default value will be set by the background process and an error (code 12009) will be thrown by
     * the background process when default value is not identified or invalid token type id is passed in
     * the request.
     */
    public function getTokenTypeId(): ?int
    {
        if (count($this->tokenTypeId) == 0) {
            return null;
        }
        return $this->tokenTypeId['value'];
    }

    /**
     * Sets Token Type Id.
     * Token Type Id – Linked to the selected card type<br />
     * Optional<br />
     * Default – Assign the default token type associated with the card type of the card being created.<br
     * />
     * The default value will be set by the background process and an error (code 12009) will be thrown by
     * the background process when default value is not identified or invalid token type id is passed in
     * the request.
     *
     * @maps TokenTypeId
     */
    public function setTokenTypeId(?int $tokenTypeId): void
    {
        $this->tokenTypeId['value'] = $tokenTypeId;
    }

    /**
     * Unsets Token Type Id.
     * Token Type Id – Linked to the selected card type<br />
     * Optional<br />
     * Default – Assign the default token type associated with the card type of the card being created.<br
     * />
     * The default value will be set by the background process and an error (code 12009) will be thrown by
     * the background process when default value is not identified or invalid token type id is passed in
     * the request.
     */
    public function unsetTokenTypeId(): void
    {
        $this->tokenTypeId = [];
    }

    /**
     * Returns Emboss Text.
     * Text to be printed on the card as Account Name.<br />
     * Optional – When not provided default emboss text associated with the card type will be embossed.<br
     * />
     * Max length: 27<br />
     * The value should be validated against a configured list of allowed characters.<br />
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     */
    public function getEmbossText(): ?string
    {
        if (count($this->embossText) == 0) {
            return null;
        }
        return $this->embossText['value'];
    }

    /**
     * Sets Emboss Text.
     * Text to be printed on the card as Account Name.<br />
     * Optional – When not provided default emboss text associated with the card type will be embossed.<br
     * />
     * Max length: 27<br />
     * The value should be validated against a configured list of allowed characters.<br />
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     *
     * @maps EmbossText
     */
    public function setEmbossText(?string $embossText): void
    {
        $this->embossText['value'] = $embossText;
    }

    /**
     * Unsets Emboss Text.
     * Text to be printed on the card as Account Name.<br />
     * Optional – When not provided default emboss text associated with the card type will be embossed.<br
     * />
     * Max length: 27<br />
     * The value should be validated against a configured list of allowed characters.<br />
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     */
    public function unsetEmbossText(): void
    {
        $this->embossText = [];
    }

    /**
     * Returns V RN.
     * Vehicle registration number.<br/>
     *
     * Optional when DriverName is passed else mandatory.<br/>
     *
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.<br />
     *
     * Max length: 24<br />
     *
     * The value will be validated against a configured list of allowed characters.<br />
     *
     * Default value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] .
     *
     * </br>Note: If Driver Name is null or empty, max allowed characters for VRN is 16.  When Driver Name
     * is provided, max allowed characters for VRN is 24.
     */
    public function getVRN(): ?string
    {
        if (count($this->vRN) == 0) {
            return null;
        }
        return $this->vRN['value'];
    }

    /**
     * Sets V RN.
     * Vehicle registration number.<br/>
     *
     * Optional when DriverName is passed else mandatory.<br/>
     *
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.<br />
     *
     * Max length: 24<br />
     *
     * The value will be validated against a configured list of allowed characters.<br />
     *
     * Default value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] .
     *
     * </br>Note: If Driver Name is null or empty, max allowed characters for VRN is 16.  When Driver Name
     * is provided, max allowed characters for VRN is 24.
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN['value'] = $vRN;
    }

    /**
     * Unsets V RN.
     * Vehicle registration number.<br/>
     *
     * Optional when DriverName is passed else mandatory.<br/>
     *
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.<br />
     *
     * Max length: 24<br />
     *
     * The value will be validated against a configured list of allowed characters.<br />
     *
     * Default value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] .
     *
     * </br>Note: If Driver Name is null or empty, max allowed characters for VRN is 16.  When Driver Name
     * is provided, max allowed characters for VRN is 24.
     */
    public function unsetVRN(): void
    {
        $this->vRN = [];
    }

    /**
     * Returns Driver Name.
     * Driver Name.<br />
     * Optional when VRN is passed else mandatory.<br />
     * Max length: 27<br />
     * The value will be validated against a configured list of allowed characters.<br />
     * Default value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]<br />
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver Name.<br />
     * Optional when VRN is passed else mandatory.<br />
     * Max length: 27<br />
     * The value will be validated against a configured list of allowed characters.<br />
     * Default value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]<br />
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver Name.<br />
     * Optional when VRN is passed else mandatory.<br />
     * Max length: 27<br />
     * The value will be validated against a configured list of allowed characters.<br />
     * Default value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]<br />
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Odometer Input Required.
     * Odometer Input to be enabled on the card<br />
     * Optional.<br />
     * Default is False
     */
    public function getOdometerInputRequired(): ?bool
    {
        return $this->odometerInputRequired;
    }

    /**
     * Sets Odometer Input Required.
     * Odometer Input to be enabled on the card<br />
     * Optional.<br />
     * Default is False
     *
     * @maps OdometerInputRequired
     */
    public function setOdometerInputRequired(?bool $odometerInputRequired): void
    {
        $this->odometerInputRequired = $odometerInputRequired;
    }

    /**
     * Returns Fleet Id Input Required.
     * FleetId Input to be enabled on the card<br />
     * Optional.<br />
     * Default is False<br />
     * Note: If AllowFleetIdInput settings of the account is disabled and this flag is marked
     *
     * true in the request, then request will be processed with VRN input required
     *
     * enabled instead of Fleet Id input required
     */
    public function getFleetIdInputRequired(): ?bool
    {
        return $this->fleetIdInputRequired;
    }

    /**
     * Sets Fleet Id Input Required.
     * FleetId Input to be enabled on the card<br />
     * Optional.<br />
     * Default is False<br />
     * Note: If AllowFleetIdInput settings of the account is disabled and this flag is marked
     *
     * true in the request, then request will be processed with VRN input required
     *
     * enabled instead of Fleet Id input required
     *
     * @maps FleetIdInputRequired
     */
    public function setFleetIdInputRequired(?bool $fleetIdInputRequired): void
    {
        $this->fleetIdInputRequired = $fleetIdInputRequired;
    }

    /**
     * Returns Purchase Category Id.
     * Purchase category Id<br />
     * Mandatory
     */
    public function getPurchaseCategoryId(): ?int
    {
        if (count($this->purchaseCategoryId) == 0) {
            return null;
        }
        return $this->purchaseCategoryId['value'];
    }

    /**
     * Sets Purchase Category Id.
     * Purchase category Id<br />
     * Mandatory
     *
     * @maps PurchaseCategoryId
     */
    public function setPurchaseCategoryId(?int $purchaseCategoryId): void
    {
        $this->purchaseCategoryId['value'] = $purchaseCategoryId;
    }

    /**
     * Unsets Purchase Category Id.
     * Purchase category Id<br />
     * Mandatory
     */
    public function unsetPurchaseCategoryId(): void
    {
        $this->purchaseCategoryId = [];
    }

    /**
     * Returns Self Selected Encrypted PIN.
     * The encrypted value of self-selected PIN.<br />
     * Optional – When not provided, the PIN will be auto generated(if the card token type supports PIN)
     * and delivered based on the given PIN delivery option.<br />
     * Max Length: 256
     */
    public function getSelfSelectedEncryptedPIN(): ?string
    {
        return $this->selfSelectedEncryptedPIN;
    }

    /**
     * Sets Self Selected Encrypted PIN.
     * The encrypted value of self-selected PIN.<br />
     * Optional – When not provided, the PIN will be auto generated(if the card token type supports PIN)
     * and delivered based on the given PIN delivery option.<br />
     * Max Length: 256
     *
     * @maps SelfSelectedEncryptedPIN
     */
    public function setSelfSelectedEncryptedPIN(?string $selfSelectedEncryptedPIN): void
    {
        $this->selfSelectedEncryptedPIN = $selfSelectedEncryptedPIN;
    }

    /**
     * Returns Self Selected PIN Key ID.
     * KeyId of the PIN encrypted value.<br />
     * Mandatory, if opted for self-selected PIN else optional.<br />
     * Max Length: 30
     */
    public function getSelfSelectedPINKeyID(): ?string
    {
        if (count($this->selfSelectedPINKeyID) == 0) {
            return null;
        }
        return $this->selfSelectedPINKeyID['value'];
    }

    /**
     * Sets Self Selected PIN Key ID.
     * KeyId of the PIN encrypted value.<br />
     * Mandatory, if opted for self-selected PIN else optional.<br />
     * Max Length: 30
     *
     * @maps SelfSelectedPINKeyID
     */
    public function setSelfSelectedPINKeyID(?string $selfSelectedPINKeyID): void
    {
        $this->selfSelectedPINKeyID['value'] = $selfSelectedPINKeyID;
    }

    /**
     * Unsets Self Selected PIN Key ID.
     * KeyId of the PIN encrypted value.<br />
     * Mandatory, if opted for self-selected PIN else optional.<br />
     * Max Length: 30
     */
    public function unsetSelfSelectedPINKeyID(): void
    {
        $this->selfSelectedPINKeyID = [];
    }

    /**
     * Returns Self Selected PIN Session Key.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.<br />
     * The encode message forms are provided to clients by another API (“TCS”).<br />
     * Instructions to encrypt the PIN is covered in the related API specifications document.<br />
     * Mandatory –If opted for self-selected PIN else optional.
     * Max Length: 1024
     */
    public function getSelfSelectedPINSessionKey(): ?string
    {
        if (count($this->selfSelectedPINSessionKey) == 0) {
            return null;
        }
        return $this->selfSelectedPINSessionKey['value'];
    }

    /**
     * Sets Self Selected PIN Session Key.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.<br />
     * The encode message forms are provided to clients by another API (“TCS”).<br />
     * Instructions to encrypt the PIN is covered in the related API specifications document.<br />
     * Mandatory –If opted for self-selected PIN else optional.
     * Max Length: 1024
     *
     * @maps SelfSelectedPINSessionKey
     */
    public function setSelfSelectedPINSessionKey(?string $selfSelectedPINSessionKey): void
    {
        $this->selfSelectedPINSessionKey['value'] = $selfSelectedPINSessionKey;
    }

    /**
     * Unsets Self Selected PIN Session Key.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.<br />
     * The encode message forms are provided to clients by another API (“TCS”).<br />
     * Instructions to encrypt the PIN is covered in the related API specifications document.<br />
     * Mandatory –If opted for self-selected PIN else optional.
     * Max Length: 1024
     */
    public function unsetSelfSelectedPINSessionKey(): void
    {
        $this->selfSelectedPINSessionKey = [];
    }

    /**
     * Returns Card Group Id.
     * Card group ID<br />
     * Optional
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card group ID<br />
     * Optional
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card group ID<br />
     * Optional
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name<br />
     * This field is mandatory when IsNewCardGroup parameter is set to true.<br />
     * Maximum field length: 40<br />
     * The value will be validated against a configured list of allowed characters.<br />
     * Default value for the configuration is: [0-9A-Z.]
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name<br />
     * This field is mandatory when IsNewCardGroup parameter is set to true.<br />
     * Maximum field length: 40<br />
     * The value will be validated against a configured list of allowed characters.<br />
     * Default value for the configuration is: [0-9A-Z.]
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name<br />
     * This field is mandatory when IsNewCardGroup parameter is set to true.<br />
     * Maximum field length: 40<br />
     * The value will be validated against a configured list of allowed characters.<br />
     * Default value for the configuration is: [0-9A-Z.]
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Is New Card Group.
     * This need to be set to true if the card group needs to be created prior to processing the card order
     * and the card needs to be assigned to the newly created card group.<br />
     * Optional<br />
     * Default - False
     */
    public function getIsNewCardGroup(): ?bool
    {
        return $this->isNewCardGroup;
    }

    /**
     * Sets Is New Card Group.
     * This need to be set to true if the card group needs to be created prior to processing the card order
     * and the card needs to be assigned to the newly created card group.<br />
     * Optional<br />
     * Default - False
     *
     * @maps IsNewCardGroup
     */
    public function setIsNewCardGroup(?bool $isNewCardGroup): void
    {
        $this->isNewCardGroup = $isNewCardGroup;
    }

    /**
     * Returns Emboss Card Group.
     * This should be set to true if the card group name needs to be printed on the newly created card
     * under a new card group.<br />
     *
     * Optional<br />
     *
     * Default – False<br />
     *
     * Note: This value will be considered only if a new CardGroup is created for the Card.(i.e.when
     * IsNewCardGroup is true)
     *
     * If the Card is added to an existing CardGroup,
     *
     * the property ‘PrintOnCard’ set for the CardGroup will determine whether the CardGroupName
     * should be embossed on the Card.
     */
    public function getEmbossCardGroup(): ?bool
    {
        return $this->embossCardGroup;
    }

    /**
     * Sets Emboss Card Group.
     * This should be set to true if the card group name needs to be printed on the newly created card
     * under a new card group.<br />
     *
     * Optional<br />
     *
     * Default – False<br />
     *
     * Note: This value will be considered only if a new CardGroup is created for the Card.(i.e.when
     * IsNewCardGroup is true)
     *
     * If the Card is added to an existing CardGroup,
     *
     * the property ‘PrintOnCard’ set for the CardGroup will determine whether the CardGroupName
     * should be embossed on the Card.
     *
     * @maps EmbossCardGroup
     */
    public function setEmbossCardGroup(?bool $embossCardGroup): void
    {
        $this->embossCardGroup = $embossCardGroup;
    }

    /**
     * Returns Card Delivery Type.
     * Card delivery type.<br />
     * Mandatory <br />
     * Allowed Value: <br />
     * 1. Customer Address(Default) <br />
     * 2. New Delivery Address
     */
    public function getCardDeliveryType(): ?int
    {
        return $this->cardDeliveryType;
    }

    /**
     * Sets Card Delivery Type.
     * Card delivery type.<br />
     * Mandatory <br />
     * Allowed Value: <br />
     * 1. Customer Address(Default) <br />
     * 2. New Delivery Address
     *
     * @maps CardDeliveryType
     */
    public function setCardDeliveryType(?int $cardDeliveryType): void
    {
        $this->cardDeliveryType = $cardDeliveryType;
    }

    /**
     * Returns Card Contact.
     */
    public function getCardContact(): ?CardContact
    {
        return $this->cardContact;
    }

    /**
     * Sets Card Contact.
     *
     * @maps CardContact
     */
    public function setCardContact(?CardContact $cardContact): void
    {
        $this->cardContact = $cardContact;
    }

    /**
     * Returns P in Delivery Address Type.
     * PIN delivery address type selection.<br />
     * Optional<br />
     * Allowed Values:<br />
     * 1. Customer Address(Default)<br />
     * 2. Card Address<br />
     * 3. New Delivery Address
     */
    public function getPINDeliveryAddressType(): ?int
    {
        if (count($this->pINDeliveryAddressType) == 0) {
            return null;
        }
        return $this->pINDeliveryAddressType['value'];
    }

    /**
     * Sets P in Delivery Address Type.
     * PIN delivery address type selection.<br />
     * Optional<br />
     * Allowed Values:<br />
     * 1. Customer Address(Default)<br />
     * 2. Card Address<br />
     * 3. New Delivery Address
     *
     * @maps PINDeliveryAddressType
     */
    public function setPINDeliveryAddressType(?int $pINDeliveryAddressType): void
    {
        $this->pINDeliveryAddressType['value'] = $pINDeliveryAddressType;
    }

    /**
     * Unsets P in Delivery Address Type.
     * PIN delivery address type selection.<br />
     * Optional<br />
     * Allowed Values:<br />
     * 1. Customer Address(Default)<br />
     * 2. Card Address<br />
     * 3. New Delivery Address
     */
    public function unsetPINDeliveryAddressType(): void
    {
        $this->pINDeliveryAddressType = [];
    }

    /**
     * Returns P in Advice Type.
     * PIN delivery method.<br />
     * Mandatory<br />
     * Allowed Values:<br />
     * 1. Paper<br />
     * 2. Email<br />
     * 3. SMS<br />
     * 4. None <br /> **Note:** Paper delivery not applicable for selfselctedPIN type
     */
    public function getPINAdviceType(): ?int
    {
        return $this->pINAdviceType;
    }

    /**
     * Sets P in Advice Type.
     * PIN delivery method.<br />
     * Mandatory<br />
     * Allowed Values:<br />
     * 1. Paper<br />
     * 2. Email<br />
     * 3. SMS<br />
     * 4. None <br /> **Note:** Paper delivery not applicable for selfselctedPIN type
     *
     * @maps PINAdviceType
     */
    public function setPINAdviceType(?int $pINAdviceType): void
    {
        $this->pINAdviceType = $pINAdviceType;
    }

    /**
     * Returns P in Contact.
     */
    public function getPINContact(): ?PINContact
    {
        return $this->pINContact;
    }

    /**
     * Sets P in Contact.
     *
     * @maps PINContact
     */
    public function setPINContact(?PINContact $pINContact): void
    {
        $this->pINContact = $pINContact;
    }

    /**
     * Returns Notify Caller.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failure after the card
     * order is processed.
     * This webhook feature has to be subscribed by the customer prior to use , please refer the API
     * documentation for the more details.
     */
    public function getNotifyCaller(): ?bool
    {
        return $this->notifyCaller;
    }

    /**
     * Sets Notify Caller.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failure after the card
     * order is processed.
     * This webhook feature has to be subscribed by the customer prior to use , please refer the API
     * documentation for the more details.
     *
     * @maps NotifyCaller
     */
    public function setNotifyCaller(?bool $notifyCaller): void
    {
        $this->notifyCaller = $notifyCaller;
    }

    /**
     * Returns Caller.
     * The caller to be notified with the status of the card order.<br />
     * Mandatory, if NotifyCaller is true.<br />
     * Maximum field length: 20<br />
     * Allowed values:<br />
     * • “NextGenUI”: This value to be used by next gen UI application.<br />
     * • “FleetHubUILifeTime”: This value to be used by Fleet Hub UI application for life time restriction
     * cards.<br />
     * Note: The values passed in this field are case insensitive
     */
    public function getCaller(): ?string
    {
        if (count($this->caller) == 0) {
            return null;
        }
        return $this->caller['value'];
    }

    /**
     * Sets Caller.
     * The caller to be notified with the status of the card order.<br />
     * Mandatory, if NotifyCaller is true.<br />
     * Maximum field length: 20<br />
     * Allowed values:<br />
     * • “NextGenUI”: This value to be used by next gen UI application.<br />
     * • “FleetHubUILifeTime”: This value to be used by Fleet Hub UI application for life time restriction
     * cards.<br />
     * Note: The values passed in this field are case insensitive
     *
     * @maps Caller
     */
    public function setCaller(?string $caller): void
    {
        $this->caller['value'] = $caller;
    }

    /**
     * Unsets Caller.
     * The caller to be notified with the status of the card order.<br />
     * Mandatory, if NotifyCaller is true.<br />
     * Maximum field length: 20<br />
     * Allowed values:<br />
     * • “NextGenUI”: This value to be used by next gen UI application.<br />
     * • “FleetHubUILifeTime”: This value to be used by Fleet Hub UI application for life time restriction
     * cards.<br />
     * Note: The values passed in this field are case insensitive
     */
    public function unsetCaller(): void
    {
        $this->caller = [];
    }

    /**
     * Returns Notify Caller on Sync.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failed after the processed
     * card is synced with Gateway.
     */
    public function getNotifyCallerOnSync(): ?bool
    {
        return $this->notifyCallerOnSync;
    }

    /**
     * Sets Notify Caller on Sync.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failed after the processed
     * card is synced with Gateway.
     *
     * @maps NotifyCallerOnSync
     */
    public function setNotifyCallerOnSync(?bool $notifyCallerOnSync): void
    {
        $this->notifyCallerOnSync = $notifyCallerOnSync;
    }

    /**
     * Returns Validate Fleet Id.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * For cards ordered with Validate Fleet Id parameter set to true, CFGW will be notified to enable this
     * validation for the card.<br />
     * Note: When “FleetIdInputRequired” is not set on the card, validate fleet id will be considered false
     * regardless of the value passed on this parameter.
     */
    public function getValidateFleetId(): ?bool
    {
        return $this->validateFleetId;
    }

    /**
     * Sets Validate Fleet Id.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * For cards ordered with Validate Fleet Id parameter set to true, CFGW will be notified to enable this
     * validation for the card.<br />
     * Note: When “FleetIdInputRequired” is not set on the card, validate fleet id will be considered false
     * regardless of the value passed on this parameter.
     *
     * @maps ValidateFleetId
     */
    public function setValidateFleetId(?bool $validateFleetId): void
    {
        $this->validateFleetId = $validateFleetId;
    }

    /**
     * Returns Fleet Option.
     * Type of action will be performed for the card when the fleet Id is validated.<br />
     * Optional.<br />
     * Default: NO_VALIDATION<br />
     * Allowed values:<br />
     * • ALERT<br />
     * • DECLINE<br />
     * • DECLINE_ALERT<br />
     * • NO_VALIDATION<br />
     * Note: When FleetIdOption is not provided and validatefleetid is true then by default allowed value
     * is NO_VALIDATION.
     */
    public function getFleetOption(): ?string
    {
        if (count($this->fleetOption) == 0) {
            return null;
        }
        return $this->fleetOption['value'];
    }

    /**
     * Sets Fleet Option.
     * Type of action will be performed for the card when the fleet Id is validated.<br />
     * Optional.<br />
     * Default: NO_VALIDATION<br />
     * Allowed values:<br />
     * • ALERT<br />
     * • DECLINE<br />
     * • DECLINE_ALERT<br />
     * • NO_VALIDATION<br />
     * Note: When FleetIdOption is not provided and validatefleetid is true then by default allowed value
     * is NO_VALIDATION.
     *
     * @maps FleetOption
     */
    public function setFleetOption(?string $fleetOption): void
    {
        $this->fleetOption['value'] = $fleetOption;
    }

    /**
     * Unsets Fleet Option.
     * Type of action will be performed for the card when the fleet Id is validated.<br />
     * Optional.<br />
     * Default: NO_VALIDATION<br />
     * Allowed values:<br />
     * • ALERT<br />
     * • DECLINE<br />
     * • DECLINE_ALERT<br />
     * • NO_VALIDATION<br />
     * Note: When FleetIdOption is not provided and validatefleetid is true then by default allowed value
     * is NO_VALIDATION.
     */
    public function unsetFleetOption(): void
    {
        $this->fleetOption = [];
    }

    /**
     * Returns Bundle Id.
     * Gateway Bundle Id to which the ordered card will be added.<br />
     * Optional.<br />
     * When a valid bundle Id is passed, upon successful processing of Card Order, the card will be added
     * to the provided bundle in Gateway.
     * If card bundle has crossed the limit of 500 cards or if the card bundle is not available in the
     * gateway then the background services will fail to added the card to the bundle.
     */
    public function getBundleId(): ?string
    {
        if (count($this->bundleId) == 0) {
            return null;
        }
        return $this->bundleId['value'];
    }

    /**
     * Sets Bundle Id.
     * Gateway Bundle Id to which the ordered card will be added.<br />
     * Optional.<br />
     * When a valid bundle Id is passed, upon successful processing of Card Order, the card will be added
     * to the provided bundle in Gateway.
     * If card bundle has crossed the limit of 500 cards or if the card bundle is not available in the
     * gateway then the background services will fail to added the card to the bundle.
     *
     * @maps BundleId
     */
    public function setBundleId(?string $bundleId): void
    {
        $this->bundleId['value'] = $bundleId;
    }

    /**
     * Unsets Bundle Id.
     * Gateway Bundle Id to which the ordered card will be added.<br />
     * Optional.<br />
     * When a valid bundle Id is passed, upon successful processing of Card Order, the card will be added
     * to the provided bundle in Gateway.
     * If card bundle has crossed the limit of 500 cards or if the card bundle is not available in the
     * gateway then the background services will fail to added the card to the bundle.
     */
    public function unsetBundleId(): void
    {
        $this->bundleId = [];
    }

    /**
     * Returns Usage Restriction Action.
     * The value indicates what actions is to be performed with respect to usage restrictions on the card
     * being ordered.<br />
     * UsageRestrictionAction is mandatory when bundle Id is passed. Else ignored.<br />
     * Allowed values: –<br />
     * • Update<br />
     * • Default<br />
     * • None
     */
    public function getUsageRestrictionAction(): ?string
    {
        if (count($this->usageRestrictionAction) == 0) {
            return null;
        }
        return $this->usageRestrictionAction['value'];
    }

    /**
     * Sets Usage Restriction Action.
     * The value indicates what actions is to be performed with respect to usage restrictions on the card
     * being ordered.<br />
     * UsageRestrictionAction is mandatory when bundle Id is passed. Else ignored.<br />
     * Allowed values: –<br />
     * • Update<br />
     * • Default<br />
     * • None
     *
     * @maps UsageRestrictionAction
     */
    public function setUsageRestrictionAction(?string $usageRestrictionAction): void
    {
        $this->usageRestrictionAction['value'] = $usageRestrictionAction;
    }

    /**
     * Unsets Usage Restriction Action.
     * The value indicates what actions is to be performed with respect to usage restrictions on the card
     * being ordered.<br />
     * UsageRestrictionAction is mandatory when bundle Id is passed. Else ignored.<br />
     * Allowed values: –<br />
     * • Update<br />
     * • Default<br />
     * • None
     */
    public function unsetUsageRestrictionAction(): void
    {
        $this->usageRestrictionAction = [];
    }

    /**
     * Returns Product Restriction Action.
     * The value indicates what actions is to be performed with respect to product restrictions on the card
     * being ordered.<br />
     * ProductRestrictionAction is mandatory when bundle Id is passed. Else ignored.<br />
     * Allowed values: -<br />
     * • Update<br />
     * • Default<br />
     * • None<br />
     * Note: This field is applicable when product restrictions
     */
    public function getProductRestrictionAction(): ?string
    {
        if (count($this->productRestrictionAction) == 0) {
            return null;
        }
        return $this->productRestrictionAction['value'];
    }

    /**
     * Sets Product Restriction Action.
     * The value indicates what actions is to be performed with respect to product restrictions on the card
     * being ordered.<br />
     * ProductRestrictionAction is mandatory when bundle Id is passed. Else ignored.<br />
     * Allowed values: -<br />
     * • Update<br />
     * • Default<br />
     * • None<br />
     * Note: This field is applicable when product restrictions
     *
     * @maps ProductRestrictionAction
     */
    public function setProductRestrictionAction(?string $productRestrictionAction): void
    {
        $this->productRestrictionAction['value'] = $productRestrictionAction;
    }

    /**
     * Unsets Product Restriction Action.
     * The value indicates what actions is to be performed with respect to product restrictions on the card
     * being ordered.<br />
     * ProductRestrictionAction is mandatory when bundle Id is passed. Else ignored.<br />
     * Allowed values: -<br />
     * • Update<br />
     * • Default<br />
     * • None<br />
     * Note: This field is applicable when product restrictions
     */
    public function unsetProductRestrictionAction(): void
    {
        $this->productRestrictionAction = [];
    }

    /**
     * Returns Products.
     * An array of 3-digit global product codes.<br />
     * Optional.<br />
     * Default restrictions will be applied both products and product groups are null or empty.<br />
     * Note: This field is applicable when product restrictions are migrated to CFGW else, it will be
     * ignored.
     *
     * @return string[]|null
     */
    public function getProducts(): ?array
    {
        return $this->products;
    }

    /**
     * Sets Products.
     * An array of 3-digit global product codes.<br />
     * Optional.<br />
     * Default restrictions will be applied both products and product groups are null or empty.<br />
     * Note: This field is applicable when product restrictions are migrated to CFGW else, it will be
     * ignored.
     *
     * @maps Products
     *
     * @param string[]|null $products
     */
    public function setProducts(?array $products): void
    {
        $this->products = $products;
    }

    /**
     * Returns Product Groups.
     * An array of product group ids.<br />
     * Optional.<br />
     * Default restrictions will be applied both products and product groups are null or empty.<br />
     * Note: This field is applicable when product restrictions are migrated to CFGW else, it will be
     * ignored
     *
     * @return string[]|null
     */
    public function getProductGroups(): ?array
    {
        return $this->productGroups;
    }

    /**
     * Sets Product Groups.
     * An array of product group ids.<br />
     * Optional.<br />
     * Default restrictions will be applied both products and product groups are null or empty.<br />
     * Note: This field is applicable when product restrictions are migrated to CFGW else, it will be
     * ignored
     *
     * @maps ProductGroups
     *
     * @param string[]|null $productGroups
     */
    public function setProductGroups(?array $productGroups): void
    {
        $this->productGroups = $productGroups;
    }

    /**
     * Returns Expiry Date.
     * Expiry Date for newly created card to be update in cards plot form.<br />
     *
     * Optional.<br />
     *
     * Format: MMyy<br />
     *
     * If not apply default Expiry Date.<br />
     *
     * Note: There is a limit to the ExpiryDate which the user can choose for the Card.
     *
     * The expiry date which can be set for a card depends on the Card Type and the associated
     * business rules for the OU.
     *
     * If the user chooses a later ExpiryDate than the allowed value for the CardType for the OU,
     *
     * Default Assigned Expiry Date will be applied on the card.
     */
    public function getExpiryDate(): ?string
    {
        if (count($this->expiryDate) == 0) {
            return null;
        }
        return $this->expiryDate['value'];
    }

    /**
     * Sets Expiry Date.
     * Expiry Date for newly created card to be update in cards plot form.<br />
     *
     * Optional.<br />
     *
     * Format: MMyy<br />
     *
     * If not apply default Expiry Date.<br />
     *
     * Note: There is a limit to the ExpiryDate which the user can choose for the Card.
     *
     * The expiry date which can be set for a card depends on the Card Type and the associated
     * business rules for the OU.
     *
     * If the user chooses a later ExpiryDate than the allowed value for the CardType for the OU,
     *
     * Default Assigned Expiry Date will be applied on the card.
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate['value'] = $expiryDate;
    }

    /**
     * Unsets Expiry Date.
     * Expiry Date for newly created card to be update in cards plot form.<br />
     *
     * Optional.<br />
     *
     * Format: MMyy<br />
     *
     * If not apply default Expiry Date.<br />
     *
     * Note: There is a limit to the ExpiryDate which the user can choose for the Card.
     *
     * The expiry date which can be set for a card depends on the Card Type and the associated
     * business rules for the OU.
     *
     * If the user chooses a later ExpiryDate than the allowed value for the CardType for the OU,
     *
     * Default Assigned Expiry Date will be applied on the card.
     */
    public function unsetExpiryDate(): void
    {
        $this->expiryDate = [];
    }

    /**
     * Returns Client Reference Id.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.This
     * will be playback in the ordercard enquiry<br />
     * Optional
     */
    public function getClientReferenceId(): ?string
    {
        if (count($this->clientReferenceId) == 0) {
            return null;
        }
        return $this->clientReferenceId['value'];
    }

    /**
     * Sets Client Reference Id.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.This
     * will be playback in the ordercard enquiry<br />
     * Optional
     *
     * @maps ClientReferenceId
     */
    public function setClientReferenceId(?string $clientReferenceId): void
    {
        $this->clientReferenceId['value'] = $clientReferenceId;
    }

    /**
     * Unsets Client Reference Id.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.This
     * will be playback in the ordercard enquiry<br />
     * Optional
     */
    public function unsetClientReferenceId(): void
    {
        $this->clientReferenceId = [];
    }

    /**
     * Returns Auto Renew.
     */
    public function getAutoRenew(): ?int
    {
        return $this->autoRenew;
    }

    /**
     * Sets Auto Renew.
     *
     * @maps AutoRenew
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailAutoRenewEnum::checkValue
     */
    public function setAutoRenew(?int $autoRenew): void
    {
        $this->autoRenew = $autoRenew;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->payerId)) {
            $json['PayerId']                   = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']               = $this->payerNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                 = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']             = $this->accountNumber['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                 = $this->colCoCode['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                   = $this->colCoId['value'];
        }
        if (!empty($this->cardTypeId)) {
            $json['CardTypeId']                = $this->cardTypeId['value'];
        }
        if (!empty($this->tokenTypeId)) {
            $json['TokenTypeId']               = $this->tokenTypeId['value'];
        }
        if (!empty($this->embossText)) {
            $json['EmbossText']                = $this->embossText['value'];
        }
        if (!empty($this->vRN)) {
            $json['VRN']                       = $this->vRN['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                = $this->driverName['value'];
        }
        if (isset($this->odometerInputRequired)) {
            $json['OdometerInputRequired']     = $this->odometerInputRequired;
        }
        if (isset($this->fleetIdInputRequired)) {
            $json['FleetIdInputRequired']      = $this->fleetIdInputRequired;
        }
        if (!empty($this->purchaseCategoryId)) {
            $json['PurchaseCategoryId']        = $this->purchaseCategoryId['value'];
        }
        if (isset($this->selfSelectedEncryptedPIN)) {
            $json['SelfSelectedEncryptedPIN']  = $this->selfSelectedEncryptedPIN;
        }
        if (!empty($this->selfSelectedPINKeyID)) {
            $json['SelfSelectedPINKeyID']      = $this->selfSelectedPINKeyID['value'];
        }
        if (!empty($this->selfSelectedPINSessionKey)) {
            $json['SelfSelectedPINSessionKey'] = $this->selfSelectedPINSessionKey['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']               = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']             = $this->cardGroupName['value'];
        }
        if (isset($this->isNewCardGroup)) {
            $json['IsNewCardGroup']            = $this->isNewCardGroup;
        }
        if (isset($this->embossCardGroup)) {
            $json['EmbossCardGroup']           = $this->embossCardGroup;
        }
        $json['CardDeliveryType']              = $this->cardDeliveryType;
        if (isset($this->cardContact)) {
            $json['CardContact']               = $this->cardContact;
        }
        if (!empty($this->pINDeliveryAddressType)) {
            $json['PINDeliveryAddressType']    = $this->pINDeliveryAddressType['value'];
        }
        $json['PINAdviceType']                 = $this->pINAdviceType;
        if (isset($this->pINContact)) {
            $json['PINContact']                = $this->pINContact;
        }
        if (isset($this->notifyCaller)) {
            $json['NotifyCaller']              = $this->notifyCaller;
        }
        if (!empty($this->caller)) {
            $json['Caller']                    = $this->caller['value'];
        }
        if (isset($this->notifyCallerOnSync)) {
            $json['NotifyCallerOnSync']        = $this->notifyCallerOnSync;
        }
        if (isset($this->validateFleetId)) {
            $json['ValidateFleetId']           = $this->validateFleetId;
        }
        if (!empty($this->fleetOption)) {
            $json['FleetOption']               = $this->fleetOption['value'];
        }
        if (!empty($this->bundleId)) {
            $json['BundleId']                  = $this->bundleId['value'];
        }
        if (!empty($this->usageRestrictionAction)) {
            $json['UsageRestrictionAction']    = $this->usageRestrictionAction['value'];
        }
        if (!empty($this->productRestrictionAction)) {
            $json['ProductRestrictionAction']  = $this->productRestrictionAction['value'];
        }
        if (isset($this->products)) {
            $json['Products']                  = $this->products;
        }
        if (isset($this->productGroups)) {
            $json['ProductGroups']             = $this->productGroups;
        }
        if (!empty($this->expiryDate)) {
            $json['ExpiryDate']                = $this->expiryDate['value'];
        }
        if (!empty($this->clientReferenceId)) {
            $json['ClientReferenceId']         = $this->clientReferenceId['value'];
        }
        if (isset($this->autoRenew)) {
            $json['AutoRenew']                 = CardDetailAutoRenewEnum::checkValue($this->autoRenew);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
