<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class Card implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $bundleId = [];

    /**
     * @var CardBlockSchedule[]|null
     */
    private $cardBlockSchedules;

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $cardTypeCode = [];

    /**
     * @var array
     */
    private $cardTypeId = [];

    /**
     * @var array
     */
    private $cardTypeName = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $creationDate = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $effectiveDate = [];

    /**
     * @var array
     */
    private $expiryDate = [];

    /**
     * @var bool|null
     */
    private $fleetIdInput;

    /**
     * @var bool|null
     */
    private $isCRT;

    /**
     * @var bool|null
     */
    private $isFleet;

    /**
     * @var bool|null
     */
    private $isInternational;

    /**
     * @var bool|null
     */
    private $isNational;

    /**
     * @var bool|null
     */
    private $isPartnerSitesIncluded;

    /**
     * @var bool|null
     */
    private $isShellSitesOnly;

    /**
     * @var array
     */
    private $issueDate = [];

    /**
     * @var bool|null
     */
    private $isSuperseded;

    /**
     * @var bool|null
     */
    private $isVirtualCard;

    /**
     * @var array
     */
    private $lastModifiedDate = [];

    /**
     * @var array
     */
    private $lastUsedDate = [];

    /**
     * @var array
     */
    private $localCurrencyCode = [];

    /**
     * @var array
     */
    private $localCurrencySymbol = [];

    /**
     * @var bool|null
     */
    private $odometerInput;

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var string|null
     */
    private $maskedPAN;

    /**
     * @var float|null
     */
    private $pANID;

    /**
     * @var array
     */
    private $purchaseCategoryCode = [];

    /**
     * @var array
     */
    private $purchaseCategoryId = [];

    /**
     * @var array
     */
    private $purchaseCategoryName = [];

    /**
     * @var array
     */
    private $reason = [];

    /**
     * @var array
     */
    private $reissueSetting = [];

    /**
     * @var array
     */
    private $statusDescription = [];

    /**
     * @var array
     */
    private $statusId = [];

    /**
     * @var array
     */
    private $tokenTypeID = [];

    /**
     * @var string|null
     */
    private $tokenTypeName;

    /**
     * @var array
     */
    private $vRN = [];

    /**
     * @var array
     */
    private $clientReferenceId = [];

    /**
     * @var bool|null
     */
    private $isEMVContact;

    /**
     * @var bool|null
     */
    private $isEMVContactless;

    /**
     * @var bool|null
     */
    private $isRFID;

    /**
     * @var array
     */
    private $rFIDUID = [];

    /**
     * @var array
     */
    private $eMAID = [];

    /**
     * @var array
     */
    private $eVPrintedNumber = [];

    /**
     * @var array
     */
    private $cardMediaCode = [];

    /**
     * Returns Account Id.
     * Account ID
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Name.
     * Account Name
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Account Name
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Account Name
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account Short Name
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account Short Name
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account Short Name
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Bundle Id.
     * Bundle Id associated with card in the Gateway.<br />
     *
     * This field will have null value if the card is not associated with any bundle in Gateway or the
     * value of IncludeBundleDetails in request is false.
     */
    public function getBundleId(): ?string
    {
        if (count($this->bundleId) == 0) {
            return null;
        }
        return $this->bundleId['value'];
    }

    /**
     * Sets Bundle Id.
     * Bundle Id associated with card in the Gateway.<br />
     *
     * This field will have null value if the card is not associated with any bundle in Gateway or the
     * value of IncludeBundleDetails in request is false.
     *
     * @maps BundleId
     */
    public function setBundleId(?string $bundleId): void
    {
        $this->bundleId['value'] = $bundleId;
    }

    /**
     * Unsets Bundle Id.
     * Bundle Id associated with card in the Gateway.<br />
     *
     * This field will have null value if the card is not associated with any bundle in Gateway or the
     * value of IncludeBundleDetails in request is false.
     */
    public function unsetBundleId(): void
    {
        $this->bundleId = [];
    }

    /**
     * Returns Card Block Schedules.
     * List of Scheduled Card Blocks details<br />
     * Entity: CardBlockSchedule
     *
     * @return CardBlockSchedule[]|null
     */
    public function getCardBlockSchedules(): ?array
    {
        return $this->cardBlockSchedules;
    }

    /**
     * Sets Card Block Schedules.
     * List of Scheduled Card Blocks details<br />
     * Entity: CardBlockSchedule
     *
     * @maps CardBlockSchedules
     *
     * @param CardBlockSchedule[]|null $cardBlockSchedules
     */
    public function setCardBlockSchedules(?array $cardBlockSchedules): void
    {
        $this->cardBlockSchedules = $cardBlockSchedules;
    }

    /**
     * Returns Card Group Id.
     * Card group ID
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card group ID
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card group ID
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card Id
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card Id
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public function getCardTypeCode(): ?string
    {
        if (count($this->cardTypeCode) == 0) {
            return null;
        }
        return $this->cardTypeCode['value'];
    }

    /**
     * Sets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN
     *
     * @maps CardTypeCode
     */
    public function setCardTypeCode(?string $cardTypeCode): void
    {
        $this->cardTypeCode['value'] = $cardTypeCode;
    }

    /**
     * Unsets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public function unsetCardTypeCode(): void
    {
        $this->cardTypeCode = [];
    }

    /**
     * Returns Card Type Id.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines<br />
     * Fleet 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     */
    public function getCardTypeId(): ?int
    {
        if (count($this->cardTypeId) == 0) {
            return null;
        }
        return $this->cardTypeId['value'];
    }

    /**
     * Sets Card Type Id.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines<br />
     * Fleet 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     *
     * @maps CardTypeId
     */
    public function setCardTypeId(?int $cardTypeId): void
    {
        $this->cardTypeId['value'] = $cardTypeId;
    }

    /**
     * Unsets Card Type Id.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines<br />
     * Fleet 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     */
    public function unsetCardTypeId(): void
    {
        $this->cardTypeId = [];
    }

    /**
     * Returns Card Type Name.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines <br />
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL  CRT- HONG
     * KONG 7077821
     */
    public function getCardTypeName(): ?string
    {
        if (count($this->cardTypeName) == 0) {
            return null;
        }
        return $this->cardTypeName['value'];
    }

    /**
     * Sets Card Type Name.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines <br />
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL  CRT- HONG
     * KONG 7077821
     *
     * @maps CardTypeName
     */
    public function setCardTypeName(?string $cardTypeName): void
    {
        $this->cardTypeName['value'] = $cardTypeName;
    }

    /**
     * Unsets Card Type Name.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines <br />
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL  CRT- HONG
     * KONG 7077821
     */
    public function unsetCardTypeName(): void
    {
        $this->cardTypeName = [];
    }

    /**
     * Returns Col Co Country Code.
     * The 2 character ISO Code for the customer and card owning country. <br />
     * If default card type is not set then the first two alphabets of the account ID is returned.
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * The 2 character ISO Code for the customer and card owning country. <br />
     * If default card type is not set then the first two alphabets of the account ID is returned.
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * The 2 character ISO Code for the customer and card owning country. <br />
     * If default card type is not set then the first two alphabets of the account ID is returned.
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Creation Date.
     * Card Creation datetime.<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getCreationDate(): ?string
    {
        if (count($this->creationDate) == 0) {
            return null;
        }
        return $this->creationDate['value'];
    }

    /**
     * Sets Creation Date.
     * Card Creation datetime.<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps CreationDate
     */
    public function setCreationDate(?string $creationDate): void
    {
        $this->creationDate['value'] = $creationDate;
    }

    /**
     * Unsets Creation Date.
     * Card Creation datetime.<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetCreationDate(): void
    {
        $this->creationDate = [];
    }

    /**
     * Returns Driver Name.
     * Driver name
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver name
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver name
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Effective Date.
     * Effective date for the Card<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getEffectiveDate(): ?string
    {
        if (count($this->effectiveDate) == 0) {
            return null;
        }
        return $this->effectiveDate['value'];
    }

    /**
     * Sets Effective Date.
     * Effective date for the Card<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps EffectiveDate
     */
    public function setEffectiveDate(?string $effectiveDate): void
    {
        $this->effectiveDate['value'] = $effectiveDate;
    }

    /**
     * Unsets Effective Date.
     * Effective date for the Card<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetEffectiveDate(): void
    {
        $this->effectiveDate = [];
    }

    /**
     * Returns Expiry Date.
     * Expiry date of the card.<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getExpiryDate(): ?string
    {
        if (count($this->expiryDate) == 0) {
            return null;
        }
        return $this->expiryDate['value'];
    }

    /**
     * Sets Expiry Date.
     * Expiry date of the card.<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate['value'] = $expiryDate;
    }

    /**
     * Unsets Expiry Date.
     * Expiry date of the card.<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetExpiryDate(): void
    {
        $this->expiryDate = [];
    }

    /**
     * Returns Fleet Id Input.
     * True/False True if fleet id input is enabled, else false
     */
    public function getFleetIdInput(): ?bool
    {
        return $this->fleetIdInput;
    }

    /**
     * Sets Fleet Id Input.
     * True/False True if fleet id input is enabled, else false
     *
     * @maps FleetIdInput
     */
    public function setFleetIdInput(?bool $fleetIdInput): void
    {
        $this->fleetIdInput = $fleetIdInput;
    }

    /**
     * Returns Is CRT.
     * True/False True if it is a CRT type card, else false
     */
    public function getIsCRT(): ?bool
    {
        return $this->isCRT;
    }

    /**
     * Sets Is CRT.
     * True/False True if it is a CRT type card, else false
     *
     * @maps IsCRT
     */
    public function setIsCRT(?bool $isCRT): void
    {
        $this->isCRT = $isCRT;
    }

    /**
     * Returns Is Fleet.
     * True/False True if it is a Fleet type card, else false
     */
    public function getIsFleet(): ?bool
    {
        return $this->isFleet;
    }

    /**
     * Sets Is Fleet.
     * True/False True if it is a Fleet type card, else false
     *
     * @maps IsFleet
     */
    public function setIsFleet(?bool $isFleet): void
    {
        $this->isFleet = $isFleet;
    }

    /**
     * Returns Is International.
     * True/False True if it is an international card, else false
     */
    public function getIsInternational(): ?bool
    {
        return $this->isInternational;
    }

    /**
     * Sets Is International.
     * True/False True if it is an international card, else false
     *
     * @maps IsInternational
     */
    public function setIsInternational(?bool $isInternational): void
    {
        $this->isInternational = $isInternational;
    }

    /**
     * Returns Is National.
     * True/False True if it is a national card, else false
     */
    public function getIsNational(): ?bool
    {
        return $this->isNational;
    }

    /**
     * Sets Is National.
     * True/False True if it is a national card, else false
     *
     * @maps IsNational
     */
    public function setIsNational(?bool $isNational): void
    {
        $this->isNational = $isNational;
    }

    /**
     * Returns Is Partner Sites Included.
     * True/False True if it is allowed at all partner sites, else false
     */
    public function getIsPartnerSitesIncluded(): ?bool
    {
        return $this->isPartnerSitesIncluded;
    }

    /**
     * Sets Is Partner Sites Included.
     * True/False True if it is allowed at all partner sites, else false
     *
     * @maps IsPartnerSitesIncluded
     */
    public function setIsPartnerSitesIncluded(?bool $isPartnerSitesIncluded): void
    {
        $this->isPartnerSitesIncluded = $isPartnerSitesIncluded;
    }

    /**
     * Returns Is Shell Sites Only.
     * True/False True if it is only allowed at Shell sites, else false
     */
    public function getIsShellSitesOnly(): ?bool
    {
        return $this->isShellSitesOnly;
    }

    /**
     * Sets Is Shell Sites Only.
     * True/False True if it is only allowed at Shell sites, else false
     *
     * @maps IsShellSitesOnly
     */
    public function setIsShellSitesOnly(?bool $isShellSitesOnly): void
    {
        $this->isShellSitesOnly = $isShellSitesOnly;
    }

    /**
     * Returns Issue Date.
     * Issue date<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getIssueDate(): ?string
    {
        if (count($this->issueDate) == 0) {
            return null;
        }
        return $this->issueDate['value'];
    }

    /**
     * Sets Issue Date.
     * Issue date<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps IssueDate
     */
    public function setIssueDate(?string $issueDate): void
    {
        $this->issueDate['value'] = $issueDate;
    }

    /**
     * Unsets Issue Date.
     * Issue date<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetIssueDate(): void
    {
        $this->issueDate = [];
    }

    /**
     * Returns Is Superseded.
     * True/False True if a new card is issued with the same PAN, else false.
     */
    public function getIsSuperseded(): ?bool
    {
        return $this->isSuperseded;
    }

    /**
     * Sets Is Superseded.
     * True/False True if a new card is issued with the same PAN, else false.
     *
     * @maps IsSuperseded
     */
    public function setIsSuperseded(?bool $isSuperseded): void
    {
        $this->isSuperseded = $isSuperseded;
    }

    /**
     * Returns Is Virtual Card.
     * True/False True if it is a virtual card, else false
     */
    public function getIsVirtualCard(): ?bool
    {
        return $this->isVirtualCard;
    }

    /**
     * Sets Is Virtual Card.
     * True/False True if it is a virtual card, else false
     *
     * @maps IsVirtualCard
     */
    public function setIsVirtualCard(?bool $isVirtualCard): void
    {
        $this->isVirtualCard = $isVirtualCard;
    }

    /**
     * Returns Last Modified Date.
     * Card last modified date and time<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getLastModifiedDate(): ?string
    {
        if (count($this->lastModifiedDate) == 0) {
            return null;
        }
        return $this->lastModifiedDate['value'];
    }

    /**
     * Sets Last Modified Date.
     * Card last modified date and time<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps LastModifiedDate
     */
    public function setLastModifiedDate(?string $lastModifiedDate): void
    {
        $this->lastModifiedDate['value'] = $lastModifiedDate;
    }

    /**
     * Unsets Last Modified Date.
     * Card last modified date and time<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetLastModifiedDate(): void
    {
        $this->lastModifiedDate = [];
    }

    /**
     * Returns Last Used Date.
     * Card last used date .<br />
     * Note: last used date of a card will be calculated based on billed/unbilled sales items
     *
     * of a given card.The query that extracts the last used dates will be applied on the
     *
     * subset of the cards being returned to the client.Unbilled sales items is checked
     *
     * first and for those not found in the unbilled table, sales items will be checked
     *
     * (only when the last used date is not found in unbilled table for at least a single
     *
     * card from the result). The transactions in last 48 hours are not expected to be
     *
     * Therefore this field gives the correct information up to 48 hours early.<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type
     */
    public function getLastUsedDate(): ?string
    {
        if (count($this->lastUsedDate) == 0) {
            return null;
        }
        return $this->lastUsedDate['value'];
    }

    /**
     * Sets Last Used Date.
     * Card last used date .<br />
     * Note: last used date of a card will be calculated based on billed/unbilled sales items
     *
     * of a given card.The query that extracts the last used dates will be applied on the
     *
     * subset of the cards being returned to the client.Unbilled sales items is checked
     *
     * first and for those not found in the unbilled table, sales items will be checked
     *
     * (only when the last used date is not found in unbilled table for at least a single
     *
     * card from the result). The transactions in last 48 hours are not expected to be
     *
     * Therefore this field gives the correct information up to 48 hours early.<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type
     *
     * @maps LastUsedDate
     */
    public function setLastUsedDate(?string $lastUsedDate): void
    {
        $this->lastUsedDate['value'] = $lastUsedDate;
    }

    /**
     * Unsets Last Used Date.
     * Card last used date .<br />
     * Note: last used date of a card will be calculated based on billed/unbilled sales items
     *
     * of a given card.The query that extracts the last used dates will be applied on the
     *
     * subset of the cards being returned to the client.Unbilled sales items is checked
     *
     * first and for those not found in the unbilled table, sales items will be checked
     *
     * (only when the last used date is not found in unbilled table for at least a single
     *
     * card from the result). The transactions in last 48 hours are not expected to be
     *
     * Therefore this field gives the correct information up to 48 hours early.<br />
     * Format: yyyyMMdd HH:mm:ss<br />
     * Note: Clients to convert this to appropriate DateTime type
     */
    public function unsetLastUsedDate(): void
    {
        $this->lastUsedDate = [];
    }

    /**
     * Returns Local Currency Code.
     * ISO code of the local currency. <br />
     */
    public function getLocalCurrencyCode(): ?string
    {
        if (count($this->localCurrencyCode) == 0) {
            return null;
        }
        return $this->localCurrencyCode['value'];
    }

    /**
     * Sets Local Currency Code.
     * ISO code of the local currency. <br />
     *
     * @maps LocalCurrencyCode
     */
    public function setLocalCurrencyCode(?string $localCurrencyCode): void
    {
        $this->localCurrencyCode['value'] = $localCurrencyCode;
    }

    /**
     * Unsets Local Currency Code.
     * ISO code of the local currency. <br />
     */
    public function unsetLocalCurrencyCode(): void
    {
        $this->localCurrencyCode = [];
    }

    /**
     * Returns Local Currency Symbol.
     * Local currency symbol. <br />
     */
    public function getLocalCurrencySymbol(): ?string
    {
        if (count($this->localCurrencySymbol) == 0) {
            return null;
        }
        return $this->localCurrencySymbol['value'];
    }

    /**
     * Sets Local Currency Symbol.
     * Local currency symbol. <br />
     *
     * @maps LocalCurrencySymbol
     */
    public function setLocalCurrencySymbol(?string $localCurrencySymbol): void
    {
        $this->localCurrencySymbol['value'] = $localCurrencySymbol;
    }

    /**
     * Unsets Local Currency Symbol.
     * Local currency symbol. <br />
     */
    public function unsetLocalCurrencySymbol(): void
    {
        $this->localCurrencySymbol = [];
    }

    /**
     * Returns Odometer Input.
     * True/False True if odometer input is enabled on the card, else false
     */
    public function getOdometerInput(): ?bool
    {
        return $this->odometerInput;
    }

    /**
     * Sets Odometer Input.
     * True/False True if odometer input is enabled on the card, else false
     *
     * @maps OdometerInput
     */
    public function setOdometerInput(?bool $odometerInput): void
    {
        $this->odometerInput = $odometerInput;
    }

    /**
     * Returns P AN.
     * Card PAN
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * Card PAN
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * Card PAN
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Masked PAN.
     * Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
     */
    public function getMaskedPAN(): ?string
    {
        return $this->maskedPAN;
    }

    /**
     * Sets Masked PAN.
     * Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
     *
     * @maps MaskedPAN
     */
    public function setMaskedPAN(?string $maskedPAN): void
    {
        $this->maskedPAN = $maskedPAN;
    }

    /**
     * Returns P ANID.
     * Card PAN ID.
     */
    public function getPANID(): ?float
    {
        return $this->pANID;
    }

    /**
     * Sets P ANID.
     * Card PAN ID.
     *
     * @maps PANID
     */
    public function setPANID(?float $pANID): void
    {
        $this->pANID = $pANID;
    }

    /**
     * Returns Purchase Category Code.
     * Purchase category code
     */
    public function getPurchaseCategoryCode(): ?string
    {
        if (count($this->purchaseCategoryCode) == 0) {
            return null;
        }
        return $this->purchaseCategoryCode['value'];
    }

    /**
     * Sets Purchase Category Code.
     * Purchase category code
     *
     * @maps PurchaseCategoryCode
     */
    public function setPurchaseCategoryCode(?string $purchaseCategoryCode): void
    {
        $this->purchaseCategoryCode['value'] = $purchaseCategoryCode;
    }

    /**
     * Unsets Purchase Category Code.
     * Purchase category code
     */
    public function unsetPurchaseCategoryCode(): void
    {
        $this->purchaseCategoryCode = [];
    }

    /**
     * Returns Purchase Category Id.
     * Purchase category Id <br />
     * Note: Not Purchase code.
     */
    public function getPurchaseCategoryId(): ?int
    {
        if (count($this->purchaseCategoryId) == 0) {
            return null;
        }
        return $this->purchaseCategoryId['value'];
    }

    /**
     * Sets Purchase Category Id.
     * Purchase category Id <br />
     * Note: Not Purchase code.
     *
     * @maps PurchaseCategoryId
     */
    public function setPurchaseCategoryId(?int $purchaseCategoryId): void
    {
        $this->purchaseCategoryId['value'] = $purchaseCategoryId;
    }

    /**
     * Unsets Purchase Category Id.
     * Purchase category Id <br />
     * Note: Not Purchase code.
     */
    public function unsetPurchaseCategoryId(): void
    {
        $this->purchaseCategoryId = [];
    }

    /**
     * Returns Purchase Category Name.
     * Purchase category name
     */
    public function getPurchaseCategoryName(): ?string
    {
        if (count($this->purchaseCategoryName) == 0) {
            return null;
        }
        return $this->purchaseCategoryName['value'];
    }

    /**
     * Sets Purchase Category Name.
     * Purchase category name
     *
     * @maps PurchaseCategoryName
     */
    public function setPurchaseCategoryName(?string $purchaseCategoryName): void
    {
        $this->purchaseCategoryName['value'] = $purchaseCategoryName;
    }

    /**
     * Unsets Purchase Category Name.
     * Purchase category name
     */
    public function unsetPurchaseCategoryName(): void
    {
        $this->purchaseCategoryName = [];
    }

    /**
     * Returns Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     */
    public function getReason(): ?string
    {
        if (count($this->reason) == 0) {
            return null;
        }
        return $this->reason['value'];
    }

    /**
     * Sets Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     *
     * @maps Reason
     */
    public function setReason(?string $reason): void
    {
        $this->reason['value'] = $reason;
    }

    /**
     * Unsets Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     */
    public function unsetReason(): void
    {
        $this->reason = [];
    }

    /**
     * Returns Reissue Setting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is issued) then
     * reissue setting of the latest card issued. <br />
     * Values<br />
     * •True –Card will be Reissued when nearing its expiry date <br />
     * •False –Card will not be Reissued
     */
    public function getReissueSetting(): ?string
    {
        if (count($this->reissueSetting) == 0) {
            return null;
        }
        return $this->reissueSetting['value'];
    }

    /**
     * Sets Reissue Setting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is issued) then
     * reissue setting of the latest card issued. <br />
     * Values<br />
     * •True –Card will be Reissued when nearing its expiry date <br />
     * •False –Card will not be Reissued
     *
     * @maps ReissueSetting
     */
    public function setReissueSetting(?string $reissueSetting): void
    {
        $this->reissueSetting['value'] = $reissueSetting;
    }

    /**
     * Unsets Reissue Setting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is issued) then
     * reissue setting of the latest card issued. <br />
     * Values<br />
     * •True –Card will be Reissued when nearing its expiry date <br />
     * •False –Card will not be Reissued
     */
    public function unsetReissueSetting(): void
    {
        $this->reissueSetting = [];
    }

    /**
     * Returns Status Description.
     * Status Description (Active, Temporarily Blocked, etc.,)<br />
     * Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending
     * Renewal 31 Replaced 41<br />
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)<br />
     * * 102 Blocked Card(Unblock in progress) <br />
     * * 103 Active(Cancel in progress) <br />
     * * 104 Active(Marked as damaged)<br />
     * * 105 New(Cancel in progress) <br />
     * * 106 { Status}(Scheduled for block)<br />
     * * 107 { Status}(Scheduled for unblock) <br />
     * *# Note: Items marked with* are intermediate statuses  to indicate that there are pending requests
     * in progress.<br />
     * The response can contain these intermediate statuses only if the<br />
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items<br />
     * marked with # will be replaced with the  status description. E.g., Active (Scheduled for block)
     */
    public function getStatusDescription(): ?string
    {
        if (count($this->statusDescription) == 0) {
            return null;
        }
        return $this->statusDescription['value'];
    }

    /**
     * Sets Status Description.
     * Status Description (Active, Temporarily Blocked, etc.,)<br />
     * Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending
     * Renewal 31 Replaced 41<br />
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)<br />
     * * 102 Blocked Card(Unblock in progress) <br />
     * * 103 Active(Cancel in progress) <br />
     * * 104 Active(Marked as damaged)<br />
     * * 105 New(Cancel in progress) <br />
     * * 106 { Status}(Scheduled for block)<br />
     * * 107 { Status}(Scheduled for unblock) <br />
     * *# Note: Items marked with* are intermediate statuses  to indicate that there are pending requests
     * in progress.<br />
     * The response can contain these intermediate statuses only if the<br />
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items<br />
     * marked with # will be replaced with the  status description. E.g., Active (Scheduled for block)
     *
     * @maps StatusDescription
     */
    public function setStatusDescription(?string $statusDescription): void
    {
        $this->statusDescription['value'] = $statusDescription;
    }

    /**
     * Unsets Status Description.
     * Status Description (Active, Temporarily Blocked, etc.,)<br />
     * Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending
     * Renewal 31 Replaced 41<br />
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)<br />
     * * 102 Blocked Card(Unblock in progress) <br />
     * * 103 Active(Cancel in progress) <br />
     * * 104 Active(Marked as damaged)<br />
     * * 105 New(Cancel in progress) <br />
     * * 106 { Status}(Scheduled for block)<br />
     * * 107 { Status}(Scheduled for unblock) <br />
     * *# Note: Items marked with* are intermediate statuses  to indicate that there are pending requests
     * in progress.<br />
     * The response can contain these intermediate statuses only if the<br />
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items<br />
     * marked with # will be replaced with the  status description. E.g., Active (Scheduled for block)
     */
    public function unsetStatusDescription(): void
    {
        $this->statusDescription = [];
    }

    /**
     * Returns Status Id.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23
     * Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 <br />
     * Temporary Block(Shell) 43 Fraud 101 Active(Block in progress) <br />
     * * 102 Blocked Card(Unblock in progress)<br />
     * * 103 Active(Cancel in progress) <br />
     * * 104 Active(Marked as damaged) <br />
     * * 105 New(Cancel in progress)<br />
     * * 106 { Status}(Scheduled for block) <br />
     * # 107 {Status}(Scheduled for unblock)<br />
     * *# Note: Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.<br />
     * The response can contain these intermediate statuses only if the IncludeIntermediateStatus flag is
     * true.<br />
     * The placeholder { Status} in the items marked with # will be replaced with<br />
     * the status description. E.g., Active (Scheduled for block)
     */
    public function getStatusId(): ?int
    {
        if (count($this->statusId) == 0) {
            return null;
        }
        return $this->statusId['value'];
    }

    /**
     * Sets Status Id.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23
     * Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 <br />
     * Temporary Block(Shell) 43 Fraud 101 Active(Block in progress) <br />
     * * 102 Blocked Card(Unblock in progress)<br />
     * * 103 Active(Cancel in progress) <br />
     * * 104 Active(Marked as damaged) <br />
     * * 105 New(Cancel in progress)<br />
     * * 106 { Status}(Scheduled for block) <br />
     * # 107 {Status}(Scheduled for unblock)<br />
     * *# Note: Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.<br />
     * The response can contain these intermediate statuses only if the IncludeIntermediateStatus flag is
     * true.<br />
     * The placeholder { Status} in the items marked with # will be replaced with<br />
     * the status description. E.g., Active (Scheduled for block)
     *
     * @maps StatusId
     */
    public function setStatusId(?int $statusId): void
    {
        $this->statusId['value'] = $statusId;
    }

    /**
     * Unsets Status Id.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23
     * Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 <br />
     * Temporary Block(Shell) 43 Fraud 101 Active(Block in progress) <br />
     * * 102 Blocked Card(Unblock in progress)<br />
     * * 103 Active(Cancel in progress) <br />
     * * 104 Active(Marked as damaged) <br />
     * * 105 New(Cancel in progress)<br />
     * * 106 { Status}(Scheduled for block) <br />
     * # 107 {Status}(Scheduled for unblock)<br />
     * *# Note: Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.<br />
     * The response can contain these intermediate statuses only if the IncludeIntermediateStatus flag is
     * true.<br />
     * The placeholder { Status} in the items marked with # will be replaced with<br />
     * the status description. E.g., Active (Scheduled for block)
     */
    public function unsetStatusId(): void
    {
        $this->statusId = [];
    }

    /**
     * Returns Token Type ID.
     * Token Type ID configured for the Card E.g. 107
     */
    public function getTokenTypeID(): ?int
    {
        if (count($this->tokenTypeID) == 0) {
            return null;
        }
        return $this->tokenTypeID['value'];
    }

    /**
     * Sets Token Type ID.
     * Token Type ID configured for the Card E.g. 107
     *
     * @maps TokenTypeID
     */
    public function setTokenTypeID(?int $tokenTypeID): void
    {
        $this->tokenTypeID['value'] = $tokenTypeID;
    }

    /**
     * Unsets Token Type ID.
     * Token Type ID configured for the Card E.g. 107
     */
    public function unsetTokenTypeID(): void
    {
        $this->tokenTypeID = [];
    }

    /**
     * Returns Token Type Name.
     * Token Type Name configured for the Card
     */
    public function getTokenTypeName(): ?string
    {
        return $this->tokenTypeName;
    }

    /**
     * Sets Token Type Name.
     * Token Type Name configured for the Card
     *
     * @maps TokenTypeName
     */
    public function setTokenTypeName(?string $tokenTypeName): void
    {
        $this->tokenTypeName = $tokenTypeName;
    }

    /**
     * Returns V RN.
     * Vehicle registration number
     */
    public function getVRN(): ?string
    {
        if (count($this->vRN) == 0) {
            return null;
        }
        return $this->vRN['value'];
    }

    /**
     * Sets V RN.
     * Vehicle registration number
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN['value'] = $vRN;
    }

    /**
     * Unsets V RN.
     * Vehicle registration number
     */
    public function unsetVRN(): void
    {
        $this->vRN = [];
    }

    /**
     * Returns Client Reference Id.
     * Customer reference number of the card.
     */
    public function getClientReferenceId(): ?string
    {
        if (count($this->clientReferenceId) == 0) {
            return null;
        }
        return $this->clientReferenceId['value'];
    }

    /**
     * Sets Client Reference Id.
     * Customer reference number of the card.
     *
     * @maps ClientReferenceId
     */
    public function setClientReferenceId(?string $clientReferenceId): void
    {
        $this->clientReferenceId['value'] = $clientReferenceId;
    }

    /**
     * Unsets Client Reference Id.
     * Customer reference number of the card.
     */
    public function unsetClientReferenceId(): void
    {
        $this->clientReferenceId = [];
    }

    /**
     * Returns Is EMV Contact.
     * Is Europay, MasterCard, and Visa Contact enabled or not.
     */
    public function getIsEMVContact(): ?bool
    {
        return $this->isEMVContact;
    }

    /**
     * Sets Is EMV Contact.
     * Is Europay, MasterCard, and Visa Contact enabled or not.
     *
     * @maps IsEMVContact
     */
    public function setIsEMVContact(?bool $isEMVContact): void
    {
        $this->isEMVContact = $isEMVContact;
    }

    /**
     * Returns Is EMV Contactless.
     * Is Europay, MasterCard, and Visa Contactless enabled or not.
     */
    public function getIsEMVContactless(): ?bool
    {
        return $this->isEMVContactless;
    }

    /**
     * Sets Is EMV Contactless.
     * Is Europay, MasterCard, and Visa Contactless enabled or not.
     *
     * @maps IsEMVContactless
     */
    public function setIsEMVContactless(?bool $isEMVContactless): void
    {
        $this->isEMVContactless = $isEMVContactless;
    }

    /**
     * Returns Is RFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     */
    public function getIsRFID(): ?bool
    {
        return $this->isRFID;
    }

    /**
     * Sets Is RFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     *
     * @maps IsRFID
     */
    public function setIsRFID(?bool $isRFID): void
    {
        $this->isRFID = $isRFID;
    }

    /**
     * Returns R FIDUID.
     * RFIDUID
     */
    public function getRFIDUID(): ?string
    {
        if (count($this->rFIDUID) == 0) {
            return null;
        }
        return $this->rFIDUID['value'];
    }

    /**
     * Sets R FIDUID.
     * RFIDUID
     *
     * @maps RFIDUID
     */
    public function setRFIDUID(?string $rFIDUID): void
    {
        $this->rFIDUID['value'] = $rFIDUID;
    }

    /**
     * Unsets R FIDUID.
     * RFIDUID
     */
    public function unsetRFIDUID(): void
    {
        $this->rFIDUID = [];
    }

    /**
     * Returns E MAID.
     * EMAID
     */
    public function getEMAID(): ?string
    {
        if (count($this->eMAID) == 0) {
            return null;
        }
        return $this->eMAID['value'];
    }

    /**
     * Sets E MAID.
     * EMAID
     *
     * @maps EMAID
     */
    public function setEMAID(?string $eMAID): void
    {
        $this->eMAID['value'] = $eMAID;
    }

    /**
     * Unsets E MAID.
     * EMAID
     */
    public function unsetEMAID(): void
    {
        $this->eMAID = [];
    }

    /**
     * Returns E V Printed Number.
     * EV Printed Number
     */
    public function getEVPrintedNumber(): ?string
    {
        if (count($this->eVPrintedNumber) == 0) {
            return null;
        }
        return $this->eVPrintedNumber['value'];
    }

    /**
     * Sets E V Printed Number.
     * EV Printed Number
     *
     * @maps EVPrintedNumber
     */
    public function setEVPrintedNumber(?string $eVPrintedNumber): void
    {
        $this->eVPrintedNumber['value'] = $eVPrintedNumber;
    }

    /**
     * Unsets E V Printed Number.
     * EV Printed Number
     */
    public function unsetEVPrintedNumber(): void
    {
        $this->eVPrintedNumber = [];
    }

    /**
     * Returns Card Media Code.
     * Card Media Code.
     */
    public function getCardMediaCode(): ?string
    {
        if (count($this->cardMediaCode) == 0) {
            return null;
        }
        return $this->cardMediaCode['value'];
    }

    /**
     * Sets Card Media Code.
     * Card Media Code.
     *
     * @maps CardMediaCode
     */
    public function setCardMediaCode(?string $cardMediaCode): void
    {
        $this->cardMediaCode['value'] = $cardMediaCode;
    }

    /**
     * Unsets Card Media Code.
     * Card Media Code.
     */
    public function unsetCardMediaCode(): void
    {
        $this->cardMediaCode = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']              = $this->accountId['value'];
        }
        if (!empty($this->accountName)) {
            $json['AccountName']            = $this->accountName['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']          = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']       = $this->accountShortName['value'];
        }
        if (!empty($this->bundleId)) {
            $json['BundleId']               = $this->bundleId['value'];
        }
        if (isset($this->cardBlockSchedules)) {
            $json['CardBlockSchedules']     = $this->cardBlockSchedules;
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']            = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']          = $this->cardGroupName['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                 = $this->cardId['value'];
        }
        if (!empty($this->cardTypeCode)) {
            $json['CardTypeCode']           = $this->cardTypeCode['value'];
        }
        if (!empty($this->cardTypeId)) {
            $json['CardTypeId']             = $this->cardTypeId['value'];
        }
        if (!empty($this->cardTypeName)) {
            $json['CardTypeName']           = $this->cardTypeName['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode']       = $this->colCoCountryCode['value'];
        }
        if (!empty($this->creationDate)) {
            $json['CreationDate']           = $this->creationDate['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']             = $this->driverName['value'];
        }
        if (!empty($this->effectiveDate)) {
            $json['EffectiveDate']          = $this->effectiveDate['value'];
        }
        if (!empty($this->expiryDate)) {
            $json['ExpiryDate']             = $this->expiryDate['value'];
        }
        if (isset($this->fleetIdInput)) {
            $json['FleetIdInput']           = $this->fleetIdInput;
        }
        if (isset($this->isCRT)) {
            $json['IsCRT']                  = $this->isCRT;
        }
        if (isset($this->isFleet)) {
            $json['IsFleet']                = $this->isFleet;
        }
        if (isset($this->isInternational)) {
            $json['IsInternational']        = $this->isInternational;
        }
        if (isset($this->isNational)) {
            $json['IsNational']             = $this->isNational;
        }
        if (isset($this->isPartnerSitesIncluded)) {
            $json['IsPartnerSitesIncluded'] = $this->isPartnerSitesIncluded;
        }
        if (isset($this->isShellSitesOnly)) {
            $json['IsShellSitesOnly']       = $this->isShellSitesOnly;
        }
        if (!empty($this->issueDate)) {
            $json['IssueDate']              = $this->issueDate['value'];
        }
        if (isset($this->isSuperseded)) {
            $json['IsSuperseded']           = $this->isSuperseded;
        }
        if (isset($this->isVirtualCard)) {
            $json['IsVirtualCard']          = $this->isVirtualCard;
        }
        if (!empty($this->lastModifiedDate)) {
            $json['LastModifiedDate']       = $this->lastModifiedDate['value'];
        }
        if (!empty($this->lastUsedDate)) {
            $json['LastUsedDate']           = $this->lastUsedDate['value'];
        }
        if (!empty($this->localCurrencyCode)) {
            $json['LocalCurrencyCode']      = $this->localCurrencyCode['value'];
        }
        if (!empty($this->localCurrencySymbol)) {
            $json['LocalCurrencySymbol']    = $this->localCurrencySymbol['value'];
        }
        if (isset($this->odometerInput)) {
            $json['OdometerInput']          = $this->odometerInput;
        }
        if (!empty($this->pAN)) {
            $json['PAN']                    = $this->pAN['value'];
        }
        if (isset($this->maskedPAN)) {
            $json['MaskedPAN']              = $this->maskedPAN;
        }
        if (isset($this->pANID)) {
            $json['PANID']                  = $this->pANID;
        }
        if (!empty($this->purchaseCategoryCode)) {
            $json['PurchaseCategoryCode']   = $this->purchaseCategoryCode['value'];
        }
        if (!empty($this->purchaseCategoryId)) {
            $json['PurchaseCategoryId']     = $this->purchaseCategoryId['value'];
        }
        if (!empty($this->purchaseCategoryName)) {
            $json['PurchaseCategoryName']   = $this->purchaseCategoryName['value'];
        }
        if (!empty($this->reason)) {
            $json['Reason']                 = $this->reason['value'];
        }
        if (!empty($this->reissueSetting)) {
            $json['ReissueSetting']         = $this->reissueSetting['value'];
        }
        if (!empty($this->statusDescription)) {
            $json['StatusDescription']      = $this->statusDescription['value'];
        }
        if (!empty($this->statusId)) {
            $json['StatusId']               = $this->statusId['value'];
        }
        if (!empty($this->tokenTypeID)) {
            $json['TokenTypeID']            = $this->tokenTypeID['value'];
        }
        if (isset($this->tokenTypeName)) {
            $json['TokenTypeName']          = $this->tokenTypeName;
        }
        if (!empty($this->vRN)) {
            $json['VRN']                    = $this->vRN['value'];
        }
        if (!empty($this->clientReferenceId)) {
            $json['ClientReferenceId']      = $this->clientReferenceId['value'];
        }
        if (isset($this->isEMVContact)) {
            $json['IsEMVContact']           = $this->isEMVContact;
        }
        if (isset($this->isEMVContactless)) {
            $json['IsEMVContactless']       = $this->isEMVContactless;
        }
        if (isset($this->isRFID)) {
            $json['IsRFID']                 = $this->isRFID;
        }
        if (!empty($this->rFIDUID)) {
            $json['RFIDUID']                = $this->rFIDUID['value'];
        }
        if (!empty($this->eMAID)) {
            $json['EMAID']                  = $this->eMAID['value'];
        }
        if (!empty($this->eVPrintedNumber)) {
            $json['EVPrintedNumber']        = $this->eVPrintedNumber['value'];
        }
        if (!empty($this->cardMediaCode)) {
            $json['CardMediaCode']          = $this->cardMediaCode['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
