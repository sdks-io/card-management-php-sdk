<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

/**
 * UpdateStatus Request
 */
class UpdateCardStatusRequest implements \JsonSerializable
{
    /**
     * @var UpdateCard[]
     */
    private $cards;

    /**
     * @var array
     */
    private $reasonId = [];

    /**
     * @var array
     */
    private $reasonText = [];

    /**
     * @var string
     */
    private $targetStatus;

    /**
     * @param UpdateCard[] $cards
     * @param string $targetStatus
     */
    public function __construct(array $cards, string $targetStatus)
    {
        $this->cards = $cards;
        $this->targetStatus = $targetStatus;
    }

    /**
     * Returns Cards.
     * List of UpdateCardRequest entity. Each card in the list will be updated to the given target status.
     * The details of the entity are given below.
     *
     * @return UpdateCard[]
     */
    public function getCards(): array
    {
        return $this->cards;
    }

    /**
     * Sets Cards.
     * List of UpdateCardRequest entity. Each card in the list will be updated to the given target status.
     * The details of the entity are given below.
     *
     * @required
     * @maps Cards
     *
     * @param UpdateCard[] $cards
     */
    public function setCards(array $cards): void
    {
        $this->cards = $cards;
    }

    /**
     * Returns Reason Id.
     * Reason id for updating the card status.<br />
     *
     * Optional<br />
     *
     * Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else ignored.<br />
     *
     * Possible values:<br />
     *
     * -Lost <br />
     *
     * -Stolen <br />
     *
     * -Card no longer required<br />
     *
     * When passed, the reason Id will be validated with the allowed reason ids configured for the card
     * type of the card.<br />
     *
     * . If the given reason Id is not allowed for certain card types, then the request will be rejected as
     * invalid ResonId.
     */
    public function getReasonId(): ?int
    {
        if (count($this->reasonId) == 0) {
            return null;
        }
        return $this->reasonId['value'];
    }

    /**
     * Sets Reason Id.
     * Reason id for updating the card status.<br />
     *
     * Optional<br />
     *
     * Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else ignored.<br />
     *
     * Possible values:<br />
     *
     * -Lost <br />
     *
     * -Stolen <br />
     *
     * -Card no longer required<br />
     *
     * When passed, the reason Id will be validated with the allowed reason ids configured for the card
     * type of the card.<br />
     *
     * . If the given reason Id is not allowed for certain card types, then the request will be rejected as
     * invalid ResonId.
     *
     * @maps ReasonId
     */
    public function setReasonId(?int $reasonId): void
    {
        $this->reasonId['value'] = $reasonId;
    }

    /**
     * Unsets Reason Id.
     * Reason id for updating the card status.<br />
     *
     * Optional<br />
     *
     * Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else ignored.<br />
     *
     * Possible values:<br />
     *
     * -Lost <br />
     *
     * -Stolen <br />
     *
     * -Card no longer required<br />
     *
     * When passed, the reason Id will be validated with the allowed reason ids configured for the card
     * type of the card.<br />
     *
     * . If the given reason Id is not allowed for certain card types, then the request will be rejected as
     * invalid ResonId.
     */
    public function unsetReasonId(): void
    {
        $this->reasonId = [];
    }

    /**
     * Returns Reason Text.
     * Reason text for updating the card status.<br />
     *
     * Optional Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else
     * ignored.<br />
     *
     * Possible values:<br />
     *
     * -Lost <br />
     *
     * -Stolen <br />
     *
     * -Card no longer required <br />
     *
     * Optional – However, either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
     * <br />
     *
     * When Reason Text is passed and the Target Status is either Block or Damaged, the text will be
     * validated with the allowed list of values configured for the card type of the card.<br />
     *
     * If the text is not allowed, request will be rejected as invaid ResonText.<br />
     *
     * Note:<br />
     *
     * Customer blocked’ will be used as the reason for ‘Temporary Block’.
     */
    public function getReasonText(): ?string
    {
        if (count($this->reasonText) == 0) {
            return null;
        }
        return $this->reasonText['value'];
    }

    /**
     * Sets Reason Text.
     * Reason text for updating the card status.<br />
     *
     * Optional Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else
     * ignored.<br />
     *
     * Possible values:<br />
     *
     * -Lost <br />
     *
     * -Stolen <br />
     *
     * -Card no longer required <br />
     *
     * Optional – However, either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
     * <br />
     *
     * When Reason Text is passed and the Target Status is either Block or Damaged, the text will be
     * validated with the allowed list of values configured for the card type of the card.<br />
     *
     * If the text is not allowed, request will be rejected as invaid ResonText.<br />
     *
     * Note:<br />
     *
     * Customer blocked’ will be used as the reason for ‘Temporary Block’.
     *
     * @maps ReasonText
     */
    public function setReasonText(?string $reasonText): void
    {
        $this->reasonText['value'] = $reasonText;
    }

    /**
     * Unsets Reason Text.
     * Reason text for updating the card status.<br />
     *
     * Optional Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else
     * ignored.<br />
     *
     * Possible values:<br />
     *
     * -Lost <br />
     *
     * -Stolen <br />
     *
     * -Card no longer required <br />
     *
     * Optional – However, either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
     * <br />
     *
     * When Reason Text is passed and the Target Status is either Block or Damaged, the text will be
     * validated with the allowed list of values configured for the card type of the card.<br />
     *
     * If the text is not allowed, request will be rejected as invaid ResonText.<br />
     *
     * Note:<br />
     *
     * Customer blocked’ will be used as the reason for ‘Temporary Block’.
     */
    public function unsetReasonText(): void
    {
        $this->reasonText = [];
    }

    /**
     * Returns Target Status.
     * The list of cards passed in Cards parameter will be updated to this status.<br />
     *
     * Mandatory<br />
     *
     * Allowed values:<br />
     *
     * -TemporaryBlock<br />
     *
     * -Unblock<br />
     *
     * -Block<br />
     *
     * -Damaged<br />
     */
    public function getTargetStatus(): string
    {
        return $this->targetStatus;
    }

    /**
     * Sets Target Status.
     * The list of cards passed in Cards parameter will be updated to this status.<br />
     *
     * Mandatory<br />
     *
     * Allowed values:<br />
     *
     * -TemporaryBlock<br />
     *
     * -Unblock<br />
     *
     * -Block<br />
     *
     * -Damaged<br />
     *
     * @required
     * @maps TargetStatus
     */
    public function setTargetStatus(string $targetStatus): void
    {
        $this->targetStatus = $targetStatus;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['Cards']          = $this->cards;
        if (!empty($this->reasonId)) {
            $json['ReasonId']   = $this->reasonId['value'];
        }
        if (!empty($this->reasonText)) {
            $json['ReasonText'] = $this->reasonText['value'];
        }
        $json['TargetStatus']   = $this->targetStatus;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
