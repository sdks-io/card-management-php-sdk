<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class ProductRestrictionCard implements \JsonSerializable
{
    /**
     * @var string[]|null
     */
    private $products;

    /**
     * @var string[]|null
     */
    private $productGroups;

    /**
     * Returns Products.
     * An array of 3-digit global product codes.
     * Optional.
     * Example: [ "033", "021", "023”]
     *
     * @return string[]|null
     */
    public function getProducts(): ?array
    {
        return $this->products;
    }

    /**
     * Sets Products.
     * An array of 3-digit global product codes.
     * Optional.
     * Example: [ "033", "021", "023”]
     *
     * @maps Products
     *
     * @param string[]|null $products
     */
    public function setProducts(?array $products): void
    {
        $this->products = $products;
    }

    /**
     * Returns Product Groups.
     * An array of product group IDs.
     * Optional.
     * Example: [ "670246404", "40557126" ]
     *
     * @return string[]|null
     */
    public function getProductGroups(): ?array
    {
        return $this->productGroups;
    }

    /**
     * Sets Product Groups.
     * An array of product group IDs.
     * Optional.
     * Example: [ "670246404", "40557126" ]
     *
     * @maps ProductGroups
     *
     * @param string[]|null $productGroups
     */
    public function setProductGroups(?array $productGroups): void
    {
        $this->productGroups = $productGroups;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->products)) {
            $json['Products']      = $this->products;
        }
        if (isset($this->productGroups)) {
            $json['ProductGroups'] = $this->productGroups;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
