<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class CardDetailsRequest implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $clientReferenceId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $tokenTypeID = [];

    /**
     * @var array
     */
    private $tokenTypeName = [];

    /**
     * @var array
     */
    private $creationDate = [];

    /**
     * @var array
     */
    private $effectiveDate = [];

    /**
     * @var bool|null
     */
    private $includeBundleDetails;

    /**
     * @var bool|null
     */
    private $includeIntermediateStatus;

    /**
     * @var bool|null
     */
    private $includeScheduledCardBlocks;

    /**
     * Returns Col Co Code.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Country Code.
     * ISO Country code of collecting company
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * ISO Country code of collecting company
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * ISO Country code of collecting company
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Client Reference Id.
     * Customer reference number of the card.
     * Optional
     */
    public function getClientReferenceId(): ?string
    {
        if (count($this->clientReferenceId) == 0) {
            return null;
        }
        return $this->clientReferenceId['value'];
    }

    /**
     * Sets Client Reference Id.
     * Customer reference number of the card.
     * Optional
     *
     * @maps ClientReferenceId
     */
    public function setClientReferenceId(?string $clientReferenceId): void
    {
        $this->clientReferenceId['value'] = $clientReferenceId;
    }

    /**
     * Unsets Client Reference Id.
     * Customer reference number of the card.
     * Optional
     */
    public function unsetClientReferenceId(): void
    {
        $this->clientReferenceId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id (i.e. Customer Id of the Payment of the selected payer.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment of the selected payer.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment of the selected payer.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     * Optional if AccountId is passed, else mandatory.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     * Optional if AccountId is passed, else mandatory.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.
     * Optional if AccountId is passed, else mandatory.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Id.
     * Account ID of the customer.
     * Optional if AccountNumber is passed, else mandatory.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.
     * Optional if AccountNumber is passed, else mandatory.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the customer.
     * Optional if AccountNumber is passed, else mandatory.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns P AN.
     * PAN of the card.
     * Optional if CardId is passed, else Mandatory.
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * PAN of the card.
     * Optional if CardId is passed, else Mandatory.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * PAN of the card.
     * Optional if CardId is passed, else Mandatory.
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Card Id.
     * Card Id of the card.
     * Optional if PAN is passed, else Mandatory.
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card Id of the card.
     * Optional if PAN is passed, else Mandatory.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card Id of the card.
     * Optional if PAN is passed, else Mandatory.
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Token Type ID.
     * Token Type ID for the Card
     * Optional
     */
    public function getTokenTypeID(): ?int
    {
        if (count($this->tokenTypeID) == 0) {
            return null;
        }
        return $this->tokenTypeID['value'];
    }

    /**
     * Sets Token Type ID.
     * Token Type ID for the Card
     * Optional
     *
     * @maps TokenTypeID
     */
    public function setTokenTypeID(?int $tokenTypeID): void
    {
        $this->tokenTypeID['value'] = $tokenTypeID;
    }

    /**
     * Unsets Token Type ID.
     * Token Type ID for the Card
     * Optional
     */
    public function unsetTokenTypeID(): void
    {
        $this->tokenTypeID = [];
    }

    /**
     * Returns Token Type Name.
     * Token Type name for the Card
     * Optional
     */
    public function getTokenTypeName(): ?string
    {
        if (count($this->tokenTypeName) == 0) {
            return null;
        }
        return $this->tokenTypeName['value'];
    }

    /**
     * Sets Token Type Name.
     * Token Type name for the Card
     * Optional
     *
     * @maps TokenTypeName
     */
    public function setTokenTypeName(?string $tokenTypeName): void
    {
        $this->tokenTypeName['value'] = $tokenTypeName;
    }

    /**
     * Unsets Token Type Name.
     * Token Type name for the Card
     * Optional
     */
    public function unsetTokenTypeName(): void
    {
        $this->tokenTypeName = [];
    }

    /**
     * Returns Creation Date.
     * Card Creation Date time
     * Optional
     * Format: yyyyMMdd
     */
    public function getCreationDate(): ?string
    {
        if (count($this->creationDate) == 0) {
            return null;
        }
        return $this->creationDate['value'];
    }

    /**
     * Sets Creation Date.
     * Card Creation Date time
     * Optional
     * Format: yyyyMMdd
     *
     * @maps CreationDate
     */
    public function setCreationDate(?string $creationDate): void
    {
        $this->creationDate['value'] = $creationDate;
    }

    /**
     * Unsets Creation Date.
     * Card Creation Date time
     * Optional
     * Format: yyyyMMdd
     */
    public function unsetCreationDate(): void
    {
        $this->creationDate = [];
    }

    /**
     * Returns Effective Date.
     * Effective date for the Card
     * Optional
     * Format: yyyyMMdd
     */
    public function getEffectiveDate(): ?string
    {
        if (count($this->effectiveDate) == 0) {
            return null;
        }
        return $this->effectiveDate['value'];
    }

    /**
     * Sets Effective Date.
     * Effective date for the Card
     * Optional
     * Format: yyyyMMdd
     *
     * @maps EffectiveDate
     */
    public function setEffectiveDate(?string $effectiveDate): void
    {
        $this->effectiveDate['value'] = $effectiveDate;
    }

    /**
     * Unsets Effective Date.
     * Effective date for the Card
     * Optional
     * Format: yyyyMMdd
     */
    public function unsetEffectiveDate(): void
    {
        $this->effectiveDate = [];
    }

    /**
     * Returns Include Bundle Details.
     * When the value is True, API will return bundle Id associated with card in the response, if available.
     * Note: Use ‘Null’ or ‘False’ for optimum performance. A delay in response is expected when set to
     * ‘True’.
     */
    public function getIncludeBundleDetails(): ?bool
    {
        return $this->includeBundleDetails;
    }

    /**
     * Sets Include Bundle Details.
     * When the value is True, API will return bundle Id associated with card in the response, if available.
     * Note: Use ‘Null’ or ‘False’ for optimum performance. A delay in response is expected when set to
     * ‘True’.
     *
     * @maps IncludeBundleDetails
     */
    public function setIncludeBundleDetails(?bool $includeBundleDetails): void
    {
        $this->includeBundleDetails = $includeBundleDetails;
    }

    /**
     * Returns Include Intermediate Status.
     * A flag which indicates if the response can contain intermediate statuses
     */
    public function getIncludeIntermediateStatus(): ?bool
    {
        return $this->includeIntermediateStatus;
    }

    /**
     * Sets Include Intermediate Status.
     * A flag which indicates if the response can contain intermediate statuses
     *
     * @maps IncludeIntermediateStatus
     */
    public function setIncludeIntermediateStatus(?bool $includeIntermediateStatus): void
    {
        $this->includeIntermediateStatus = $includeIntermediateStatus;
    }

    /**
     * Returns Include Scheduled Card Blocks.
     * A flag which indicates if the response can contain scheduled card blocks details
     */
    public function getIncludeScheduledCardBlocks(): ?bool
    {
        return $this->includeScheduledCardBlocks;
    }

    /**
     * Sets Include Scheduled Card Blocks.
     * A flag which indicates if the response can contain scheduled card blocks details
     *
     * @maps IncludeScheduledCardBlocks
     */
    public function setIncludeScheduledCardBlocks(?bool $includeScheduledCardBlocks): void
    {
        $this->includeScheduledCardBlocks = $includeScheduledCardBlocks;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->colCoCode)) {
            $json['ColCoCode']                  = $this->colCoCode;
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                    = $this->colCoId['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode']           = $this->colCoCountryCode['value'];
        }
        if (!empty($this->clientReferenceId)) {
            $json['ClientReferenceId']          = $this->clientReferenceId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                = $this->payerNumber['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                    = $this->payerId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']              = $this->accountNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                  = $this->accountId['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']                        = $this->pAN['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                     = $this->cardId['value'];
        }
        if (!empty($this->tokenTypeID)) {
            $json['TokenTypeID']                = $this->tokenTypeID['value'];
        }
        if (!empty($this->tokenTypeName)) {
            $json['TokenTypeName']              = $this->tokenTypeName['value'];
        }
        if (!empty($this->creationDate)) {
            $json['CreationDate']               = $this->creationDate['value'];
        }
        if (!empty($this->effectiveDate)) {
            $json['EffectiveDate']              = $this->effectiveDate['value'];
        }
        if (isset($this->includeBundleDetails)) {
            $json['IncludeBundleDetails']       = $this->includeBundleDetails;
        }
        if (isset($this->includeIntermediateStatus)) {
            $json['IncludeIntermediateStatus']  = $this->includeIntermediateStatus;
        }
        if (isset($this->includeScheduledCardBlocks)) {
            $json['IncludeScheduledCardBlocks'] = $this->includeScheduledCardBlocks;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
