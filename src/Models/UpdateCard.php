<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

/**
 * Request entity object for UpdateCardRequest  list
 */
class UpdateCard implements \JsonSerializable
{
    /**
     * @var array
     */
    private $caller = [];

    /**
     * @var bool|null
     */
    private $isReplacementChargeable;

    /**
     * @var bool|null
     */
    private $notifyCaller;

    /**
     * @var bool|null
     */
    private $notifyCallerOnSync;

    /**
     * @var bool|null
     */
    private $orderCardReplacement;

    /**
     * @var CardSettings|null
     */
    private $cardSettings;

    /**
     * @var int|null
     */
    private $reasonId;

    /**
     * @var array
     */
    private $reasonText = [];

    /**
     * @var array
     */
    private $targetStatus = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $cardExpiryDate = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $pANID = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * Returns Caller.
     * The caller to be notified with the status of the update card status request. <br />
     * The caller will also be notified with the status of the replacement card order request, if any.<br
     * />
     * Mandatory, if NotifyCaller is true. <br />
     * Maximum field length: 20<br />
     * Allowed values:<br />
     * - NextGenUI: This value to be used by next gen UI application.<br />
     * - Motix: This value to be used by MOTiX application.<br />
     * - FleetHubUILifeTime: This value to be used by Fleet Hub UI application for life time restriction
     * cards.<br />
     * Note: The values passed in this field are case insensitive.
     */
    public function getCaller(): ?string
    {
        if (count($this->caller) == 0) {
            return null;
        }
        return $this->caller['value'];
    }

    /**
     * Sets Caller.
     * The caller to be notified with the status of the update card status request. <br />
     * The caller will also be notified with the status of the replacement card order request, if any.<br
     * />
     * Mandatory, if NotifyCaller is true. <br />
     * Maximum field length: 20<br />
     * Allowed values:<br />
     * - NextGenUI: This value to be used by next gen UI application.<br />
     * - Motix: This value to be used by MOTiX application.<br />
     * - FleetHubUILifeTime: This value to be used by Fleet Hub UI application for life time restriction
     * cards.<br />
     * Note: The values passed in this field are case insensitive.
     *
     * @maps Caller
     */
    public function setCaller(?string $caller): void
    {
        $this->caller['value'] = $caller;
    }

    /**
     * Unsets Caller.
     * The caller to be notified with the status of the update card status request. <br />
     * The caller will also be notified with the status of the replacement card order request, if any.<br
     * />
     * Mandatory, if NotifyCaller is true. <br />
     * Maximum field length: 20<br />
     * Allowed values:<br />
     * - NextGenUI: This value to be used by next gen UI application.<br />
     * - Motix: This value to be used by MOTiX application.<br />
     * - FleetHubUILifeTime: This value to be used by Fleet Hub UI application for life time restriction
     * cards.<br />
     * Note: The values passed in this field are case insensitive.
     */
    public function unsetCaller(): void
    {
        $this->caller = [];
    }

    /**
     * Returns Is Replacement Chargeable.
     * True/False<br />
     * Optional<br />
     * When not provided will considered as default value as True.<br />
     * If passed True, the replacement card will be chargeable, else replacement card will not be charged.
     */
    public function getIsReplacementChargeable(): ?bool
    {
        return $this->isReplacementChargeable;
    }

    /**
     * Sets Is Replacement Chargeable.
     * True/False<br />
     * Optional<br />
     * When not provided will considered as default value as True.<br />
     * If passed True, the replacement card will be chargeable, else replacement card will not be charged.
     *
     * @maps IsReplacementChargeable
     */
    public function setIsReplacementChargeable(?bool $isReplacementChargeable): void
    {
        $this->isReplacementChargeable = $isReplacementChargeable;
    }

    /**
     * Returns Notify Caller.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failure after the update
     * card status request is processed.
     * Notification API subscription required to use this feature , please refer API documetation for more
     * details
     */
    public function getNotifyCaller(): ?bool
    {
        return $this->notifyCaller;
    }

    /**
     * Sets Notify Caller.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failure after the update
     * card status request is processed.
     * Notification API subscription required to use this feature , please refer API documetation for more
     * details
     *
     * @maps NotifyCaller
     */
    public function setNotifyCaller(?bool $notifyCaller): void
    {
        $this->notifyCaller = $notifyCaller;
    }

    /**
     * Returns Notify Caller on Sync.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failed after the
     * replacement card is synced with Gateway, if a replacement card was requested.
     */
    public function getNotifyCallerOnSync(): ?bool
    {
        return $this->notifyCallerOnSync;
    }

    /**
     * Sets Notify Caller on Sync.
     * True/False.<br />
     * Optional.<br />
     * Default: False<br />
     * If true, the caller would be notified back with the status as success or failed after the
     * replacement card is synced with Gateway, if a replacement card was requested.
     *
     * @maps NotifyCallerOnSync
     */
    public function setNotifyCallerOnSync(?bool $notifyCallerOnSync): void
    {
        $this->notifyCallerOnSync = $notifyCallerOnSync;
    }

    /**
     * Returns Order Card Replacement.
     * True/False.<br />
     * Pass True if a replacement order card request is to be placed, else False.<br />
     * Optional.Default value False.<br />
     * Replacement of a card is only applicable when the target status requested is either permanently
     * Block or Damaged for the existing card.<br />
     * Request for Replacement card will be placed only when the Block card or Block damaged card request
     * is successfully placed.<br />
     * The Replacement card request will be processed only when the permanent Block card request is
     * successfully processed. <br />
     * In case of damaged card request, the replacement card request will be processed immediately.
     */
    public function getOrderCardReplacement(): ?bool
    {
        return $this->orderCardReplacement;
    }

    /**
     * Sets Order Card Replacement.
     * True/False.<br />
     * Pass True if a replacement order card request is to be placed, else False.<br />
     * Optional.Default value False.<br />
     * Replacement of a card is only applicable when the target status requested is either permanently
     * Block or Damaged for the existing card.<br />
     * Request for Replacement card will be placed only when the Block card or Block damaged card request
     * is successfully placed.<br />
     * The Replacement card request will be processed only when the permanent Block card request is
     * successfully processed. <br />
     * In case of damaged card request, the replacement card request will be processed immediately.
     *
     * @maps OrderCardReplacement
     */
    public function setOrderCardReplacement(?bool $orderCardReplacement): void
    {
        $this->orderCardReplacement = $orderCardReplacement;
    }

    /**
     * Returns Card Settings.
     */
    public function getCardSettings(): ?CardSettings
    {
        return $this->cardSettings;
    }

    /**
     * Sets Card Settings.
     *
     * @maps CardSettings
     */
    public function setCardSettings(?CardSettings $cardSettings): void
    {
        $this->cardSettings = $cardSettings;
    }

    /**
     * Returns Reason Id.
     * Reason id for updating the card status.
     * Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else ignored.
     * Possible values:
     * 1 (Lost)
     * 2 (Stolen)
     * 3 (Card no longer required)
     *
     * <br>When passed, the reason Id will be mapped to allowed reason IDs configured for the card type of
     * the card. If the given reason Id is not allowed for certain card types, then the request will be
     * rejected as invalid ResonId
     */
    public function getReasonId(): ?int
    {
        return $this->reasonId;
    }

    /**
     * Sets Reason Id.
     * Reason id for updating the card status.
     * Either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’. Else ignored.
     * Possible values:
     * 1 (Lost)
     * 2 (Stolen)
     * 3 (Card no longer required)
     *
     * <br>When passed, the reason Id will be mapped to allowed reason IDs configured for the card type of
     * the card. If the given reason Id is not allowed for certain card types, then the request will be
     * rejected as invalid ResonId
     *
     * @maps ReasonId
     */
    public function setReasonId(?int $reasonId): void
    {
        $this->reasonId = $reasonId;
    }

    /**
     * Returns Reason Text.
     * Reason text for updating the card status.
     *
     * Possible Values:
     *
     * 1) Lost
     *
     * 2) Stolen
     *
     * 3) Card no longer required
     *
     *
     *
     * Optional – However, either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
     * Else, Ignored.
     *
     * When Reason Text is passed and the Target Status is either Block or Damaged, the text will be
     * validated with the allowed list of values configured for the card type of the card. If the text is
     * not allowed, request will be rejected as invaid ResonText.
     *
     * Note:
     *
     * ‘Customer blocked’ will be used as the reason for ‘Temporary Block’.
     */
    public function getReasonText(): ?string
    {
        if (count($this->reasonText) == 0) {
            return null;
        }
        return $this->reasonText['value'];
    }

    /**
     * Sets Reason Text.
     * Reason text for updating the card status.
     *
     * Possible Values:
     *
     * 1) Lost
     *
     * 2) Stolen
     *
     * 3) Card no longer required
     *
     *
     *
     * Optional – However, either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
     * Else, Ignored.
     *
     * When Reason Text is passed and the Target Status is either Block or Damaged, the text will be
     * validated with the allowed list of values configured for the card type of the card. If the text is
     * not allowed, request will be rejected as invaid ResonText.
     *
     * Note:
     *
     * ‘Customer blocked’ will be used as the reason for ‘Temporary Block’.
     *
     * @maps ReasonText
     */
    public function setReasonText(?string $reasonText): void
    {
        $this->reasonText['value'] = $reasonText;
    }

    /**
     * Unsets Reason Text.
     * Reason text for updating the card status.
     *
     * Possible Values:
     *
     * 1) Lost
     *
     * 2) Stolen
     *
     * 3) Card no longer required
     *
     *
     *
     * Optional – However, either Reason ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
     * Else, Ignored.
     *
     * When Reason Text is passed and the Target Status is either Block or Damaged, the text will be
     * validated with the allowed list of values configured for the card type of the card. If the text is
     * not allowed, request will be rejected as invaid ResonText.
     *
     * Note:
     *
     * ‘Customer blocked’ will be used as the reason for ‘Temporary Block’.
     */
    public function unsetReasonText(): void
    {
        $this->reasonText = [];
    }

    /**
     * Returns Target Status.
     * The list of cards passed in ‘Cards’ parameter will be updated to this status.<br />
     * Mandatory.<br />
     * Allowed values –<br />
     * - TemporaryBlock<br />
     * - Unblock<br />
     * - Block<br />
     * - Damaged<br />
     */
    public function getTargetStatus(): ?int
    {
        if (count($this->targetStatus) == 0) {
            return null;
        }
        return $this->targetStatus['value'];
    }

    /**
     * Sets Target Status.
     * The list of cards passed in ‘Cards’ parameter will be updated to this status.<br />
     * Mandatory.<br />
     * Allowed values –<br />
     * - TemporaryBlock<br />
     * - Unblock<br />
     * - Block<br />
     * - Damaged<br />
     *
     * @maps TargetStatus
     */
    public function setTargetStatus(?int $targetStatus): void
    {
        $this->targetStatus['value'] = $targetStatus;
    }

    /**
     * Unsets Target Status.
     * The list of cards passed in ‘Cards’ parameter will be updated to this status.<br />
     * Mandatory.<br />
     * Allowed values –<br />
     * - TemporaryBlock<br />
     * - Unblock<br />
     * - Block<br />
     * - Damaged<br />
     */
    public function unsetTargetStatus(): void
    {
        $this->targetStatus = [];
    }

    /**
     * Returns Account Id.
     * Account Id of the customer.<br />
     * Optional if AccountNumber is passed, else Mandatory.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id of the customer.<br />
     * Optional if AccountNumber is passed, else Mandatory.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id of the customer.<br />
     * Optional if AccountNumber is passed, else Mandatory.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.<br />
     * Optional if AccountId is passed, else Mandatory.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.<br />
     * Optional if AccountId is passed, else Mandatory.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.<br />
     * Optional if AccountId is passed, else Mandatory.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Card Expiry Date.
     * Expiry date of the card.<br />
     * Mandatory if PAN is passed, else optional.<br />
     * Format: yyyyMMdd
     */
    public function getCardExpiryDate(): ?string
    {
        if (count($this->cardExpiryDate) == 0) {
            return null;
        }
        return $this->cardExpiryDate['value'];
    }

    /**
     * Sets Card Expiry Date.
     * Expiry date of the card.<br />
     * Mandatory if PAN is passed, else optional.<br />
     * Format: yyyyMMdd
     *
     * @maps CardExpiryDate
     */
    public function setCardExpiryDate(?string $cardExpiryDate): void
    {
        $this->cardExpiryDate['value'] = $cardExpiryDate;
    }

    /**
     * Unsets Card Expiry Date.
     * Expiry date of the card.<br />
     * Mandatory if PAN is passed, else optional.<br />
     * Format: yyyyMMdd
     */
    public function unsetCardExpiryDate(): void
    {
        $this->cardExpiryDate = [];
    }

    /**
     * Returns Card Id.
     * Card Id of the card.<br />
     * Optional if PAN is passed, else Mandatory.
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card Id of the card.<br />
     * Optional if PAN is passed, else Mandatory.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card Id of the card.<br />
     * Optional if PAN is passed, else Mandatory.
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting company code of the customer. <br />
     * Optional if ColCoId is passed, else Mandatory.<br />
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting company code of the customer. <br />
     * Optional if ColCoId is passed, else Mandatory.<br />
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting company code of the customer. <br />
     * Optional if ColCoId is passed, else Mandatory.<br />
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting company id of the customer. <br />
     * Optional if ColCoCode is passed, else Mandatory.<br />
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting company id of the customer. <br />
     * Optional if ColCoCode is passed, else Mandatory.<br />
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting company id of the customer. <br />
     * Optional if ColCoCode is passed, else Mandatory.<br />
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns P AN.
     * PAN of the card.<br />
     * Optional if CardId is passed, else Mandatory.<br />
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * PAN of the card.<br />
     * Optional if CardId is passed, else Mandatory.<br />
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * PAN of the card.<br />
     * Optional if CardId is passed, else Mandatory.<br />
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns P ANID.
     * PANID of the card
     */
    public function getPANID(): ?float
    {
        if (count($this->pANID) == 0) {
            return null;
        }
        return $this->pANID['value'];
    }

    /**
     * Sets P ANID.
     * PANID of the card
     *
     * @maps PANID
     */
    public function setPANID(?float $pANID): void
    {
        $this->pANID['value'] = $pANID;
    }

    /**
     * Unsets P ANID.
     * PANID of the card
     */
    public function unsetPANID(): void
    {
        $this->pANID = [];
    }

    /**
     * Returns Payer Id.
     * Payer id of the customer.<br />
     * Optional if PayerNumber is passed, else Mandatory.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer id of the customer.<br />
     * Optional if PayerNumber is passed, else Mandatory.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer id of the customer.<br />
     * Optional if PayerNumber is passed, else Mandatory.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * PayerNumber of the customer.<br />
     * Optional if PayerId is passed, else Mandatory.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * PayerNumber of the customer.<br />
     * Optional if PayerId is passed, else Mandatory.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * PayerNumber of the customer.<br />
     * Optional if PayerId is passed, else Mandatory.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->caller)) {
            $json['Caller']                  = $this->caller['value'];
        }
        if (isset($this->isReplacementChargeable)) {
            $json['IsReplacementChargeable'] = $this->isReplacementChargeable;
        }
        if (isset($this->notifyCaller)) {
            $json['NotifyCaller']            = $this->notifyCaller;
        }
        if (isset($this->notifyCallerOnSync)) {
            $json['NotifyCallerOnSync']      = $this->notifyCallerOnSync;
        }
        if (isset($this->orderCardReplacement)) {
            $json['OrderCardReplacement']    = $this->orderCardReplacement;
        }
        if (isset($this->cardSettings)) {
            $json['CardSettings']            = $this->cardSettings;
        }
        if (isset($this->reasonId)) {
            $json['ReasonId']                = $this->reasonId;
        }
        if (!empty($this->reasonText)) {
            $json['ReasonText']              = $this->reasonText['value'];
        }
        if (!empty($this->targetStatus)) {
            $json['TargetStatus']            = $this->targetStatus['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']               = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']           = $this->accountNumber['value'];
        }
        if (!empty($this->cardExpiryDate)) {
            $json['CardExpiryDate']          = $this->cardExpiryDate['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                  = $this->cardId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']               = $this->colCoCode['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                 = $this->colCoId['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']                     = $this->pAN['value'];
        }
        if (!empty($this->pANID)) {
            $json['PANID']                   = $this->pANID['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                 = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']             = $this->payerNumber['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
