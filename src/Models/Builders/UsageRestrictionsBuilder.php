<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellCardManagementAPIsLib\Models\UsageRestrictions;

/**
 * Builder for model UsageRestrictions
 *
 * @see UsageRestrictions
 */
class UsageRestrictionsBuilder
{
    /**
     * @var UsageRestrictions
     */
    private $instance;

    private function __construct(UsageRestrictions $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new usage restrictions Builder object.
     */
    public static function init(): self
    {
        return new self(new UsageRestrictions());
    }

    /**
     * Sets daily spend field.
     */
    public function dailySpend(?float $value): self
    {
        $this->instance->setDailySpend($value);
        return $this;
    }

    /**
     * Unsets daily spend field.
     */
    public function unsetDailySpend(): self
    {
        $this->instance->unsetDailySpend();
        return $this;
    }

    /**
     * Sets weekly spend field.
     */
    public function weeklySpend(?float $value): self
    {
        $this->instance->setWeeklySpend($value);
        return $this;
    }

    /**
     * Unsets weekly spend field.
     */
    public function unsetWeeklySpend(): self
    {
        $this->instance->unsetWeeklySpend();
        return $this;
    }

    /**
     * Sets monthly spend field.
     */
    public function monthlySpend(?float $value): self
    {
        $this->instance->setMonthlySpend($value);
        return $this;
    }

    /**
     * Unsets monthly spend field.
     */
    public function unsetMonthlySpend(): self
    {
        $this->instance->unsetMonthlySpend();
        return $this;
    }

    /**
     * Sets per transaction spend field.
     */
    public function perTransactionSpend(?float $value): self
    {
        $this->instance->setPerTransactionSpend($value);
        return $this;
    }

    /**
     * Unsets per transaction spend field.
     */
    public function unsetPerTransactionSpend(): self
    {
        $this->instance->unsetPerTransactionSpend();
        return $this;
    }

    /**
     * Sets daily volume field.
     */
    public function dailyVolume(?int $value): self
    {
        $this->instance->setDailyVolume($value);
        return $this;
    }

    /**
     * Unsets daily volume field.
     */
    public function unsetDailyVolume(): self
    {
        $this->instance->unsetDailyVolume();
        return $this;
    }

    /**
     * Sets weekly volume field.
     */
    public function weeklyVolume(?int $value): self
    {
        $this->instance->setWeeklyVolume($value);
        return $this;
    }

    /**
     * Unsets weekly volume field.
     */
    public function unsetWeeklyVolume(): self
    {
        $this->instance->unsetWeeklyVolume();
        return $this;
    }

    /**
     * Sets monthly volume field.
     */
    public function monthlyVolume(?int $value): self
    {
        $this->instance->setMonthlyVolume($value);
        return $this;
    }

    /**
     * Unsets monthly volume field.
     */
    public function unsetMonthlyVolume(): self
    {
        $this->instance->unsetMonthlyVolume();
        return $this;
    }

    /**
     * Sets per transaction volume field.
     */
    public function perTransactionVolume(?int $value): self
    {
        $this->instance->setPerTransactionVolume($value);
        return $this;
    }

    /**
     * Unsets per transaction volume field.
     */
    public function unsetPerTransactionVolume(): self
    {
        $this->instance->unsetPerTransactionVolume();
        return $this;
    }

    /**
     * Sets daily transaction count field.
     */
    public function dailyTransactionCount(?float $value): self
    {
        $this->instance->setDailyTransactionCount($value);
        return $this;
    }

    /**
     * Unsets daily transaction count field.
     */
    public function unsetDailyTransactionCount(): self
    {
        $this->instance->unsetDailyTransactionCount();
        return $this;
    }

    /**
     * Sets weekly transaction count field.
     */
    public function weeklyTransactionCount(?float $value): self
    {
        $this->instance->setWeeklyTransactionCount($value);
        return $this;
    }

    /**
     * Unsets weekly transaction count field.
     */
    public function unsetWeeklyTransactionCount(): self
    {
        $this->instance->unsetWeeklyTransactionCount();
        return $this;
    }

    /**
     * Sets monthly transaction count field.
     */
    public function monthlyTransactionCount(?float $value): self
    {
        $this->instance->setMonthlyTransactionCount($value);
        return $this;
    }

    /**
     * Unsets monthly transaction count field.
     */
    public function unsetMonthlyTransactionCount(): self
    {
        $this->instance->unsetMonthlyTransactionCount();
        return $this;
    }

    /**
     * Sets annual spend field.
     */
    public function annualSpend(?float $value): self
    {
        $this->instance->setAnnualSpend($value);
        return $this;
    }

    /**
     * Unsets annual spend field.
     */
    public function unsetAnnualSpend(): self
    {
        $this->instance->unsetAnnualSpend();
        return $this;
    }

    /**
     * Sets life time spend field.
     */
    public function lifeTimeSpend(?float $value): self
    {
        $this->instance->setLifeTimeSpend($value);
        return $this;
    }

    /**
     * Unsets life time spend field.
     */
    public function unsetLifeTimeSpend(): self
    {
        $this->instance->unsetLifeTimeSpend();
        return $this;
    }

    /**
     * Sets annual volume field.
     */
    public function annualVolume(?float $value): self
    {
        $this->instance->setAnnualVolume($value);
        return $this;
    }

    /**
     * Unsets annual volume field.
     */
    public function unsetAnnualVolume(): self
    {
        $this->instance->unsetAnnualVolume();
        return $this;
    }

    /**
     * Sets life time volume field.
     */
    public function lifeTimeVolume(?float $value): self
    {
        $this->instance->setLifeTimeVolume($value);
        return $this;
    }

    /**
     * Unsets life time volume field.
     */
    public function unsetLifeTimeVolume(): self
    {
        $this->instance->unsetLifeTimeVolume();
        return $this;
    }

    /**
     * Sets annual transaction count field.
     */
    public function annualTransactionCount(?float $value): self
    {
        $this->instance->setAnnualTransactionCount($value);
        return $this;
    }

    /**
     * Unsets annual transaction count field.
     */
    public function unsetAnnualTransactionCount(): self
    {
        $this->instance->unsetAnnualTransactionCount();
        return $this;
    }

    /**
     * Sets life time transaction count field.
     */
    public function lifeTimeTransactionCount(?float $value): self
    {
        $this->instance->setLifeTimeTransactionCount($value);
        return $this;
    }

    /**
     * Unsets life time transaction count field.
     */
    public function unsetLifeTimeTransactionCount(): self
    {
        $this->instance->unsetLifeTimeTransactionCount();
        return $this;
    }

    /**
     * Initializes a new usage restrictions object.
     */
    public function build(): UsageRestrictions
    {
        return CoreHelper::clone($this->instance);
    }
}
