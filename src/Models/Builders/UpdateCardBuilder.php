<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellCardManagementAPIsLib\Models\CardSettings;
use ShellCardManagementAPIsLib\Models\UpdateCard;

/**
 * Builder for model UpdateCard
 *
 * @see UpdateCard
 */
class UpdateCardBuilder
{
    /**
     * @var UpdateCard
     */
    private $instance;

    private function __construct(UpdateCard $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new update card Builder object.
     */
    public static function init(): self
    {
        return new self(new UpdateCard());
    }

    /**
     * Sets caller field.
     */
    public function caller(?string $value): self
    {
        $this->instance->setCaller($value);
        return $this;
    }

    /**
     * Unsets caller field.
     */
    public function unsetCaller(): self
    {
        $this->instance->unsetCaller();
        return $this;
    }

    /**
     * Sets is replacement chargeable field.
     */
    public function isReplacementChargeable(?bool $value): self
    {
        $this->instance->setIsReplacementChargeable($value);
        return $this;
    }

    /**
     * Sets notify caller field.
     */
    public function notifyCaller(?bool $value): self
    {
        $this->instance->setNotifyCaller($value);
        return $this;
    }

    /**
     * Sets notify caller on sync field.
     */
    public function notifyCallerOnSync(?bool $value): self
    {
        $this->instance->setNotifyCallerOnSync($value);
        return $this;
    }

    /**
     * Sets order card replacement field.
     */
    public function orderCardReplacement(?bool $value): self
    {
        $this->instance->setOrderCardReplacement($value);
        return $this;
    }

    /**
     * Sets card settings field.
     */
    public function cardSettings(?CardSettings $value): self
    {
        $this->instance->setCardSettings($value);
        return $this;
    }

    /**
     * Sets reason id field.
     */
    public function reasonId(?int $value): self
    {
        $this->instance->setReasonId($value);
        return $this;
    }

    /**
     * Sets reason text field.
     */
    public function reasonText(?string $value): self
    {
        $this->instance->setReasonText($value);
        return $this;
    }

    /**
     * Unsets reason text field.
     */
    public function unsetReasonText(): self
    {
        $this->instance->unsetReasonText();
        return $this;
    }

    /**
     * Sets target status field.
     */
    public function targetStatus(?int $value): self
    {
        $this->instance->setTargetStatus($value);
        return $this;
    }

    /**
     * Unsets target status field.
     */
    public function unsetTargetStatus(): self
    {
        $this->instance->unsetTargetStatus();
        return $this;
    }

    /**
     * Sets account id field.
     */
    public function accountId(?int $value): self
    {
        $this->instance->setAccountId($value);
        return $this;
    }

    /**
     * Unsets account id field.
     */
    public function unsetAccountId(): self
    {
        $this->instance->unsetAccountId();
        return $this;
    }

    /**
     * Sets account number field.
     */
    public function accountNumber(?string $value): self
    {
        $this->instance->setAccountNumber($value);
        return $this;
    }

    /**
     * Unsets account number field.
     */
    public function unsetAccountNumber(): self
    {
        $this->instance->unsetAccountNumber();
        return $this;
    }

    /**
     * Sets card expiry date field.
     */
    public function cardExpiryDate(?string $value): self
    {
        $this->instance->setCardExpiryDate($value);
        return $this;
    }

    /**
     * Unsets card expiry date field.
     */
    public function unsetCardExpiryDate(): self
    {
        $this->instance->unsetCardExpiryDate();
        return $this;
    }

    /**
     * Sets card id field.
     */
    public function cardId(?int $value): self
    {
        $this->instance->setCardId($value);
        return $this;
    }

    /**
     * Unsets card id field.
     */
    public function unsetCardId(): self
    {
        $this->instance->unsetCardId();
        return $this;
    }

    /**
     * Sets col co code field.
     */
    public function colCoCode(?int $value): self
    {
        $this->instance->setColCoCode($value);
        return $this;
    }

    /**
     * Unsets col co code field.
     */
    public function unsetColCoCode(): self
    {
        $this->instance->unsetColCoCode();
        return $this;
    }

    /**
     * Sets col co id field.
     */
    public function colCoId(?int $value): self
    {
        $this->instance->setColCoId($value);
        return $this;
    }

    /**
     * Unsets col co id field.
     */
    public function unsetColCoId(): self
    {
        $this->instance->unsetColCoId();
        return $this;
    }

    /**
     * Sets pan field.
     */
    public function pAN(?string $value): self
    {
        $this->instance->setPAN($value);
        return $this;
    }

    /**
     * Unsets pan field.
     */
    public function unsetPAN(): self
    {
        $this->instance->unsetPAN();
        return $this;
    }

    /**
     * Sets payer id field.
     */
    public function payerId(?int $value): self
    {
        $this->instance->setPayerId($value);
        return $this;
    }

    /**
     * Unsets payer id field.
     */
    public function unsetPayerId(): self
    {
        $this->instance->unsetPayerId();
        return $this;
    }

    /**
     * Sets payer number field.
     */
    public function payerNumber(?string $value): self
    {
        $this->instance->setPayerNumber($value);
        return $this;
    }

    /**
     * Unsets payer number field.
     */
    public function unsetPayerNumber(): self
    {
        $this->instance->unsetPayerNumber();
        return $this;
    }

    /**
     * Initializes a new update card object.
     */
    public function build(): UpdateCard
    {
        return CoreHelper::clone($this->instance);
    }
}
