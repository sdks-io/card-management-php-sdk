<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class Filters1 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var string[]|null
     */
    private $cardStatus;

    /**
     * @var array
     */
    private $expiringInDays = [];

    /**
     * @var array
     */
    private $issuedAfter = [];

    /**
     * @var array
     */
    private $pANEndsWith = [];

    /**
     * @var string[]|null
     */
    private $driverName;

    /**
     * @var string[]|null
     */
    private $vehicleRegistrationNumber;

    /**
     * @var SearchCard[]|null
     */
    private $includeCards;

    /**
     * @var SearchCard[]|null
     */
    private $excludeCards;

    /**
     * @var array
     */
    private $excludeBundleId = [];

    /**
     * @var array
     */
    private $cardSegment = [];

    /**
     * @var array
     */
    private $purchaseCategoryCode = [];

    /**
     * @var array
     */
    private $cardTypeCode = [];

    /**
     * @var bool|null
     */
    private $excludePendingRenewalCards;

    /**
     * @var bool|null
     */
    private $excludeCancelledCards;

    /**
     * @var bool|null
     */
    private $excludeReplacedCards;

    /**
     * @var bool|null
     */
    private $excludeFraudCards;

    /**
     * @var array
     */
    private $excludeCardGroupId = [];

    /**
     * @var array
     */
    private $excludeCardGroupName = [];

    /**
     * @var array
     */
    private $creationDate = [];

    /**
     * @var array
     */
    private $effectiveDate = [];

    /**
     * @var array
     */
    private $network = [];

    /**
     * @var array
     */
    private $coverage = [];

    /**
     * @var array
     */
    private $expiryMonth = [];

    /**
     * @var bool|null
     */
    private $excludeOldCards;

    /**
     * @var array
     */
    private $reissueSetting = [];

    /**
     * @var string|null
     */
    private $requestId;

    /**
     * Returns Account Id.
     * Account ID of the customer.<br/> Optional.<br/> This input is a search criterion, if given.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.<br/> Optional.<br/> This input is a search criterion, if given.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the customer.<br/> Optional.<br/> This input is a search criterion, if given.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.<br/> Optional.<br/> This input is a search criterion, if given.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.<br/> Optional.<br/> This input is a search criterion, if given.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.<br/> Optional.<br/> This input is a search criterion, if given.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer. <br />
     * Optional If ColCo Id or ColCoCountryCode is passed else Mandatory.<br />
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer. <br />
     * Optional If ColCo Id or ColCoCountryCode is passed else Mandatory.<br />
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer. <br />
     * Optional If ColCo Id or ColCoCountryCode is passed else Mandatory.<br />
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Col Co Country Code.
     * The 2 character ISO Code for the customer and card owning country.<br />
     * Optional If ColCoId or ColCoCode is passed else Mandatory.<br />
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * The 2 character ISO Code for the customer and card owning country.<br />
     * Optional If ColCoId or ColCoCode is passed else Mandatory.<br />
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * The 2 character ISO Code for the customer and card owning country.<br />
     * Optional If ColCoId or ColCoCode is passed else Mandatory.<br />
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id (in ) of the selected payer.<br />
     * Optional If ColCo Codeor ColCoCountryCode is passed else Mandatory <br />
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id (in ) of the selected payer.<br />
     * Optional If ColCo Codeor ColCoCountryCode is passed else Mandatory <br />
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id (in ) of the selected payer.<br />
     * Optional If ColCo Codeor ColCoCountryCode is passed else Mandatory <br />
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.<br />
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.<br />
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.<br />
     * Optional if PayerNumber is passed else Mandatory
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional if PayerId is passed else Mandatory
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Card Group Id.
     * Card group id.<br />
     * Optional. <br />
     * This input is a search criterion, if given.<br />
     * When -1 is passed, those cards that does not belong to any card group will be returned.
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card group id.<br />
     * Optional. <br />
     * This input is a search criterion, if given.<br />
     * When -1 is passed, those cards that does not belong to any card group will be returned.
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card group id.<br />
     * Optional. <br />
     * This input is a search criterion, if given.<br />
     * When -1 is passed, those cards that does not belong to any card group will be returned.
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name.<br />
     * Optional.<br />
     * This input is a search criterion, if given.<br />
     * If CardGroupId is provided then this search criterion will be ignored, else, those cards that have
     * the card group name completely matching with the entered value will be returned
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name.<br />
     * Optional.<br />
     * This input is a search criterion, if given.<br />
     * If CardGroupId is provided then this search criterion will be ignored, else, those cards that have
     * the card group name completely matching with the entered value will be returned
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name.<br />
     * Optional.<br />
     * This input is a search criterion, if given.<br />
     * If CardGroupId is provided then this search criterion will be ignored, else, those cards that have
     * the card group name completely matching with the entered value will be returned
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Card Status.
     * Status of the card.<br />
     * Mandatory.<br />
     * Multiple statuses are allowed to be included in the search criteria.<br />
     * CardStatus filter accepts either of the two values for each status as described below. However, the
     * output field “StatusDescription” is aligned with second value highlighted in italics.<br />
     * Below are the possible allowed statuses: <br />
     * • ACTIVE or Active – Cards at status Active (The result will include all the cards having the
     * following intermediate statuses as defined s, if the IncludeIntermediateStatus flag is true: Active
     * (Block in progress), Active (Cancel in progress), Active (Marked as damaged)), New (Cancel in
     * progress).<br />
     * • ON_ORDER or New – Cards at status New <br />
     * • EXPIRED or Expired – Cards at status Expired<br />
     * • BLOCKED or Blocked Card – Cards at status Block (The result will include all cards having the
     * following intermediate status as defined, if the IncludeIntermediateStatus flag is true: Blocked
     * card (Unblock in progress))<br />
     * • TEMP_BLOCKED_CUSTOMER or Temporary Block(Customer) – Cards at status Temporary Blocked By
     * Customer<br />
     * • TEMP_BLOCKED_SHELL or Temporary Block (Shell) – Cards at Status Temporary Blocked by Shell<br />
     * • CANCELLED or Cancelled – Cards at status Cancelled<br />
     * • PENDING_RENEWAL or Pending Renewal - Cards that are in renewal process<br />
     * • REPLACED or Replaced – Cards at Status Replaced<br />
     * • FRAUD or Fraud – Cards at Status FRAUD<br />
     * • ALL
     *
     * @return string[]|null
     */
    public function getCardStatus(): ?array
    {
        return $this->cardStatus;
    }

    /**
     * Sets Card Status.
     * Status of the card.<br />
     * Mandatory.<br />
     * Multiple statuses are allowed to be included in the search criteria.<br />
     * CardStatus filter accepts either of the two values for each status as described below. However, the
     * output field “StatusDescription” is aligned with second value highlighted in italics.<br />
     * Below are the possible allowed statuses: <br />
     * • ACTIVE or Active – Cards at status Active (The result will include all the cards having the
     * following intermediate statuses as defined s, if the IncludeIntermediateStatus flag is true: Active
     * (Block in progress), Active (Cancel in progress), Active (Marked as damaged)), New (Cancel in
     * progress).<br />
     * • ON_ORDER or New – Cards at status New <br />
     * • EXPIRED or Expired – Cards at status Expired<br />
     * • BLOCKED or Blocked Card – Cards at status Block (The result will include all cards having the
     * following intermediate status as defined, if the IncludeIntermediateStatus flag is true: Blocked
     * card (Unblock in progress))<br />
     * • TEMP_BLOCKED_CUSTOMER or Temporary Block(Customer) – Cards at status Temporary Blocked By
     * Customer<br />
     * • TEMP_BLOCKED_SHELL or Temporary Block (Shell) – Cards at Status Temporary Blocked by Shell<br />
     * • CANCELLED or Cancelled – Cards at status Cancelled<br />
     * • PENDING_RENEWAL or Pending Renewal - Cards that are in renewal process<br />
     * • REPLACED or Replaced – Cards at Status Replaced<br />
     * • FRAUD or Fraud – Cards at Status FRAUD<br />
     * • ALL
     *
     * @maps CardStatus
     *
     * @param string[]|null $cardStatus
     */
    public function setCardStatus(?array $cardStatus): void
    {
        $this->cardStatus = $cardStatus;
    }

    /**
     * Returns Expiring in Days.
     * Cards active and expiring in given number of days.<br />
     * Optional<br />
     * Note: When a value is passed in this parameter, only active cards will be considered while searching.
     */
    public function getExpiringInDays(): ?int
    {
        if (count($this->expiringInDays) == 0) {
            return null;
        }
        return $this->expiringInDays['value'];
    }

    /**
     * Sets Expiring in Days.
     * Cards active and expiring in given number of days.<br />
     * Optional<br />
     * Note: When a value is passed in this parameter, only active cards will be considered while searching.
     *
     * @maps ExpiringInDays
     */
    public function setExpiringInDays(?int $expiringInDays): void
    {
        $this->expiringInDays['value'] = $expiringInDays;
    }

    /**
     * Unsets Expiring in Days.
     * Cards active and expiring in given number of days.<br />
     * Optional<br />
     * Note: When a value is passed in this parameter, only active cards will be considered while searching.
     */
    public function unsetExpiringInDays(): void
    {
        $this->expiringInDays = [];
    }

    /**
     * Returns Issued After.
     * If provided, only list cards issued after the given date<br />
     * Optional<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getIssuedAfter(): ?string
    {
        if (count($this->issuedAfter) == 0) {
            return null;
        }
        return $this->issuedAfter['value'];
    }

    /**
     * Sets Issued After.
     * If provided, only list cards issued after the given date<br />
     * Optional<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps IssuedAfter
     */
    public function setIssuedAfter(?string $issuedAfter): void
    {
        $this->issuedAfter['value'] = $issuedAfter;
    }

    /**
     * Unsets Issued After.
     * If provided, only list cards issued after the given date<br />
     * Optional<br />
     * Format: yyyyMMdd<br />
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetIssuedAfter(): void
    {
        $this->issuedAfter = [];
    }

    /**
     * Returns P an Ends With.
     * Last digits of the PAN number<br />
     * Minimum 4 last digits of the card should be sent for this field to be considered as part of the
     * search criteria.<br />
     * Optional<br />
     * Max Length: 50
     */
    public function getPANEndsWith(): ?string
    {
        if (count($this->pANEndsWith) == 0) {
            return null;
        }
        return $this->pANEndsWith['value'];
    }

    /**
     * Sets P an Ends With.
     * Last digits of the PAN number<br />
     * Minimum 4 last digits of the card should be sent for this field to be considered as part of the
     * search criteria.<br />
     * Optional<br />
     * Max Length: 50
     *
     * @maps PANEndsWith
     */
    public function setPANEndsWith(?string $pANEndsWith): void
    {
        $this->pANEndsWith['value'] = $pANEndsWith;
    }

    /**
     * Unsets P an Ends With.
     * Last digits of the PAN number<br />
     * Minimum 4 last digits of the card should be sent for this field to be considered as part of the
     * search criteria.<br />
     * Optional<br />
     * Max Length: 50
     */
    public function unsetPANEndsWith(): void
    {
        $this->pANEndsWith = [];
    }

    /**
     * Returns Driver Name.
     * Driver Name embossed on the card<br />
     * Optional<br />
     * Up to 10 driver names could be passed in the parameter.<br />
     * Minimum of 4 characters should be provided for each driver name else not considered.<br />
     * Those cards will be returned when part of the driver name matches with any of the string passed in
     * the list.<br />
     * Max Length for each Driver name: 50
     *
     * @return string[]|null
     */
    public function getDriverName(): ?array
    {
        return $this->driverName;
    }

    /**
     * Sets Driver Name.
     * Driver Name embossed on the card<br />
     * Optional<br />
     * Up to 10 driver names could be passed in the parameter.<br />
     * Minimum of 4 characters should be provided for each driver name else not considered.<br />
     * Those cards will be returned when part of the driver name matches with any of the string passed in
     * the list.<br />
     * Max Length for each Driver name: 50
     *
     * @maps DriverName
     *
     * @param string[]|null $driverName
     */
    public function setDriverName(?array $driverName): void
    {
        $this->driverName = $driverName;
    }

    /**
     * Returns Vehicle Registration Number.
     * Vehicle Registration embossed on the card<br />
     * Optional<br />
     * Up to 10 vehicle registration numbers could be passed in the parameter.<br />
     * Minimum of 4 characters should be provided for each VRN else not considered<br />
     * Those cards will be returned when part of the VRN matches with any of the string passed in the list.
     * <br />
     * Max Length for each VRN: 50
     *
     * @return string[]|null
     */
    public function getVehicleRegistrationNumber(): ?array
    {
        return $this->vehicleRegistrationNumber;
    }

    /**
     * Sets Vehicle Registration Number.
     * Vehicle Registration embossed on the card<br />
     * Optional<br />
     * Up to 10 vehicle registration numbers could be passed in the parameter.<br />
     * Minimum of 4 characters should be provided for each VRN else not considered<br />
     * Those cards will be returned when part of the VRN matches with any of the string passed in the list.
     * <br />
     * Max Length for each VRN: 50
     *
     * @maps VehicleRegistrationNumber
     *
     * @param string[]|null $vehicleRegistrationNumber
     */
    public function setVehicleRegistrationNumber(?array $vehicleRegistrationNumber): void
    {
        $this->vehicleRegistrationNumber = $vehicleRegistrationNumber;
    }

    /**
     * Returns Include Cards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be included in the response.<br />
     * Details of the SerachCard entity are given below.
     *
     * @return SearchCard[]|null
     */
    public function getIncludeCards(): ?array
    {
        return $this->includeCards;
    }

    /**
     * Sets Include Cards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be included in the response.<br />
     * Details of the SerachCard entity are given below.
     *
     * @maps IncludeCards
     *
     * @param SearchCard[]|null $includeCards
     */
    public function setIncludeCards(?array $includeCards): void
    {
        $this->includeCards = $includeCards;
    }

    /**
     * Returns Exclude Cards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be excluded in the response. <br />
     * Details of the SerachCard entity are given below.
     *
     * @return SearchCard[]|null
     */
    public function getExcludeCards(): ?array
    {
        return $this->excludeCards;
    }

    /**
     * Sets Exclude Cards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be excluded in the response. <br />
     * Details of the SerachCard entity are given below.
     *
     * @maps ExcludeCards
     *
     * @param SearchCard[]|null $excludeCards
     */
    public function setExcludeCards(?array $excludeCards): void
    {
        $this->excludeCards = $excludeCards;
    }

    /**
     * Returns Exclude Bundle Id.
     * Bundle Id for the Card, which needs to be excluded in the response.<br />
     * Optional
     */
    public function getExcludeBundleId(): ?string
    {
        if (count($this->excludeBundleId) == 0) {
            return null;
        }
        return $this->excludeBundleId['value'];
    }

    /**
     * Sets Exclude Bundle Id.
     * Bundle Id for the Card, which needs to be excluded in the response.<br />
     * Optional
     *
     * @maps ExcludeBundleId
     */
    public function setExcludeBundleId(?string $excludeBundleId): void
    {
        $this->excludeBundleId['value'] = $excludeBundleId;
    }

    /**
     * Unsets Exclude Bundle Id.
     * Bundle Id for the Card, which needs to be excluded in the response.<br />
     * Optional
     */
    public function unsetExcludeBundleId(): void
    {
        $this->excludeBundleId = [];
    }

    /**
     * Returns Card Segment.
     * Market segment to which card belongs to.<br />
     * Optional.<br />
     * Allowed values<br />
     * • CRT<br />
     * • Fleet
     */
    public function getCardSegment(): ?string
    {
        if (count($this->cardSegment) == 0) {
            return null;
        }
        return $this->cardSegment['value'];
    }

    /**
     * Sets Card Segment.
     * Market segment to which card belongs to.<br />
     * Optional.<br />
     * Allowed values<br />
     * • CRT<br />
     * • Fleet
     *
     * @maps CardSegment
     */
    public function setCardSegment(?string $cardSegment): void
    {
        $this->cardSegment['value'] = $cardSegment;
    }

    /**
     * Unsets Card Segment.
     * Market segment to which card belongs to.<br />
     * Optional.<br />
     * Allowed values<br />
     * • CRT<br />
     * • Fleet
     */
    public function unsetCardSegment(): void
    {
        $this->cardSegment = [];
    }

    /**
     * Returns Purchase Category Code.
     * Purchase category code of the card.<br />
     * Optional.
     */
    public function getPurchaseCategoryCode(): ?string
    {
        if (count($this->purchaseCategoryCode) == 0) {
            return null;
        }
        return $this->purchaseCategoryCode['value'];
    }

    /**
     * Sets Purchase Category Code.
     * Purchase category code of the card.<br />
     * Optional.
     *
     * @maps PurchaseCategoryCode
     */
    public function setPurchaseCategoryCode(?string $purchaseCategoryCode): void
    {
        $this->purchaseCategoryCode['value'] = $purchaseCategoryCode;
    }

    /**
     * Unsets Purchase Category Code.
     * Purchase category code of the card.<br />
     * Optional.
     */
    public function unsetPurchaseCategoryCode(): void
    {
        $this->purchaseCategoryCode = [];
    }

    /**
     * Returns Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN<br />
     * Optional.
     */
    public function getCardTypeCode(): ?string
    {
        if (count($this->cardTypeCode) == 0) {
            return null;
        }
        return $this->cardTypeCode['value'];
    }

    /**
     * Sets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN<br />
     * Optional.
     *
     * @maps CardTypeCode
     */
    public function setCardTypeCode(?string $cardTypeCode): void
    {
        $this->cardTypeCode['value'] = $cardTypeCode;
    }

    /**
     * Unsets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN<br />
     * Optional.
     */
    public function unsetCardTypeCode(): void
    {
        $this->cardTypeCode = [];
    }

    /**
     * Returns Exclude Pending Renewal Cards.
     * Default value is True.<br />
     * When true, the API will not return cards that are at Pending Renewal Status in Cards Platform
     */
    public function getExcludePendingRenewalCards(): ?bool
    {
        return $this->excludePendingRenewalCards;
    }

    /**
     * Sets Exclude Pending Renewal Cards.
     * Default value is True.<br />
     * When true, the API will not return cards that are at Pending Renewal Status in Cards Platform
     *
     * @maps ExcludePendingRenewalCards
     */
    public function setExcludePendingRenewalCards(?bool $excludePendingRenewalCards): void
    {
        $this->excludePendingRenewalCards = $excludePendingRenewalCards;
    }

    /**
     * Returns Exclude Cancelled Cards.
     * Default value is True.<br />
     * When true, the API will not return cards that are at Cancelled Status in Cards Platform
     */
    public function getExcludeCancelledCards(): ?bool
    {
        return $this->excludeCancelledCards;
    }

    /**
     * Sets Exclude Cancelled Cards.
     * Default value is True.<br />
     * When true, the API will not return cards that are at Cancelled Status in Cards Platform
     *
     * @maps ExcludeCancelledCards
     */
    public function setExcludeCancelledCards(?bool $excludeCancelledCards): void
    {
        $this->excludeCancelledCards = $excludeCancelledCards;
    }

    /**
     * Returns Exclude Replaced Cards.
     * Default value is False.<br />
     * When true, the API will not return cards that are at Replaced Status in Cards Platform
     */
    public function getExcludeReplacedCards(): ?bool
    {
        return $this->excludeReplacedCards;
    }

    /**
     * Sets Exclude Replaced Cards.
     * Default value is False.<br />
     * When true, the API will not return cards that are at Replaced Status in Cards Platform
     *
     * @maps ExcludeReplacedCards
     */
    public function setExcludeReplacedCards(?bool $excludeReplacedCards): void
    {
        $this->excludeReplacedCards = $excludeReplacedCards;
    }

    /**
     * Returns Exclude Fraud Cards.
     * Default value is False.<br />
     * When true, the API will not return cards that are at Fraud Status in Cards Platform
     */
    public function getExcludeFraudCards(): ?bool
    {
        return $this->excludeFraudCards;
    }

    /**
     * Sets Exclude Fraud Cards.
     * Default value is False.<br />
     * When true, the API will not return cards that are at Fraud Status in Cards Platform
     *
     * @maps ExcludeFraudCards
     */
    public function setExcludeFraudCards(?bool $excludeFraudCards): void
    {
        $this->excludeFraudCards = $excludeFraudCards;
    }

    /**
     * Returns Exclude Card Group Id.
     * Optional<br />
     * When passed, the API will not return cards that are currently in the Card Group specified
     */
    public function getExcludeCardGroupId(): ?int
    {
        if (count($this->excludeCardGroupId) == 0) {
            return null;
        }
        return $this->excludeCardGroupId['value'];
    }

    /**
     * Sets Exclude Card Group Id.
     * Optional<br />
     * When passed, the API will not return cards that are currently in the Card Group specified
     *
     * @maps ExcludeCardGroupId
     */
    public function setExcludeCardGroupId(?int $excludeCardGroupId): void
    {
        $this->excludeCardGroupId['value'] = $excludeCardGroupId;
    }

    /**
     * Unsets Exclude Card Group Id.
     * Optional<br />
     * When passed, the API will not return cards that are currently in the Card Group specified
     */
    public function unsetExcludeCardGroupId(): void
    {
        $this->excludeCardGroupId = [];
    }

    /**
     * Returns Exclude Card Group Name.
     * Optional<br />
     * When passed, the API will not return cards that are currently in the Card Group specified
     */
    public function getExcludeCardGroupName(): ?string
    {
        if (count($this->excludeCardGroupName) == 0) {
            return null;
        }
        return $this->excludeCardGroupName['value'];
    }

    /**
     * Sets Exclude Card Group Name.
     * Optional<br />
     * When passed, the API will not return cards that are currently in the Card Group specified
     *
     * @maps ExcludeCardGroupName
     */
    public function setExcludeCardGroupName(?string $excludeCardGroupName): void
    {
        $this->excludeCardGroupName['value'] = $excludeCardGroupName;
    }

    /**
     * Unsets Exclude Card Group Name.
     * Optional<br />
     * When passed, the API will not return cards that are currently in the Card Group specified
     */
    public function unsetExcludeCardGroupName(): void
    {
        $this->excludeCardGroupName = [];
    }

    /**
     * Returns Creation Date.
     * Card Creation Date<br />
     * Optional<br />
     * Format: yyyyMMdd
     */
    public function getCreationDate(): ?string
    {
        if (count($this->creationDate) == 0) {
            return null;
        }
        return $this->creationDate['value'];
    }

    /**
     * Sets Creation Date.
     * Card Creation Date<br />
     * Optional<br />
     * Format: yyyyMMdd
     *
     * @maps CreationDate
     */
    public function setCreationDate(?string $creationDate): void
    {
        $this->creationDate['value'] = $creationDate;
    }

    /**
     * Unsets Creation Date.
     * Card Creation Date<br />
     * Optional<br />
     * Format: yyyyMMdd
     */
    public function unsetCreationDate(): void
    {
        $this->creationDate = [];
    }

    /**
     * Returns Effective Date.
     * Effective date for the Card<br />
     * Optional<br />
     * Format: yyyyMMdd
     */
    public function getEffectiveDate(): ?string
    {
        if (count($this->effectiveDate) == 0) {
            return null;
        }
        return $this->effectiveDate['value'];
    }

    /**
     * Sets Effective Date.
     * Effective date for the Card<br />
     * Optional<br />
     * Format: yyyyMMdd
     *
     * @maps EffectiveDate
     */
    public function setEffectiveDate(?string $effectiveDate): void
    {
        $this->effectiveDate['value'] = $effectiveDate;
    }

    /**
     * Unsets Effective Date.
     * Effective date for the Card<br />
     * Optional<br />
     * Format: yyyyMMdd
     */
    public function unsetEffectiveDate(): void
    {
        $this->effectiveDate = [];
    }

    /**
     * Returns Network.
     * Cards allowed to be used in site.<br />
     * Optional.<br />
     * Allowed values<br />
     * • ShellSitesOnly<br />
     * • PartnersSitesIncluded<br />
     */
    public function getNetwork(): ?string
    {
        if (count($this->network) == 0) {
            return null;
        }
        return $this->network['value'];
    }

    /**
     * Sets Network.
     * Cards allowed to be used in site.<br />
     * Optional.<br />
     * Allowed values<br />
     * • ShellSitesOnly<br />
     * • PartnersSitesIncluded<br />
     *
     * @maps Network
     */
    public function setNetwork(?string $network): void
    {
        $this->network['value'] = $network;
    }

    /**
     * Unsets Network.
     * Cards allowed to be used in site.<br />
     * Optional.<br />
     * Allowed values<br />
     * • ShellSitesOnly<br />
     * • PartnersSitesIncluded<br />
     */
    public function unsetNetwork(): void
    {
        $this->network = [];
    }

    /**
     * Returns Coverage.
     * Cards allowed to used nationally/internationally.<br />
     * Optional.<br />
     * Allowed values<br />
     *
     * -National<br />
     *
     * -International
     */
    public function getCoverage(): ?string
    {
        if (count($this->coverage) == 0) {
            return null;
        }
        return $this->coverage['value'];
    }

    /**
     * Sets Coverage.
     * Cards allowed to used nationally/internationally.<br />
     * Optional.<br />
     * Allowed values<br />
     *
     * -National<br />
     *
     * -International
     *
     * @maps Coverage
     */
    public function setCoverage(?string $coverage): void
    {
        $this->coverage['value'] = $coverage;
    }

    /**
     * Unsets Coverage.
     * Cards allowed to used nationally/internationally.<br />
     * Optional.<br />
     * Allowed values<br />
     *
     * -National<br />
     *
     * -International
     */
    public function unsetCoverage(): void
    {
        $this->coverage = [];
    }

    /**
     * Returns Expiry Month.
     * Month in which the card is expiring.<br />
     * Optional.<br />
     * Format: MMYYYY
     */
    public function getExpiryMonth(): ?string
    {
        if (count($this->expiryMonth) == 0) {
            return null;
        }
        return $this->expiryMonth['value'];
    }

    /**
     * Sets Expiry Month.
     * Month in which the card is expiring.<br />
     * Optional.<br />
     * Format: MMYYYY
     *
     * @maps ExpiryMonth
     */
    public function setExpiryMonth(?string $expiryMonth): void
    {
        $this->expiryMonth['value'] = $expiryMonth;
    }

    /**
     * Unsets Expiry Month.
     * Month in which the card is expiring.<br />
     * Optional.<br />
     * Format: MMYYYY
     */
    public function unsetExpiryMonth(): void
    {
        $this->expiryMonth = [];
    }

    /**
     * Returns Exclude Old Cards.
     * Default Value: False<br />
     * When this field is set to True, cards with below status 2 years (configurable) ago and earlier are
     * excluded from the result<br />
     *
     * -Blocked Card<br />
     *
     * -Expired<br />
     *
     * -Cancelled<br />
     *
     * -Suspended<br />
     *
     * -Blocked<br />
     *
     * -Expired and Cancelled<br />
     *
     * -Replaced<br />
     *
     * -Replaced By<br />
     *
     * -Closed<br />
     *
     * -Fraud<br />
     */
    public function getExcludeOldCards(): ?bool
    {
        return $this->excludeOldCards;
    }

    /**
     * Sets Exclude Old Cards.
     * Default Value: False<br />
     * When this field is set to True, cards with below status 2 years (configurable) ago and earlier are
     * excluded from the result<br />
     *
     * -Blocked Card<br />
     *
     * -Expired<br />
     *
     * -Cancelled<br />
     *
     * -Suspended<br />
     *
     * -Blocked<br />
     *
     * -Expired and Cancelled<br />
     *
     * -Replaced<br />
     *
     * -Replaced By<br />
     *
     * -Closed<br />
     *
     * -Fraud<br />
     *
     * @maps ExcludeOldCards
     */
    public function setExcludeOldCards(?bool $excludeOldCards): void
    {
        $this->excludeOldCards = $excludeOldCards;
    }

    /**
     * Returns Reissue Setting.
     * Default Value: All<br />
     * Optional<br />
     * This option is used to filter the list of cards with ‘ReissueSetting’.<br />
     * If ‘True’, the API will return cards with ReIssueSetting value is true.<br />
     * If ‘False’, the API will return cards with ReIsssueSetting value is false.<br />
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.<br />
     * Allowed Values:<br />
     * 1. All<br />
     * 2. True<br />
     * 3. False
     */
    public function getReissueSetting(): ?string
    {
        if (count($this->reissueSetting) == 0) {
            return null;
        }
        return $this->reissueSetting['value'];
    }

    /**
     * Sets Reissue Setting.
     * Default Value: All<br />
     * Optional<br />
     * This option is used to filter the list of cards with ‘ReissueSetting’.<br />
     * If ‘True’, the API will return cards with ReIssueSetting value is true.<br />
     * If ‘False’, the API will return cards with ReIsssueSetting value is false.<br />
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.<br />
     * Allowed Values:<br />
     * 1. All<br />
     * 2. True<br />
     * 3. False
     *
     * @maps ReissueSetting
     */
    public function setReissueSetting(?string $reissueSetting): void
    {
        $this->reissueSetting['value'] = $reissueSetting;
    }

    /**
     * Unsets Reissue Setting.
     * Default Value: All<br />
     * Optional<br />
     * This option is used to filter the list of cards with ‘ReissueSetting’.<br />
     * If ‘True’, the API will return cards with ReIssueSetting value is true.<br />
     * If ‘False’, the API will return cards with ReIsssueSetting value is false.<br />
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.<br />
     * Allowed Values:<br />
     * 1. All<br />
     * 2. True<br />
     * 3. False
     */
    public function unsetReissueSetting(): void
    {
        $this->reissueSetting = [];
    }

    /**
     * Returns Request Id.
     */
    public function getRequestId(): ?string
    {
        return $this->requestId;
    }

    /**
     * Sets Request Id.
     *
     * @maps RequestId
     */
    public function setRequestId(?string $requestId): void
    {
        $this->requestId = $requestId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']                  = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']              = $this->accountNumber['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                  = $this->colCoCode['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode']           = $this->colCoCountryCode['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                    = $this->colCoId['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                    = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                = $this->payerNumber['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']                = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']              = $this->cardGroupName['value'];
        }
        $json['CardStatus']                     = $this->cardStatus;
        if (!empty($this->expiringInDays)) {
            $json['ExpiringInDays']             = $this->expiringInDays['value'];
        }
        if (!empty($this->issuedAfter)) {
            $json['IssuedAfter']                = $this->issuedAfter['value'];
        }
        if (!empty($this->pANEndsWith)) {
            $json['PANEndsWith']                = $this->pANEndsWith['value'];
        }
        if (isset($this->driverName)) {
            $json['DriverName']                 = $this->driverName;
        }
        if (isset($this->vehicleRegistrationNumber)) {
            $json['VehicleRegistrationNumber']  = $this->vehicleRegistrationNumber;
        }
        if (isset($this->includeCards)) {
            $json['IncludeCards']               = $this->includeCards;
        }
        if (isset($this->excludeCards)) {
            $json['ExcludeCards']               = $this->excludeCards;
        }
        if (!empty($this->excludeBundleId)) {
            $json['ExcludeBundleId']            = $this->excludeBundleId['value'];
        }
        if (!empty($this->cardSegment)) {
            $json['CardSegment']                = $this->cardSegment['value'];
        }
        if (!empty($this->purchaseCategoryCode)) {
            $json['PurchaseCategoryCode']       = $this->purchaseCategoryCode['value'];
        }
        if (!empty($this->cardTypeCode)) {
            $json['CardTypeCode']               = $this->cardTypeCode['value'];
        }
        if (isset($this->excludePendingRenewalCards)) {
            $json['ExcludePendingRenewalCards'] = $this->excludePendingRenewalCards;
        }
        if (isset($this->excludeCancelledCards)) {
            $json['ExcludeCancelledCards']      = $this->excludeCancelledCards;
        }
        if (isset($this->excludeReplacedCards)) {
            $json['ExcludeReplacedCards']       = $this->excludeReplacedCards;
        }
        if (isset($this->excludeFraudCards)) {
            $json['ExcludeFraudCards']          = $this->excludeFraudCards;
        }
        if (!empty($this->excludeCardGroupId)) {
            $json['ExcludeCardGroupId']         = $this->excludeCardGroupId['value'];
        }
        if (!empty($this->excludeCardGroupName)) {
            $json['ExcludeCardGroupName']       = $this->excludeCardGroupName['value'];
        }
        if (!empty($this->creationDate)) {
            $json['CreationDate']               = $this->creationDate['value'];
        }
        if (!empty($this->effectiveDate)) {
            $json['EffectiveDate']              = $this->effectiveDate['value'];
        }
        if (!empty($this->network)) {
            $json['Network']                    = $this->network['value'];
        }
        if (!empty($this->coverage)) {
            $json['Coverage']                   = $this->coverage['value'];
        }
        if (!empty($this->expiryMonth)) {
            $json['ExpiryMonth']                = $this->expiryMonth['value'];
        }
        if (isset($this->excludeOldCards)) {
            $json['ExcludeOldCards']            = $this->excludeOldCards;
        }
        if (!empty($this->reissueSetting)) {
            $json['ReissueSetting']             = $this->reissueSetting['value'];
        }
        $json['RequestId']                      = $this->requestId;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
