<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class UsageRestrictions implements \JsonSerializable
{
    /**
     * @var array
     */
    private $dailySpend = [];

    /**
     * @var array
     */
    private $weeklySpend = [];

    /**
     * @var array
     */
    private $monthlySpend = [];

    /**
     * @var array
     */
    private $perTransactionSpend = [];

    /**
     * @var array
     */
    private $dailyVolume = [];

    /**
     * @var array
     */
    private $weeklyVolume = [];

    /**
     * @var array
     */
    private $monthlyVolume = [];

    /**
     * @var array
     */
    private $perTransactionVolume = [];

    /**
     * @var array
     */
    private $dailyTransactionCount = [];

    /**
     * @var array
     */
    private $weeklyTransactionCount = [];

    /**
     * @var array
     */
    private $monthlyTransactionCount = [];

    /**
     * @var array
     */
    private $annualSpend = [];

    /**
     * @var array
     */
    private $lifeTimeSpend = [];

    /**
     * @var array
     */
    private $annualVolume = [];

    /**
     * @var array
     */
    private $lifeTimeVolume = [];

    /**
     * @var array
     */
    private $annualTransactionCount = [];

    /**
     * @var array
     */
    private $lifeTimeTransactionCount = [];

    /**
     * Returns Daily Spend.
     * Maximum spend value (amount) allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getDailySpend(): ?float
    {
        if (count($this->dailySpend) == 0) {
            return null;
        }
        return $this->dailySpend['value'];
    }

    /**
     * Sets Daily Spend.
     * Maximum spend value (amount) allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps DailySpend
     */
    public function setDailySpend(?float $dailySpend): void
    {
        $this->dailySpend['value'] = $dailySpend;
    }

    /**
     * Unsets Daily Spend.
     * Maximum spend value (amount) allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetDailySpend(): void
    {
        $this->dailySpend = [];
    }

    /**
     * Returns Weekly Spend.
     * Maximum spend value (amount) allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getWeeklySpend(): ?float
    {
        if (count($this->weeklySpend) == 0) {
            return null;
        }
        return $this->weeklySpend['value'];
    }

    /**
     * Sets Weekly Spend.
     * Maximum spend value (amount) allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps WeeklySpend
     */
    public function setWeeklySpend(?float $weeklySpend): void
    {
        $this->weeklySpend['value'] = $weeklySpend;
    }

    /**
     * Unsets Weekly Spend.
     * Maximum spend value (amount) allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetWeeklySpend(): void
    {
        $this->weeklySpend = [];
    }

    /**
     * Returns Monthly Spend.
     * Maximum spend value (amount) allowed per month.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getMonthlySpend(): ?float
    {
        if (count($this->monthlySpend) == 0) {
            return null;
        }
        return $this->monthlySpend['value'];
    }

    /**
     * Sets Monthly Spend.
     * Maximum spend value (amount) allowed per month.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps MonthlySpend
     */
    public function setMonthlySpend(?float $monthlySpend): void
    {
        $this->monthlySpend['value'] = $monthlySpend;
    }

    /**
     * Unsets Monthly Spend.
     * Maximum spend value (amount) allowed per month.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetMonthlySpend(): void
    {
        $this->monthlySpend = [];
    }

    /**
     * Returns Per Transaction Spend.
     * Maximum spend value (amount) allowed per transaction.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getPerTransactionSpend(): ?float
    {
        if (count($this->perTransactionSpend) == 0) {
            return null;
        }
        return $this->perTransactionSpend['value'];
    }

    /**
     * Sets Per Transaction Spend.
     * Maximum spend value (amount) allowed per transaction.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps PerTransactionSpend
     */
    public function setPerTransactionSpend(?float $perTransactionSpend): void
    {
        $this->perTransactionSpend['value'] = $perTransactionSpend;
    }

    /**
     * Unsets Per Transaction Spend.
     * Maximum spend value (amount) allowed per transaction.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetPerTransactionSpend(): void
    {
        $this->perTransactionSpend = [];
    }

    /**
     * Returns Daily Volume.
     * Maximum volume (quantity) allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getDailyVolume(): ?int
    {
        if (count($this->dailyVolume) == 0) {
            return null;
        }
        return $this->dailyVolume['value'];
    }

    /**
     * Sets Daily Volume.
     * Maximum volume (quantity) allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps DailyVolume
     */
    public function setDailyVolume(?int $dailyVolume): void
    {
        $this->dailyVolume['value'] = $dailyVolume;
    }

    /**
     * Unsets Daily Volume.
     * Maximum volume (quantity) allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetDailyVolume(): void
    {
        $this->dailyVolume = [];
    }

    /**
     * Returns Weekly Volume.
     * Maximum volume (quantity) allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getWeeklyVolume(): ?int
    {
        if (count($this->weeklyVolume) == 0) {
            return null;
        }
        return $this->weeklyVolume['value'];
    }

    /**
     * Sets Weekly Volume.
     * Maximum volume (quantity) allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps WeeklyVolume
     */
    public function setWeeklyVolume(?int $weeklyVolume): void
    {
        $this->weeklyVolume['value'] = $weeklyVolume;
    }

    /**
     * Unsets Weekly Volume.
     * Maximum volume (quantity) allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetWeeklyVolume(): void
    {
        $this->weeklyVolume = [];
    }

    /**
     * Returns Monthly Volume.
     * Maximum volume (quantity) allowed per month.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getMonthlyVolume(): ?int
    {
        if (count($this->monthlyVolume) == 0) {
            return null;
        }
        return $this->monthlyVolume['value'];
    }

    /**
     * Sets Monthly Volume.
     * Maximum volume (quantity) allowed per month.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps MonthlyVolume
     */
    public function setMonthlyVolume(?int $monthlyVolume): void
    {
        $this->monthlyVolume['value'] = $monthlyVolume;
    }

    /**
     * Unsets Monthly Volume.
     * Maximum volume (quantity) allowed per month.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetMonthlyVolume(): void
    {
        $this->monthlyVolume = [];
    }

    /**
     * Returns Per Transaction Volume.
     * Maximum volume (quantity) allowed per transaction.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getPerTransactionVolume(): ?int
    {
        if (count($this->perTransactionVolume) == 0) {
            return null;
        }
        return $this->perTransactionVolume['value'];
    }

    /**
     * Sets Per Transaction Volume.
     * Maximum volume (quantity) allowed per transaction.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps PerTransactionVolume
     */
    public function setPerTransactionVolume(?int $perTransactionVolume): void
    {
        $this->perTransactionVolume['value'] = $perTransactionVolume;
    }

    /**
     * Unsets Per Transaction Volume.
     * Maximum volume (quantity) allowed per transaction.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetPerTransactionVolume(): void
    {
        $this->perTransactionVolume = [];
    }

    /**
     * Returns Daily Transaction Count.
     * Maximum number of transactions allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getDailyTransactionCount(): ?float
    {
        if (count($this->dailyTransactionCount) == 0) {
            return null;
        }
        return $this->dailyTransactionCount['value'];
    }

    /**
     * Sets Daily Transaction Count.
     * Maximum number of transactions allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps DailyTransactionCount
     */
    public function setDailyTransactionCount(?float $dailyTransactionCount): void
    {
        $this->dailyTransactionCount['value'] = $dailyTransactionCount;
    }

    /**
     * Unsets Daily Transaction Count.
     * Maximum number of transactions allowed per day.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetDailyTransactionCount(): void
    {
        $this->dailyTransactionCount = [];
    }

    /**
     * Returns Weekly Transaction Count.
     * Maximum number of transactions allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getWeeklyTransactionCount(): ?float
    {
        if (count($this->weeklyTransactionCount) == 0) {
            return null;
        }
        return $this->weeklyTransactionCount['value'];
    }

    /**
     * Sets Weekly Transaction Count.
     * Maximum number of transactions allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps WeeklyTransactionCount
     */
    public function setWeeklyTransactionCount(?float $weeklyTransactionCount): void
    {
        $this->weeklyTransactionCount['value'] = $weeklyTransactionCount;
    }

    /**
     * Unsets Weekly Transaction Count.
     * Maximum number of transactions allowed per week.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetWeeklyTransactionCount(): void
    {
        $this->weeklyTransactionCount = [];
    }

    /**
     * Returns Monthly Transaction Count.
     * Maximum number of transactions allowed per month.
     *
     * Optional.
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getMonthlyTransactionCount(): ?float
    {
        if (count($this->monthlyTransactionCount) == 0) {
            return null;
        }
        return $this->monthlyTransactionCount['value'];
    }

    /**
     * Sets Monthly Transaction Count.
     * Maximum number of transactions allowed per month.
     *
     * Optional.
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps MonthlyTransactionCount
     */
    public function setMonthlyTransactionCount(?float $monthlyTransactionCount): void
    {
        $this->monthlyTransactionCount['value'] = $monthlyTransactionCount;
    }

    /**
     * Unsets Monthly Transaction Count.
     * Maximum number of transactions allowed per month.
     *
     * Optional.
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetMonthlyTransactionCount(): void
    {
        $this->monthlyTransactionCount = [];
    }

    /**
     * Returns Annual Spend.
     * Maximum spend value (amount) allowed per annum.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getAnnualSpend(): ?float
    {
        if (count($this->annualSpend) == 0) {
            return null;
        }
        return $this->annualSpend['value'];
    }

    /**
     * Sets Annual Spend.
     * Maximum spend value (amount) allowed per annum.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps AnnualSpend
     */
    public function setAnnualSpend(?float $annualSpend): void
    {
        $this->annualSpend['value'] = $annualSpend;
    }

    /**
     * Unsets Annual Spend.
     * Maximum spend value (amount) allowed per annum.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetAnnualSpend(): void
    {
        $this->annualSpend = [];
    }

    /**
     * Returns Life Time Spend.
     * Maximum spend value (amount) allowed in card’s life time.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getLifeTimeSpend(): ?float
    {
        if (count($this->lifeTimeSpend) == 0) {
            return null;
        }
        return $this->lifeTimeSpend['value'];
    }

    /**
     * Sets Life Time Spend.
     * Maximum spend value (amount) allowed in card’s life time.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps LifeTimeSpend
     */
    public function setLifeTimeSpend(?float $lifeTimeSpend): void
    {
        $this->lifeTimeSpend['value'] = $lifeTimeSpend;
    }

    /**
     * Unsets Life Time Spend.
     * Maximum spend value (amount) allowed in card’s life time.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetLifeTimeSpend(): void
    {
        $this->lifeTimeSpend = [];
    }

    /**
     * Returns Annual Volume.
     * Maximum volume (quantity) allowed per annum.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getAnnualVolume(): ?float
    {
        if (count($this->annualVolume) == 0) {
            return null;
        }
        return $this->annualVolume['value'];
    }

    /**
     * Sets Annual Volume.
     * Maximum volume (quantity) allowed per annum.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps AnnualVolume
     */
    public function setAnnualVolume(?float $annualVolume): void
    {
        $this->annualVolume['value'] = $annualVolume;
    }

    /**
     * Unsets Annual Volume.
     * Maximum volume (quantity) allowed per annum.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetAnnualVolume(): void
    {
        $this->annualVolume = [];
    }

    /**
     * Returns Life Time Volume.
     * Maximum volume (quantity) allowed in card’s life time.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getLifeTimeVolume(): ?float
    {
        if (count($this->lifeTimeVolume) == 0) {
            return null;
        }
        return $this->lifeTimeVolume['value'];
    }

    /**
     * Sets Life Time Volume.
     * Maximum volume (quantity) allowed in card’s life time.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps LifeTimeVolume
     */
    public function setLifeTimeVolume(?float $lifeTimeVolume): void
    {
        $this->lifeTimeVolume['value'] = $lifeTimeVolume;
    }

    /**
     * Unsets Life Time Volume.
     * Maximum volume (quantity) allowed in card’s life time.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetLifeTimeVolume(): void
    {
        $this->lifeTimeVolume = [];
    }

    /**
     * Returns Annual Transaction Count.
     * Maximum number of transactions allowed per annum.
     *
     * Optional.
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getAnnualTransactionCount(): ?float
    {
        if (count($this->annualTransactionCount) == 0) {
            return null;
        }
        return $this->annualTransactionCount['value'];
    }

    /**
     * Sets Annual Transaction Count.
     * Maximum number of transactions allowed per annum.
     *
     * Optional.
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps AnnualTransactionCount
     */
    public function setAnnualTransactionCount(?float $annualTransactionCount): void
    {
        $this->annualTransactionCount['value'] = $annualTransactionCount;
    }

    /**
     * Unsets Annual Transaction Count.
     * Maximum number of transactions allowed per annum.
     *
     * Optional.
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetAnnualTransactionCount(): void
    {
        $this->annualTransactionCount = [];
    }

    /**
     * Returns Life Time Transaction Count.
     * Maximum number of transactions allowed in card’s lifetime.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function getLifeTimeTransactionCount(): ?float
    {
        if (count($this->lifeTimeTransactionCount) == 0) {
            return null;
        }
        return $this->lifeTimeTransactionCount['value'];
    }

    /**
     * Sets Life Time Transaction Count.
     * Maximum number of transactions allowed in card’s lifetime.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     *
     * @maps LifeTimeTransactionCount
     */
    public function setLifeTimeTransactionCount(?float $lifeTimeTransactionCount): void
    {
        $this->lifeTimeTransactionCount['value'] = $lifeTimeTransactionCount;
    }

    /**
     * Unsets Life Time Transaction Count.
     * Maximum number of transactions allowed in card’s lifetime.
     *
     * Optional
     *
     * The value ‘0’ represents not set. If Values is passed as null, will be considered as inherited.
     *
     * Valid range: 0 to 9999999999
     */
    public function unsetLifeTimeTransactionCount(): void
    {
        $this->lifeTimeTransactionCount = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->dailySpend)) {
            $json['DailySpend']               = $this->dailySpend['value'];
        }
        if (!empty($this->weeklySpend)) {
            $json['WeeklySpend']              = $this->weeklySpend['value'];
        }
        if (!empty($this->monthlySpend)) {
            $json['MonthlySpend']             = $this->monthlySpend['value'];
        }
        if (!empty($this->perTransactionSpend)) {
            $json['PerTransactionSpend']      = $this->perTransactionSpend['value'];
        }
        if (!empty($this->dailyVolume)) {
            $json['DailyVolume']              = $this->dailyVolume['value'];
        }
        if (!empty($this->weeklyVolume)) {
            $json['WeeklyVolume']             = $this->weeklyVolume['value'];
        }
        if (!empty($this->monthlyVolume)) {
            $json['MonthlyVolume']            = $this->monthlyVolume['value'];
        }
        if (!empty($this->perTransactionVolume)) {
            $json['PerTransactionVolume']     = $this->perTransactionVolume['value'];
        }
        if (!empty($this->dailyTransactionCount)) {
            $json['DailyTransactionCount']    = $this->dailyTransactionCount['value'];
        }
        if (!empty($this->weeklyTransactionCount)) {
            $json['WeeklyTransactionCount']   = $this->weeklyTransactionCount['value'];
        }
        if (!empty($this->monthlyTransactionCount)) {
            $json['MonthlyTransactionCount']  = $this->monthlyTransactionCount['value'];
        }
        if (!empty($this->annualSpend)) {
            $json['AnnualSpend']              = $this->annualSpend['value'];
        }
        if (!empty($this->lifeTimeSpend)) {
            $json['LifeTimeSpend']            = $this->lifeTimeSpend['value'];
        }
        if (!empty($this->annualVolume)) {
            $json['AnnualVolume']             = $this->annualVolume['value'];
        }
        if (!empty($this->lifeTimeVolume)) {
            $json['LifeTimeVolume']           = $this->lifeTimeVolume['value'];
        }
        if (!empty($this->annualTransactionCount)) {
            $json['AnnualTransactionCount']   = $this->annualTransactionCount['value'];
        }
        if (!empty($this->lifeTimeTransactionCount)) {
            $json['LifeTimeTransactionCount'] = $this->lifeTimeTransactionCount['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
