<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

/**
 * This entity models the data that is sent in the https
 */
class OrderCardEnquiry implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $bCOReference = [];

    /**
     * @var array
     */
    private $bCORowNumber = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $cardTypeCode = [];

    /**
     * @var array
     */
    private $cardTypeId = [];

    /**
     * @var array
     */
    private $cardTypeName = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $errorCode = [];

    /**
     * @var array
     */
    private $errorDescription = [];

    /**
     * @var array
     */
    private $gatewaySyncErrorCode = [];

    /**
     * @var array
     */
    private $gatewaySyncErrorDescription = [];

    /**
     * @var array
     */
    private $gatewaySyncStatus = [];

    /**
     * @var int|null
     */
    private $mainReference;

    /**
     * @var int|null
     */
    private $orderCardReference;

    /**
     * @var array
     */
    private $orderStatus = [];

    /**
     * @var int|null
     */
    private $payerId;

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $processedDate = [];

    /**
     * @var array
     */
    private $purchaseCategoryCode = [];

    /**
     * @var array
     */
    private $purchaseCategoryId = [];

    /**
     * @var array
     */
    private $purchaseCategoryName = [];

    /**
     * @var array
     */
    private $submittedDate = [];

    /**
     * @var array
     */
    private $syncProcessedDate = [];

    /**
     * @var array
     */
    private $syncRequestedDate = [];

    /**
     * @var array
     */
    private $vRN = [];

    /**
     * @var array
     */
    private $orderRequestId = [];

    /**
     * @var array
     */
    private $expiryDate = [];

    /**
     * @var array
     */
    private $clientReferenceId = [];

    /**
     * @var array
     */
    private $statusDescription = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * Returns Account Id.
     * Account ID on the card request
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID on the card request
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID on the card request
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * AccountNumber
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * AccountNumber
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * AccountNumber
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns B CO Reference.
     * Bulk card order request refrence numer.<br />
     *
     * This field will be null if the order is not through BCO.
     */
    public function getBCOReference(): ?int
    {
        if (count($this->bCOReference) == 0) {
            return null;
        }
        return $this->bCOReference['value'];
    }

    /**
     * Sets B CO Reference.
     * Bulk card order request refrence numer.<br />
     *
     * This field will be null if the order is not through BCO.
     *
     * @maps BCOReference
     */
    public function setBCOReference(?int $bCOReference): void
    {
        $this->bCOReference['value'] = $bCOReference;
    }

    /**
     * Unsets B CO Reference.
     * Bulk card order request refrence numer.<br />
     *
     * This field will be null if the order is not through BCO.
     */
    public function unsetBCOReference(): void
    {
        $this->bCOReference = [];
    }

    /**
     * Returns B CO Row Number.
     * Row number of the request in the BCO file.<br />
     *
     * This field will be null if the order is not through BCO.
     */
    public function getBCORowNumber(): ?int
    {
        if (count($this->bCORowNumber) == 0) {
            return null;
        }
        return $this->bCORowNumber['value'];
    }

    /**
     * Sets B CO Row Number.
     * Row number of the request in the BCO file.<br />
     *
     * This field will be null if the order is not through BCO.
     *
     * @maps BCORowNumber
     */
    public function setBCORowNumber(?int $bCORowNumber): void
    {
        $this->bCORowNumber['value'] = $bCORowNumber;
    }

    /**
     * Unsets B CO Row Number.
     * Row number of the request in the BCO file.<br />
     *
     * This field will be null if the order is not through BCO.
     */
    public function unsetBCORowNumber(): void
    {
        $this->bCORowNumber = [];
    }

    /**
     * Returns Card Group Id.
     * Card group ID
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card group ID
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card group ID
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id.<br />
     *
     * The field will be null if the card order request is not successly processed.
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card Id.<br />
     *
     * The field will be null if the card order request is not successly processed.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card Id.<br />
     *
     * The field will be null if the card order request is not successly processed.
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Card PAN.
     * Card PAN.<br />
     *
     * Mask PAN (Mask all digits except the Last 6 digits of the PAN).<br />
     *
     * The field will be null if the card order request is not successly processed.
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Card PAN.<br />
     *
     * Mask PAN (Mask all digits except the Last 6 digits of the PAN).<br />
     *
     * The field will be null if the card order request is not successly processed.
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Card PAN.<br />
     *
     * Mask PAN (Mask all digits except the Last 6 digits of the PAN).<br />
     *
     * The field will be null if the card order request is not successly processed.
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns Card Type Code.
     * CardTypeCode<br />
     *
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public function getCardTypeCode(): ?string
    {
        if (count($this->cardTypeCode) == 0) {
            return null;
        }
        return $this->cardTypeCode['value'];
    }

    /**
     * Sets Card Type Code.
     * CardTypeCode<br />
     *
     * ISO code of the card i.e. first 7 digits of the PAN
     *
     * @maps CardTypeCode
     */
    public function setCardTypeCode(?string $cardTypeCode): void
    {
        $this->cardTypeCode['value'] = $cardTypeCode;
    }

    /**
     * Unsets Card Type Code.
     * CardTypeCode<br />
     *
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public function unsetCardTypeCode(): void
    {
        $this->cardTypeCode = [];
    }

    /**
     * Returns Card Type Id.
     * CardTypeId
     */
    public function getCardTypeId(): ?int
    {
        if (count($this->cardTypeId) == 0) {
            return null;
        }
        return $this->cardTypeId['value'];
    }

    /**
     * Sets Card Type Id.
     * CardTypeId
     *
     * @maps CardTypeId
     */
    public function setCardTypeId(?int $cardTypeId): void
    {
        $this->cardTypeId['value'] = $cardTypeId;
    }

    /**
     * Unsets Card Type Id.
     * CardTypeId
     */
    public function unsetCardTypeId(): void
    {
        $this->cardTypeId = [];
    }

    /**
     * Returns Card Type Name.
     * CardTypeName
     */
    public function getCardTypeName(): ?string
    {
        if (count($this->cardTypeName) == 0) {
            return null;
        }
        return $this->cardTypeName['value'];
    }

    /**
     * Sets Card Type Name.
     * CardTypeName
     *
     * @maps CardTypeName
     */
    public function setCardTypeName(?string $cardTypeName): void
    {
        $this->cardTypeName['value'] = $cardTypeName;
    }

    /**
     * Unsets Card Type Name.
     * CardTypeName
     */
    public function unsetCardTypeName(): void
    {
        $this->cardTypeName = [];
    }

    /**
     * Returns Driver Name.
     * Driver name
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver name
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver name
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Error Code.
     * Error code for the order card request.<br />
     *
     * The value will be 0000 if it is processed without errors.
     */
    public function getErrorCode(): ?string
    {
        if (count($this->errorCode) == 0) {
            return null;
        }
        return $this->errorCode['value'];
    }

    /**
     * Sets Error Code.
     * Error code for the order card request.<br />
     *
     * The value will be 0000 if it is processed without errors.
     *
     * @maps ErrorCode
     */
    public function setErrorCode(?string $errorCode): void
    {
        $this->errorCode['value'] = $errorCode;
    }

    /**
     * Unsets Error Code.
     * Error code for the order card request.<br />
     *
     * The value will be 0000 if it is processed without errors.
     */
    public function unsetErrorCode(): void
    {
        $this->errorCode = [];
    }

    /**
     * Returns Error Description.
     * Error description for the order card request.<br />
     *
     * The value will be empty string if it is processed without errors.
     */
    public function getErrorDescription(): ?string
    {
        if (count($this->errorDescription) == 0) {
            return null;
        }
        return $this->errorDescription['value'];
    }

    /**
     * Sets Error Description.
     * Error description for the order card request.<br />
     *
     * The value will be empty string if it is processed without errors.
     *
     * @maps ErrorDescription
     */
    public function setErrorDescription(?string $errorDescription): void
    {
        $this->errorDescription['value'] = $errorDescription;
    }

    /**
     * Unsets Error Description.
     * Error description for the order card request.<br />
     *
     * The value will be empty string if it is processed without errors.
     */
    public function unsetErrorDescription(): void
    {
        $this->errorDescription = [];
    }

    /**
     * Returns Gateway Sync Error Code.
     * Error code for the Gateway sync error.<br />
     *
     * The value will be 0000 if it is processed without errors.
     */
    public function getGatewaySyncErrorCode(): ?string
    {
        if (count($this->gatewaySyncErrorCode) == 0) {
            return null;
        }
        return $this->gatewaySyncErrorCode['value'];
    }

    /**
     * Sets Gateway Sync Error Code.
     * Error code for the Gateway sync error.<br />
     *
     * The value will be 0000 if it is processed without errors.
     *
     * @maps GatewaySyncErrorCode
     */
    public function setGatewaySyncErrorCode(?string $gatewaySyncErrorCode): void
    {
        $this->gatewaySyncErrorCode['value'] = $gatewaySyncErrorCode;
    }

    /**
     * Unsets Gateway Sync Error Code.
     * Error code for the Gateway sync error.<br />
     *
     * The value will be 0000 if it is processed without errors.
     */
    public function unsetGatewaySyncErrorCode(): void
    {
        $this->gatewaySyncErrorCode = [];
    }

    /**
     * Returns Gateway Sync Error Description.
     * Error description for the Gateway sync error.<br />
     *
     * The value will be empty string if it is processed without errors.
     */
    public function getGatewaySyncErrorDescription(): ?string
    {
        if (count($this->gatewaySyncErrorDescription) == 0) {
            return null;
        }
        return $this->gatewaySyncErrorDescription['value'];
    }

    /**
     * Sets Gateway Sync Error Description.
     * Error description for the Gateway sync error.<br />
     *
     * The value will be empty string if it is processed without errors.
     *
     * @maps GatewaySyncErrorDescription
     */
    public function setGatewaySyncErrorDescription(?string $gatewaySyncErrorDescription): void
    {
        $this->gatewaySyncErrorDescription['value'] = $gatewaySyncErrorDescription;
    }

    /**
     * Unsets Gateway Sync Error Description.
     * Error description for the Gateway sync error.<br />
     *
     * The value will be empty string if it is processed without errors.
     */
    public function unsetGatewaySyncErrorDescription(): void
    {
        $this->gatewaySyncErrorDescription = [];
    }

    /**
     * Returns Gateway Sync Status.
     * GatewaySyncStatus<br />
     *
     * Status of the card sync with CFGW.<br />
     *
     * Possible values:<br />
     *
     * -Success<br />
     *
     * -Failed<br />
     *
     * -In Progress<br />
     *
     * -Not Submitted
     */
    public function getGatewaySyncStatus(): ?string
    {
        if (count($this->gatewaySyncStatus) == 0) {
            return null;
        }
        return $this->gatewaySyncStatus['value'];
    }

    /**
     * Sets Gateway Sync Status.
     * GatewaySyncStatus<br />
     *
     * Status of the card sync with CFGW.<br />
     *
     * Possible values:<br />
     *
     * -Success<br />
     *
     * -Failed<br />
     *
     * -In Progress<br />
     *
     * -Not Submitted
     *
     * @maps GatewaySyncStatus
     */
    public function setGatewaySyncStatus(?string $gatewaySyncStatus): void
    {
        $this->gatewaySyncStatus['value'] = $gatewaySyncStatus;
    }

    /**
     * Unsets Gateway Sync Status.
     * GatewaySyncStatus<br />
     *
     * Status of the card sync with CFGW.<br />
     *
     * Possible values:<br />
     *
     * -Success<br />
     *
     * -Failed<br />
     *
     * -In Progress<br />
     *
     * -Not Submitted
     */
    public function unsetGatewaySyncStatus(): void
    {
        $this->gatewaySyncStatus = [];
    }

    /**
     * Returns Main Reference.
     * Main reference number for the order card request.<br />
     *
     * This field will be null if the order is through BCO.
     */
    public function getMainReference(): ?int
    {
        return $this->mainReference;
    }

    /**
     * Sets Main Reference.
     * Main reference number for the order card request.<br />
     *
     * This field will be null if the order is through BCO.
     *
     * @maps MainReference
     */
    public function setMainReference(?int $mainReference): void
    {
        $this->mainReference = $mainReference;
    }

    /**
     * Returns Order Card Reference.
     * Indivitual card reference number for the order card request.<br />
     *
     * This field will be null if the order is through BCO.
     */
    public function getOrderCardReference(): ?int
    {
        return $this->orderCardReference;
    }

    /**
     * Sets Order Card Reference.
     * Indivitual card reference number for the order card request.<br />
     *
     * This field will be null if the order is through BCO.
     *
     * @maps OrderCardReference
     */
    public function setOrderCardReference(?int $orderCardReference): void
    {
        $this->orderCardReference = $orderCardReference;
    }

    /**
     * Returns Order Status.
     * Order status.<br />
     *
     * Possible values:<br />
     *
     * P   Pending<br />
     *
     * I   Picked up for processing<br />
     *
     * PX Failed at Queue but retry attempts pending<br />
     *
     * X Failed  at Queue<br />
     *
     * R Card is processed, awaiting for PAN update.<br />
     *
     * S Processed<br />
     *
     * F Failed
     */
    public function getOrderStatus(): ?string
    {
        if (count($this->orderStatus) == 0) {
            return null;
        }
        return $this->orderStatus['value'];
    }

    /**
     * Sets Order Status.
     * Order status.<br />
     *
     * Possible values:<br />
     *
     * P   Pending<br />
     *
     * I   Picked up for processing<br />
     *
     * PX Failed at Queue but retry attempts pending<br />
     *
     * X Failed  at Queue<br />
     *
     * R Card is processed, awaiting for PAN update.<br />
     *
     * S Processed<br />
     *
     * F Failed
     *
     * @maps OrderStatus
     */
    public function setOrderStatus(?string $orderStatus): void
    {
        $this->orderStatus['value'] = $orderStatus;
    }

    /**
     * Unsets Order Status.
     * Order status.<br />
     *
     * Possible values:<br />
     *
     * P   Pending<br />
     *
     * I   Picked up for processing<br />
     *
     * PX Failed at Queue but retry attempts pending<br />
     *
     * X Failed  at Queue<br />
     *
     * R Card is processed, awaiting for PAN update.<br />
     *
     * S Processed<br />
     *
     * F Failed
     */
    public function unsetOrderStatus(): void
    {
        $this->orderStatus = [];
    }

    /**
     * Returns Payer Id.
     * Payer ID on the card request.
     */
    public function getPayerId(): ?int
    {
        return $this->payerId;
    }

    /**
     * Sets Payer Id.
     * Payer ID on the card request.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId = $payerId;
    }

    /**
     * Returns Payer Number.
     * Payer Number on the card request
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number on the card request
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number on the card request
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Processed Date.
     * Date and time (in cutomers local time) when the card order request is processed<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function getProcessedDate(): ?string
    {
        if (count($this->processedDate) == 0) {
            return null;
        }
        return $this->processedDate['value'];
    }

    /**
     * Sets Processed Date.
     * Date and time (in cutomers local time) when the card order request is processed<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     *
     * @maps ProcessedDate
     */
    public function setProcessedDate(?string $processedDate): void
    {
        $this->processedDate['value'] = $processedDate;
    }

    /**
     * Unsets Processed Date.
     * Date and time (in cutomers local time) when the card order request is processed<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function unsetProcessedDate(): void
    {
        $this->processedDate = [];
    }

    /**
     * Returns Purchase Category Code.
     * PurchaseCategoryCode
     */
    public function getPurchaseCategoryCode(): ?string
    {
        if (count($this->purchaseCategoryCode) == 0) {
            return null;
        }
        return $this->purchaseCategoryCode['value'];
    }

    /**
     * Sets Purchase Category Code.
     * PurchaseCategoryCode
     *
     * @maps PurchaseCategoryCode
     */
    public function setPurchaseCategoryCode(?string $purchaseCategoryCode): void
    {
        $this->purchaseCategoryCode['value'] = $purchaseCategoryCode;
    }

    /**
     * Unsets Purchase Category Code.
     * PurchaseCategoryCode
     */
    public function unsetPurchaseCategoryCode(): void
    {
        $this->purchaseCategoryCode = [];
    }

    /**
     * Returns Purchase Category Id.
     * PurchaseCategoryId <br />
     *
     * Note: Not Purchase code. This is a unique purchase category id assigned
     */
    public function getPurchaseCategoryId(): ?int
    {
        if (count($this->purchaseCategoryId) == 0) {
            return null;
        }
        return $this->purchaseCategoryId['value'];
    }

    /**
     * Sets Purchase Category Id.
     * PurchaseCategoryId <br />
     *
     * Note: Not Purchase code. This is a unique purchase category id assigned
     *
     * @maps PurchaseCategoryId
     */
    public function setPurchaseCategoryId(?int $purchaseCategoryId): void
    {
        $this->purchaseCategoryId['value'] = $purchaseCategoryId;
    }

    /**
     * Unsets Purchase Category Id.
     * PurchaseCategoryId <br />
     *
     * Note: Not Purchase code. This is a unique purchase category id assigned
     */
    public function unsetPurchaseCategoryId(): void
    {
        $this->purchaseCategoryId = [];
    }

    /**
     * Returns Purchase Category Name.
     * PurchaseCategoryName
     */
    public function getPurchaseCategoryName(): ?string
    {
        if (count($this->purchaseCategoryName) == 0) {
            return null;
        }
        return $this->purchaseCategoryName['value'];
    }

    /**
     * Sets Purchase Category Name.
     * PurchaseCategoryName
     *
     * @maps PurchaseCategoryName
     */
    public function setPurchaseCategoryName(?string $purchaseCategoryName): void
    {
        $this->purchaseCategoryName['value'] = $purchaseCategoryName;
    }

    /**
     * Unsets Purchase Category Name.
     * PurchaseCategoryName
     */
    public function unsetPurchaseCategoryName(): void
    {
        $this->purchaseCategoryName = [];
    }

    /**
     * Returns Submitted Date.
     * Date and time (in cutomers local time) when the card order request is submitted.<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function getSubmittedDate(): ?string
    {
        if (count($this->submittedDate) == 0) {
            return null;
        }
        return $this->submittedDate['value'];
    }

    /**
     * Sets Submitted Date.
     * Date and time (in cutomers local time) when the card order request is submitted.<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     *
     * @maps SubmittedDate
     */
    public function setSubmittedDate(?string $submittedDate): void
    {
        $this->submittedDate['value'] = $submittedDate;
    }

    /**
     * Unsets Submitted Date.
     * Date and time (in cutomers local time) when the card order request is submitted.<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function unsetSubmittedDate(): void
    {
        $this->submittedDate = [];
    }

    /**
     * Returns Sync Processed Date.
     * SyncProcessedDate<br />
     *
     * Date and time (in cutomers local time) when the sync card request is processed.<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function getSyncProcessedDate(): ?string
    {
        if (count($this->syncProcessedDate) == 0) {
            return null;
        }
        return $this->syncProcessedDate['value'];
    }

    /**
     * Sets Sync Processed Date.
     * SyncProcessedDate<br />
     *
     * Date and time (in cutomers local time) when the sync card request is processed.<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     *
     * @maps SyncProcessedDate
     */
    public function setSyncProcessedDate(?string $syncProcessedDate): void
    {
        $this->syncProcessedDate['value'] = $syncProcessedDate;
    }

    /**
     * Unsets Sync Processed Date.
     * SyncProcessedDate<br />
     *
     * Date and time (in cutomers local time) when the sync card request is processed.<br />
     *
     * Format: yyyyMMdd HH:mm:ss<br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function unsetSyncProcessedDate(): void
    {
        $this->syncProcessedDate = [];
    }

    /**
     * Returns Sync Requested Date.
     * SyncRequestedDate<br />
     *
     * Date and time (in cutomers local time) when the sync card request is submitted.<br />
     *
     * Format: yyyyMMdd HH:mm:ss <br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function getSyncRequestedDate(): ?string
    {
        if (count($this->syncRequestedDate) == 0) {
            return null;
        }
        return $this->syncRequestedDate['value'];
    }

    /**
     * Sets Sync Requested Date.
     * SyncRequestedDate<br />
     *
     * Date and time (in cutomers local time) when the sync card request is submitted.<br />
     *
     * Format: yyyyMMdd HH:mm:ss <br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     *
     * @maps SyncRequestedDate
     */
    public function setSyncRequestedDate(?string $syncRequestedDate): void
    {
        $this->syncRequestedDate['value'] = $syncRequestedDate;
    }

    /**
     * Unsets Sync Requested Date.
     * SyncRequestedDate<br />
     *
     * Date and time (in cutomers local time) when the sync card request is submitted.<br />
     *
     * Format: yyyyMMdd HH:mm:ss <br />
     *
     * Note: The client application to convert the string to appropriate date/time type.
     */
    public function unsetSyncRequestedDate(): void
    {
        $this->syncRequestedDate = [];
    }

    /**
     * Returns V RN.
     * Vehicle registration number
     */
    public function getVRN(): ?string
    {
        if (count($this->vRN) == 0) {
            return null;
        }
        return $this->vRN['value'];
    }

    /**
     * Sets V RN.
     * Vehicle registration number
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN['value'] = $vRN;
    }

    /**
     * Unsets V RN.
     * Vehicle registration number
     */
    public function unsetVRN(): void
    {
        $this->vRN = [];
    }

    /**
     * Returns Order Request Id.
     * Unique Id of the Original Order card request, the status of which is enquired by this API. <br />
     *
     * This is returned for end to end traceability of a request based on the original Order Card request.
     */
    public function getOrderRequestId(): ?string
    {
        if (count($this->orderRequestId) == 0) {
            return null;
        }
        return $this->orderRequestId['value'];
    }

    /**
     * Sets Order Request Id.
     * Unique Id of the Original Order card request, the status of which is enquired by this API. <br />
     *
     * This is returned for end to end traceability of a request based on the original Order Card request.
     *
     * @maps OrderRequestId
     */
    public function setOrderRequestId(?string $orderRequestId): void
    {
        $this->orderRequestId['value'] = $orderRequestId;
    }

    /**
     * Unsets Order Request Id.
     * Unique Id of the Original Order card request, the status of which is enquired by this API. <br />
     *
     * This is returned for end to end traceability of a request based on the original Order Card request.
     */
    public function unsetOrderRequestId(): void
    {
        $this->orderRequestId = [];
    }

    /**
     * Returns Expiry Date.
     * Expiry date of the card.<br />
     *
     * Format: MMyy<br />
     *
     * (Clients to convert this to appropriate DateTime type.)<br />
     *
     * Note: This is the Expiry Date saved.<br />
     *
     * If the Order Card request is still not processed, i.e.PAN is not yet issued, this field will be null
     * or empty. <br />
     *
     * For a Card Order with a custom Expiry Date passed in the request, this value will be returned after
     * it is updated successfully.
     */
    public function getExpiryDate(): ?string
    {
        if (count($this->expiryDate) == 0) {
            return null;
        }
        return $this->expiryDate['value'];
    }

    /**
     * Sets Expiry Date.
     * Expiry date of the card.<br />
     *
     * Format: MMyy<br />
     *
     * (Clients to convert this to appropriate DateTime type.)<br />
     *
     * Note: This is the Expiry Date saved.<br />
     *
     * If the Order Card request is still not processed, i.e.PAN is not yet issued, this field will be null
     * or empty. <br />
     *
     * For a Card Order with a custom Expiry Date passed in the request, this value will be returned after
     * it is updated successfully.
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate['value'] = $expiryDate;
    }

    /**
     * Unsets Expiry Date.
     * Expiry date of the card.<br />
     *
     * Format: MMyy<br />
     *
     * (Clients to convert this to appropriate DateTime type.)<br />
     *
     * Note: This is the Expiry Date saved.<br />
     *
     * If the Order Card request is still not processed, i.e.PAN is not yet issued, this field will be null
     * or empty. <br />
     *
     * For a Card Order with a custom Expiry Date passed in the request, this value will be returned after
     * it is updated successfully.
     */
    public function unsetExpiryDate(): void
    {
        $this->expiryDate = [];
    }

    /**
     * Returns Client Reference Id.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     */
    public function getClientReferenceId(): ?string
    {
        if (count($this->clientReferenceId) == 0) {
            return null;
        }
        return $this->clientReferenceId['value'];
    }

    /**
     * Sets Client Reference Id.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     *
     * @maps ClientReferenceId
     */
    public function setClientReferenceId(?string $clientReferenceId): void
    {
        $this->clientReferenceId['value'] = $clientReferenceId;
    }

    /**
     * Unsets Client Reference Id.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     */
    public function unsetClientReferenceId(): void
    {
        $this->clientReferenceId = [];
    }

    /**
     * Returns Status Description.
     * Order status.<br />
     *
     * Possible values<br />
     *
     * Success<br />
     *
     * Failed<br />
     *
     * InProgress<br />
     */
    public function getStatusDescription(): ?string
    {
        if (count($this->statusDescription) == 0) {
            return null;
        }
        return $this->statusDescription['value'];
    }

    /**
     * Sets Status Description.
     * Order status.<br />
     *
     * Possible values<br />
     *
     * Success<br />
     *
     * Failed<br />
     *
     * InProgress<br />
     *
     * @maps StatusDescription
     */
    public function setStatusDescription(?string $statusDescription): void
    {
        $this->statusDescription['value'] = $statusDescription;
    }

    /**
     * Unsets Status Description.
     * Order status.<br />
     *
     * Possible values<br />
     *
     * Success<br />
     *
     * Failed<br />
     *
     * InProgress<br />
     */
    public function unsetStatusDescription(): void
    {
        $this->statusDescription = [];
    }

    /**
     * Returns Col Co Id.
     * Colcoid
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Colcoid
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Colcoid
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']                   = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']               = $this->accountNumber['value'];
        }
        if (!empty($this->bCOReference)) {
            $json['BCOReference']                = $this->bCOReference['value'];
        }
        if (!empty($this->bCORowNumber)) {
            $json['BCORowNumber']                = $this->bCORowNumber['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']                 = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']               = $this->cardGroupName['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                      = $this->cardId['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']                     = $this->cardPAN['value'];
        }
        if (!empty($this->cardTypeCode)) {
            $json['CardTypeCode']                = $this->cardTypeCode['value'];
        }
        if (!empty($this->cardTypeId)) {
            $json['CardTypeId']                  = $this->cardTypeId['value'];
        }
        if (!empty($this->cardTypeName)) {
            $json['CardTypeName']                = $this->cardTypeName['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                  = $this->driverName['value'];
        }
        if (!empty($this->errorCode)) {
            $json['ErrorCode']                   = $this->errorCode['value'];
        }
        if (!empty($this->errorDescription)) {
            $json['ErrorDescription']            = $this->errorDescription['value'];
        }
        if (!empty($this->gatewaySyncErrorCode)) {
            $json['GatewaySyncErrorCode']        = $this->gatewaySyncErrorCode['value'];
        }
        if (!empty($this->gatewaySyncErrorDescription)) {
            $json['GatewaySyncErrorDescription'] = $this->gatewaySyncErrorDescription['value'];
        }
        if (!empty($this->gatewaySyncStatus)) {
            $json['GatewaySyncStatus']           = $this->gatewaySyncStatus['value'];
        }
        if (isset($this->mainReference)) {
            $json['MainReference']               = $this->mainReference;
        }
        if (isset($this->orderCardReference)) {
            $json['OrderCardReference']          = $this->orderCardReference;
        }
        if (!empty($this->orderStatus)) {
            $json['OrderStatus']                 = $this->orderStatus['value'];
        }
        if (isset($this->payerId)) {
            $json['PayerId']                     = $this->payerId;
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                 = $this->payerNumber['value'];
        }
        if (!empty($this->processedDate)) {
            $json['ProcessedDate']               = $this->processedDate['value'];
        }
        if (!empty($this->purchaseCategoryCode)) {
            $json['PurchaseCategoryCode']        = $this->purchaseCategoryCode['value'];
        }
        if (!empty($this->purchaseCategoryId)) {
            $json['PurchaseCategoryId']          = $this->purchaseCategoryId['value'];
        }
        if (!empty($this->purchaseCategoryName)) {
            $json['PurchaseCategoryName']        = $this->purchaseCategoryName['value'];
        }
        if (!empty($this->submittedDate)) {
            $json['SubmittedDate']               = $this->submittedDate['value'];
        }
        if (!empty($this->syncProcessedDate)) {
            $json['SyncProcessedDate']           = $this->syncProcessedDate['value'];
        }
        if (!empty($this->syncRequestedDate)) {
            $json['SyncRequestedDate']           = $this->syncRequestedDate['value'];
        }
        if (!empty($this->vRN)) {
            $json['VRN']                         = $this->vRN['value'];
        }
        if (!empty($this->orderRequestId)) {
            $json['OrderRequestId']              = $this->orderRequestId['value'];
        }
        if (!empty($this->expiryDate)) {
            $json['ExpiryDate']                  = $this->expiryDate['value'];
        }
        if (!empty($this->clientReferenceId)) {
            $json['ClientReferenceId']           = $this->clientReferenceId['value'];
        }
        if (!empty($this->statusDescription)) {
            $json['StatusDescription']           = $this->statusDescription['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                     = $this->colCoId['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
