<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class SummaryOfBundleResponseDataItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $countOfCardsNotInBundle = [];

    /**
     * @var SummaryOfBundleResponseDataItemsCardBundlesItems[]|null
     */
    private $cardBundles;

    /**
     * Returns Payer Id.
     * Payer Id of the bundles and cards.
     *
     * Example: 123456
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id of the bundles and cards.
     *
     * Example: 123456
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id of the bundles and cards.
     *
     * Example: 123456
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the bundles and cards.
     *
     * Example: GB000000123
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the bundles and cards.
     *
     * Example: GB000000123
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the bundles and cards.
     *
     * Example: GB000000123
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Account Id.
     * Account ID of the bundle.
     *
     * Example: 123456
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the bundle.
     *
     * Example: 123456
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the bundle.
     *
     * Example: 123456
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the bundle.
     *
     * Example: GB000000123
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the bundle.
     *
     * Example: GB000000123
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the bundle.
     *
     * Example: GB000000123
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Count of Cards Not in Bundle.
     * Count of cards that are not part of the bundle in a given account.
     */
    public function getCountOfCardsNotInBundle(): ?int
    {
        if (count($this->countOfCardsNotInBundle) == 0) {
            return null;
        }
        return $this->countOfCardsNotInBundle['value'];
    }

    /**
     * Sets Count of Cards Not in Bundle.
     * Count of cards that are not part of the bundle in a given account.
     *
     * @maps CountOfCardsNotInBundle
     */
    public function setCountOfCardsNotInBundle(?int $countOfCardsNotInBundle): void
    {
        $this->countOfCardsNotInBundle['value'] = $countOfCardsNotInBundle;
    }

    /**
     * Unsets Count of Cards Not in Bundle.
     * Count of cards that are not part of the bundle in a given account.
     */
    public function unsetCountOfCardsNotInBundle(): void
    {
        $this->countOfCardsNotInBundle = [];
    }

    /**
     * Returns Card Bundles.
     * List of Card Bundles
     *
     * @return SummaryOfBundleResponseDataItemsCardBundlesItems[]|null
     */
    public function getCardBundles(): ?array
    {
        return $this->cardBundles;
    }

    /**
     * Sets Card Bundles.
     * List of Card Bundles
     *
     * @maps CardBundles
     *
     * @param SummaryOfBundleResponseDataItemsCardBundlesItems[]|null $cardBundles
     */
    public function setCardBundles(?array $cardBundles): void
    {
        $this->cardBundles = $cardBundles;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->payerId)) {
            $json['PayerId']                 = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']             = $this->payerNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']               = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']           = $this->accountNumber['value'];
        }
        if (!empty($this->countOfCardsNotInBundle)) {
            $json['CountOfCardsNotInBundle'] = $this->countOfCardsNotInBundle['value'];
        }
        if (isset($this->cardBundles)) {
            $json['CardBundles']             = $this->cardBundles;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
