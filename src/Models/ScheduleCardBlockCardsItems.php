<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class ScheduleCardBlockCardsItems implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var int|null
     */
    private $colCoId;

    /**
     * @var int|null
     */
    private $accountId;

    /**
     * @var string|null
     */
    private $accountNumber;

    /**
     * @var int|null
     */
    private $payerId;

    /**
     * @var string|null
     */
    private $payerNumber;

    /**
     * @var int|null
     */
    private $cardId;

    /**
     * @var string|null
     */
    private $pAN;

    /**
     * @var string|null
     */
    private $cardExpiryDate;

    /**
     * @var string
     */
    private $action;

    /**
     * @var string|null
     */
    private $fromDate;

    /**
     * @var string|null
     */
    private $toDate;

    /**
     * @var array
     */
    private $caller = [];

    /**
     * @var bool|null
     */
    private $notifyCaller;

    /**
     * @param string $action
     */
    public function __construct(string $action)
    {
        $this->action = $action;
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     */
    public function getColCoId(): ?int
    {
        return $this->colCoId;
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId = $colCoId;
    }

    /**
     * Returns Account Id.
     * Account Id of the customer.
     *
     * Optional if AccountNumber is passed, else Mandatory.
     */
    public function getAccountId(): ?int
    {
        return $this->accountId;
    }

    /**
     * Sets Account Id.
     * Account Id of the customer.
     *
     * Optional if AccountNumber is passed, else Mandatory.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId = $accountId;
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     *
     * Optional if AccountId is passed, else Mandatory.
     */
    public function getAccountNumber(): ?string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     *
     * Optional if AccountId is passed, else Mandatory.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Payer Id.
     * Payer id of the customer.
     *
     * Optional if PayerNumber is passed, else Mandatory.
     *
     * Example: 123456
     */
    public function getPayerId(): ?int
    {
        return $this->payerId;
    }

    /**
     * Sets Payer Id.
     * Payer id of the customer.
     *
     * Optional if PayerNumber is passed, else Mandatory.
     *
     * Example: 123456
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId = $payerId;
    }

    /**
     * Returns Payer Number.
     * PayerNumber of the customer.
     *
     * Optional if PayerId is passed, else Mandatory.
     */
    public function getPayerNumber(): ?string
    {
        return $this->payerNumber;
    }

    /**
     * Sets Payer Number.
     * PayerNumber of the customer.
     *
     * Optional if PayerId is passed, else Mandatory.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber = $payerNumber;
    }

    /**
     * Returns Card Id.
     * Unique Id of the card.
     *
     * Optional if PAN is passed, else Mandatory.
     */
    public function getCardId(): ?int
    {
        return $this->cardId;
    }

    /**
     * Sets Card Id.
     * Unique Id of the card.
     *
     * Optional if PAN is passed, else Mandatory.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId = $cardId;
    }

    /**
     * Returns P AN.
     * PAN of the card.
     *
     * Optional if CardId is passed, else Mandatory.
     */
    public function getPAN(): ?string
    {
        return $this->pAN;
    }

    /**
     * Sets P AN.
     * PAN of the card.
     *
     * Optional if CardId is passed, else Mandatory.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN = $pAN;
    }

    /**
     * Returns Card Expiry Date.
     * Expiry date of the card.
     *
     * Optional if CardId is passed, else Mandatory.
     *
     * Format: yyyyMMdd
     *
     * Example: 20170930
     */
    public function getCardExpiryDate(): ?string
    {
        return $this->cardExpiryDate;
    }

    /**
     * Sets Card Expiry Date.
     * Expiry date of the card.
     *
     * Optional if CardId is passed, else Mandatory.
     *
     * Format: yyyyMMdd
     *
     * Example: 20170930
     *
     * @maps CardExpiryDate
     */
    public function setCardExpiryDate(?string $cardExpiryDate): void
    {
        $this->cardExpiryDate = $cardExpiryDate;
    }

    /**
     * Returns Action.
     * Action
     *
     * Mandatory
     *
     * Possible values are:
     *
     * • AddOrUpdate – adds a new request or updates any existing requests, with overlapping dates, for the
     * card
     *
     * • AddAndOverwriteAll - all the existing requests of the given card will be removed and a new request
     * with the specified FromDate and ToDate will be added.
     *
     * • Delete – deletes any existing request with the same start date and end date for the card
     *
     * • DeleteAll – deletes all saved future dated requests (all block and unblock requests) of the card.
     */
    public function getAction(): string
    {
        return $this->action;
    }

    /**
     * Sets Action.
     * Action
     *
     * Mandatory
     *
     * Possible values are:
     *
     * • AddOrUpdate – adds a new request or updates any existing requests, with overlapping dates, for the
     * card
     *
     * • AddAndOverwriteAll - all the existing requests of the given card will be removed and a new request
     * with the specified FromDate and ToDate will be added.
     *
     * • Delete – deletes any existing request with the same start date and end date for the card
     *
     * • DeleteAll – deletes all saved future dated requests (all block and unblock requests) of the card.
     *
     * @required
     * @maps Action
     */
    public function setAction(string $action): void
    {
        $this->action = $action;
    }

    /**
     * Returns From Date.
     * Effective start date of Block / Unblock
     *
     * Allowed Formats: –
     *
     * • yyyyMMdd
     *
     * • yyyyMMdd HH:mm
     *
     * Eg: 20230512 14:30, 20230512
     *
     * Optional
     *
     * Default value:
     *
     * •  If the card status is “Active” then Current date & Time
     *
     * • If the card status is “TemporaryBlock (Customer)” then null.
     *
     * Note:
     *
     * • Time is considered only when “IsTimeSupported” is true else it will be treated as a date.
     *
     * • Time will be passed in UTC time-zone.
     *
     * • If the Card Status is “Temporary Block (Customer)” and FromDate is provided – The fromdate & time
     * is considered as starting period of unblock request.
     */
    public function getFromDate(): ?string
    {
        return $this->fromDate;
    }

    /**
     * Sets From Date.
     * Effective start date of Block / Unblock
     *
     * Allowed Formats: –
     *
     * • yyyyMMdd
     *
     * • yyyyMMdd HH:mm
     *
     * Eg: 20230512 14:30, 20230512
     *
     * Optional
     *
     * Default value:
     *
     * •  If the card status is “Active” then Current date & Time
     *
     * • If the card status is “TemporaryBlock (Customer)” then null.
     *
     * Note:
     *
     * • Time is considered only when “IsTimeSupported” is true else it will be treated as a date.
     *
     * • Time will be passed in UTC time-zone.
     *
     * • If the Card Status is “Temporary Block (Customer)” and FromDate is provided – The fromdate & time
     * is considered as starting period of unblock request.
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate = $fromDate;
    }

    /**
     * Returns To Date.
     * Effective end date of Block / Unblock
     *
     * Allowed Formats: –
     *
     * • yyyyMMdd
     *
     * • yyyyMMdd HH:mm
     *
     * Eg: 20230512 14:30, 20230512
     *
     * Optional – When the Card status is Active else mandatory.
     *
     * When not provided, the card will remain blocked until manually unblocked.
     *
     * Note:
     *
     * • Time is considered only when the “IsTimeSupported” flag is set as true, else it will be considered
     * as only date.
     *
     * • Date & Time passed in the request will be considered in UTC time-zone.
     *
     * • If the card is currently in ‘Temporary Block (Customer)’ status, then this date is treated as the
     * unblock date and is mandatory.
     *
     * • If the Card Status is “Temporary Block (Customer)” and FromDate & ToDate is provided - The request
     * will be considered as a scheduled specific period unblock request.
     */
    public function getToDate(): ?string
    {
        return $this->toDate;
    }

    /**
     * Sets To Date.
     * Effective end date of Block / Unblock
     *
     * Allowed Formats: –
     *
     * • yyyyMMdd
     *
     * • yyyyMMdd HH:mm
     *
     * Eg: 20230512 14:30, 20230512
     *
     * Optional – When the Card status is Active else mandatory.
     *
     * When not provided, the card will remain blocked until manually unblocked.
     *
     * Note:
     *
     * • Time is considered only when the “IsTimeSupported” flag is set as true, else it will be considered
     * as only date.
     *
     * • Date & Time passed in the request will be considered in UTC time-zone.
     *
     * • If the card is currently in ‘Temporary Block (Customer)’ status, then this date is treated as the
     * unblock date and is mandatory.
     *
     * • If the Card Status is “Temporary Block (Customer)” and FromDate & ToDate is provided - The request
     * will be considered as a scheduled specific period unblock request.
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate = $toDate;
    }

    /**
     * Returns Caller.
     * The caller to be notified with the status of the scheduled card block / unblock request.
     *
     * Mandatory, if NotifyCaller is true.
     *
     * Maximum field length: 20
     */
    public function getCaller(): ?string
    {
        if (count($this->caller) == 0) {
            return null;
        }
        return $this->caller['value'];
    }

    /**
     * Sets Caller.
     * The caller to be notified with the status of the scheduled card block / unblock request.
     *
     * Mandatory, if NotifyCaller is true.
     *
     * Maximum field length: 20
     *
     * @maps Caller
     */
    public function setCaller(?string $caller): void
    {
        $this->caller['value'] = $caller;
    }

    /**
     * Unsets Caller.
     * The caller to be notified with the status of the scheduled card block / unblock request.
     *
     * Mandatory, if NotifyCaller is true.
     *
     * Maximum field length: 20
     */
    public function unsetCaller(): void
    {
        $this->caller = [];
    }

    /**
     * Returns Notify Caller.
     * True/False.
     *
     * Optional.
     *
     * Default: False
     *
     * If true, the caller would be notified back with the status as success or failure after the scheduled
     * card block / unblock request is processed.
     */
    public function getNotifyCaller(): ?bool
    {
        return $this->notifyCaller;
    }

    /**
     * Sets Notify Caller.
     * True/False.
     *
     * Optional.
     *
     * Default: False
     *
     * If true, the caller would be notified back with the status as success or failure after the scheduled
     * card block / unblock request is processed.
     *
     * @maps NotifyCaller
     */
    public function setNotifyCaller(?bool $notifyCaller): void
    {
        $this->notifyCaller = $notifyCaller;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->colCoCode)) {
            $json['ColCoCode']      = $this->colCoCode;
        }
        if (isset($this->colCoId)) {
            $json['ColCoId']        = $this->colCoId;
        }
        if (isset($this->accountId)) {
            $json['AccountId']      = $this->accountId;
        }
        if (isset($this->accountNumber)) {
            $json['AccountNumber']  = $this->accountNumber;
        }
        if (isset($this->payerId)) {
            $json['PayerId']        = $this->payerId;
        }
        if (isset($this->payerNumber)) {
            $json['PayerNumber']    = $this->payerNumber;
        }
        if (isset($this->cardId)) {
            $json['CardId']         = $this->cardId;
        }
        if (isset($this->pAN)) {
            $json['PAN']            = $this->pAN;
        }
        if (isset($this->cardExpiryDate)) {
            $json['CardExpiryDate'] = $this->cardExpiryDate;
        }
        $json['Action']             = $this->action;
        if (isset($this->fromDate)) {
            $json['FromDate']       = $this->fromDate;
        }
        if (isset($this->toDate)) {
            $json['ToDate']         = $this->toDate;
        }
        if (!empty($this->caller)) {
            $json['Caller']         = $this->caller['value'];
        }
        if (isset($this->notifyCaller)) {
            $json['NotifyCaller']   = $this->notifyCaller;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
