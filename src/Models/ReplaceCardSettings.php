<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

/**
 * Request entity object for ReplaceCardSettings
 */
class ReplaceCardSettings implements \JsonSerializable
{
    /**
     * @var array
     */
    private $selfSelectedEncryptedPIN = [];

    /**
     * @var array
     */
    private $selfSelectedPINKeyID = [];

    /**
     * @var array
     */
    private $selfSelectedPINSessionKey = [];

    /**
     * @var bool|null
     */
    private $validateFleetId;

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var int|null
     */
    private $cardDeliveryType;

    /**
     * @var array
     */
    private $deliveryContactTitle = [];

    /**
     * @var array
     */
    private $deliveryContactName = [];

    /**
     * @var array
     */
    private $deliveryCompanyName = [];

    /**
     * @var array
     */
    private $deliveryAddressLine1 = [];

    /**
     * @var array
     */
    private $deliveryAddressLine2 = [];

    /**
     * @var array
     */
    private $deliveryAddressLine3 = [];

    /**
     * @var array
     */
    private $deliveryZipCode = [];

    /**
     * @var array
     */
    private $deliveryCity = [];

    /**
     * @var array
     */
    private $deliveryRegionId = [];

    /**
     * @var array
     */
    private $deliveryRegion = [];

    /**
     * @var array
     */
    private $deliveryCountry = [];

    /**
     * @var array
     */
    private $deliveryCountryId = [];

    /**
     * @var string|null
     */
    private $phoneNumber;

    /**
     * @var array
     */
    private $emailAddress = [];

    /**
     * @var array
     */
    private $pINDeliveryAddressType = [];

    /**
     * @var array
     */
    private $pINAdviceType = [];

    /**
     * @var array
     */
    private $pINDeliveryContactTitle = [];

    /**
     * @var array
     */
    private $pINDeliveryContactName = [];

    /**
     * @var array
     */
    private $pINDeliveryCompanyName = [];

    /**
     * @var array
     */
    private $pINDeliveryAddressLine1 = [];

    /**
     * @var array
     */
    private $pINDeliveryAddressLine2 = [];

    /**
     * @var array
     */
    private $pINDeliveryAddressLine3 = [];

    /**
     * @var array
     */
    private $pINDeliveryZipCode = [];

    /**
     * @var array
     */
    private $pINDeliveryCity = [];

    /**
     * @var array
     */
    private $pINDeliveryRegionId = [];

    /**
     * @var array
     */
    private $pINDeliveryRegion = [];

    /**
     * @var array
     */
    private $pINDeliveryCountry = [];

    /**
     * @var array
     */
    private $pINDeliveryCountryId = [];

    /**
     * @var array
     */
    private $pINPhoneNumber = [];

    /**
     * @var array
     */
    private $pINEmailAddress = [];

    /**
     * @var bool|null
     */
    private $saveForPINReminder;

    /**
     * @var bool|null
     */
    private $saveForCardReissue;

    /**
     * @var array
     */
    private $expiryDate = [];

    /**
     * Returns Self Selected Encrypted PIN.
     * The encrypted value of self-selected PIN.<br />
     * Optional – When not provided, the PIN will be auto generated(if the card token type supports PIN)
     * and delivered based on the given PIN delivery option.<br />
     * Max Length: 256
     */
    public function getSelfSelectedEncryptedPIN(): ?string
    {
        if (count($this->selfSelectedEncryptedPIN) == 0) {
            return null;
        }
        return $this->selfSelectedEncryptedPIN['value'];
    }

    /**
     * Sets Self Selected Encrypted PIN.
     * The encrypted value of self-selected PIN.<br />
     * Optional – When not provided, the PIN will be auto generated(if the card token type supports PIN)
     * and delivered based on the given PIN delivery option.<br />
     * Max Length: 256
     *
     * @maps SelfSelectedEncryptedPIN
     */
    public function setSelfSelectedEncryptedPIN(?string $selfSelectedEncryptedPIN): void
    {
        $this->selfSelectedEncryptedPIN['value'] = $selfSelectedEncryptedPIN;
    }

    /**
     * Unsets Self Selected Encrypted PIN.
     * The encrypted value of self-selected PIN.<br />
     * Optional – When not provided, the PIN will be auto generated(if the card token type supports PIN)
     * and delivered based on the given PIN delivery option.<br />
     * Max Length: 256
     */
    public function unsetSelfSelectedEncryptedPIN(): void
    {
        $this->selfSelectedEncryptedPIN = [];
    }

    /**
     * Returns Self Selected PIN Key ID.
     * KeyId of the PIN encrypted value.<br />
     * Mandatory, if opted for self-selected PIN else optional.<br />
     * Max Length: 30
     */
    public function getSelfSelectedPINKeyID(): ?string
    {
        if (count($this->selfSelectedPINKeyID) == 0) {
            return null;
        }
        return $this->selfSelectedPINKeyID['value'];
    }

    /**
     * Sets Self Selected PIN Key ID.
     * KeyId of the PIN encrypted value.<br />
     * Mandatory, if opted for self-selected PIN else optional.<br />
     * Max Length: 30
     *
     * @maps SelfSelectedPINKeyID
     */
    public function setSelfSelectedPINKeyID(?string $selfSelectedPINKeyID): void
    {
        $this->selfSelectedPINKeyID['value'] = $selfSelectedPINKeyID;
    }

    /**
     * Unsets Self Selected PIN Key ID.
     * KeyId of the PIN encrypted value.<br />
     * Mandatory, if opted for self-selected PIN else optional.<br />
     * Max Length: 30
     */
    public function unsetSelfSelectedPINKeyID(): void
    {
        $this->selfSelectedPINKeyID = [];
    }

    /**
     * Returns Self Selected PIN Session Key.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.<br />
     * The encode message forms are provided to clients by another API (“TCS”).<br />
     * Instructions to encrypt the PIN is covered in the related API specifications document.<br />
     * Mandatory –If opted for self-selected PIN else optional.
     * Max Length: 1024
     */
    public function getSelfSelectedPINSessionKey(): ?string
    {
        if (count($this->selfSelectedPINSessionKey) == 0) {
            return null;
        }
        return $this->selfSelectedPINSessionKey['value'];
    }

    /**
     * Sets Self Selected PIN Session Key.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.<br />
     * The encode message forms are provided to clients by another API (“TCS”).<br />
     * Instructions to encrypt the PIN is covered in the related API specifications document.<br />
     * Mandatory –If opted for self-selected PIN else optional.
     * Max Length: 1024
     *
     * @maps SelfSelectedPINSessionKey
     */
    public function setSelfSelectedPINSessionKey(?string $selfSelectedPINSessionKey): void
    {
        $this->selfSelectedPINSessionKey['value'] = $selfSelectedPINSessionKey;
    }

    /**
     * Unsets Self Selected PIN Session Key.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.<br />
     * The encode message forms are provided to clients by another API (“TCS”).<br />
     * Instructions to encrypt the PIN is covered in the related API specifications document.<br />
     * Mandatory –If opted for self-selected PIN else optional.
     * Max Length: 1024
     */
    public function unsetSelfSelectedPINSessionKey(): void
    {
        $this->selfSelectedPINSessionKey = [];
    }

    /**
     * Returns Validate Fleet Id.
     * True/False.<br />
     * Optional <br />
     * Default: False<br />
     * For cards ordered with Validate Fleet Id parameter set to true, CFGW will be notified to enable this
     * validation for the card.<br />
     * Note: When “FleetIdInputRequired” is not set on the card, validate fleet id will be considered false
     * regardless of the value passed on this parameter.
     */
    public function getValidateFleetId(): ?bool
    {
        return $this->validateFleetId;
    }

    /**
     * Sets Validate Fleet Id.
     * True/False.<br />
     * Optional <br />
     * Default: False<br />
     * For cards ordered with Validate Fleet Id parameter set to true, CFGW will be notified to enable this
     * validation for the card.<br />
     * Note: When “FleetIdInputRequired” is not set on the card, validate fleet id will be considered false
     * regardless of the value passed on this parameter.
     *
     * @maps ValidateFleetId
     */
    public function setValidateFleetId(?bool $validateFleetId): void
    {
        $this->validateFleetId = $validateFleetId;
    }

    /**
     * Returns Card Group Id.
     * Existing Card Group ID, under which the replacement card is to be created.<br />
     * Pass “-1” if the replacement card should not be assigned to any card group.<br />
     * Optional <br />
     * If not provided, the replacement card will be created under the same card group as the current card.
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Existing Card Group ID, under which the replacement card is to be created.<br />
     * Pass “-1” if the replacement card should not be assigned to any card group.<br />
     * Optional <br />
     * If not provided, the replacement card will be created under the same card group as the current card.
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Existing Card Group ID, under which the replacement card is to be created.<br />
     * Pass “-1” if the replacement card should not be assigned to any card group.<br />
     * Optional <br />
     * If not provided, the replacement card will be created under the same card group as the current card.
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Delivery Type.
     * Card delivery type.<br />
     * Mandatory <br />
     * Allowed Value: <br />
     * 1.    Customer Address(Default) <br />
     * 2.    New Delivery Address <br />
     * 3.    Old Card Address
     */
    public function getCardDeliveryType(): ?int
    {
        return $this->cardDeliveryType;
    }

    /**
     * Sets Card Delivery Type.
     * Card delivery type.<br />
     * Mandatory <br />
     * Allowed Value: <br />
     * 1.    Customer Address(Default) <br />
     * 2.    New Delivery Address <br />
     * 3.    Old Card Address
     *
     * @maps CardDeliveryType
     */
    public function setCardDeliveryType(?int $cardDeliveryType): void
    {
        $this->cardDeliveryType = $cardDeliveryType;
    }

    /**
     * Returns Delivery Contact Title.
     * Title of the contact person. <br />
     * Optional<br />
     * Max field length: 10
     */
    public function getDeliveryContactTitle(): ?string
    {
        if (count($this->deliveryContactTitle) == 0) {
            return null;
        }
        return $this->deliveryContactTitle['value'];
    }

    /**
     * Sets Delivery Contact Title.
     * Title of the contact person. <br />
     * Optional<br />
     * Max field length: 10
     *
     * @maps DeliveryContactTitle
     */
    public function setDeliveryContactTitle(?string $deliveryContactTitle): void
    {
        $this->deliveryContactTitle['value'] = $deliveryContactTitle;
    }

    /**
     * Unsets Delivery Contact Title.
     * Title of the contact person. <br />
     * Optional<br />
     * Max field length: 10
     */
    public function unsetDeliveryContactTitle(): void
    {
        $this->deliveryContactTitle = [];
    }

    /**
     * Returns Delivery Contact Name.
     * Name of the contact person <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 50
     */
    public function getDeliveryContactName(): ?string
    {
        if (count($this->deliveryContactName) == 0) {
            return null;
        }
        return $this->deliveryContactName['value'];
    }

    /**
     * Sets Delivery Contact Name.
     * Name of the contact person <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 50
     *
     * @maps DeliveryContactName
     */
    public function setDeliveryContactName(?string $deliveryContactName): void
    {
        $this->deliveryContactName['value'] = $deliveryContactName;
    }

    /**
     * Unsets Delivery Contact Name.
     * Name of the contact person <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 50
     */
    public function unsetDeliveryContactName(): void
    {
        $this->deliveryContactName = [];
    }

    /**
     * Returns Delivery Company Name.
     * Company name <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.
     * Max field length: 50
     */
    public function getDeliveryCompanyName(): ?string
    {
        if (count($this->deliveryCompanyName) == 0) {
            return null;
        }
        return $this->deliveryCompanyName['value'];
    }

    /**
     * Sets Delivery Company Name.
     * Company name <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.
     * Max field length: 50
     *
     * @maps DeliveryCompanyName
     */
    public function setDeliveryCompanyName(?string $deliveryCompanyName): void
    {
        $this->deliveryCompanyName['value'] = $deliveryCompanyName;
    }

    /**
     * Unsets Delivery Company Name.
     * Company name <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.
     * Max field length: 50
     */
    public function unsetDeliveryCompanyName(): void
    {
        $this->deliveryCompanyName = [];
    }

    /**
     * Returns Delivery Address Line 1.
     * Address line 1 <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 40
     */
    public function getDeliveryAddressLine1(): ?string
    {
        if (count($this->deliveryAddressLine1) == 0) {
            return null;
        }
        return $this->deliveryAddressLine1['value'];
    }

    /**
     * Sets Delivery Address Line 1.
     * Address line 1 <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 40
     *
     * @maps DeliveryAddressLine1
     */
    public function setDeliveryAddressLine1(?string $deliveryAddressLine1): void
    {
        $this->deliveryAddressLine1['value'] = $deliveryAddressLine1;
    }

    /**
     * Unsets Delivery Address Line 1.
     * Address line 1 <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 40
     */
    public function unsetDeliveryAddressLine1(): void
    {
        $this->deliveryAddressLine1 = [];
    }

    /**
     * Returns Delivery Address Line 2.
     * Address line 2 <br />
     * Optional <br />
     * Max field length: 40
     */
    public function getDeliveryAddressLine2(): ?string
    {
        if (count($this->deliveryAddressLine2) == 0) {
            return null;
        }
        return $this->deliveryAddressLine2['value'];
    }

    /**
     * Sets Delivery Address Line 2.
     * Address line 2 <br />
     * Optional <br />
     * Max field length: 40
     *
     * @maps DeliveryAddressLine2
     */
    public function setDeliveryAddressLine2(?string $deliveryAddressLine2): void
    {
        $this->deliveryAddressLine2['value'] = $deliveryAddressLine2;
    }

    /**
     * Unsets Delivery Address Line 2.
     * Address line 2 <br />
     * Optional <br />
     * Max field length: 40
     */
    public function unsetDeliveryAddressLine2(): void
    {
        $this->deliveryAddressLine2 = [];
    }

    /**
     * Returns Delivery Address Line 3.
     * Address line 3 <br />
     * Optional<br />
     * Max field length: 40
     */
    public function getDeliveryAddressLine3(): ?string
    {
        if (count($this->deliveryAddressLine3) == 0) {
            return null;
        }
        return $this->deliveryAddressLine3['value'];
    }

    /**
     * Sets Delivery Address Line 3.
     * Address line 3 <br />
     * Optional<br />
     * Max field length: 40
     *
     * @maps DeliveryAddressLine3
     */
    public function setDeliveryAddressLine3(?string $deliveryAddressLine3): void
    {
        $this->deliveryAddressLine3['value'] = $deliveryAddressLine3;
    }

    /**
     * Unsets Delivery Address Line 3.
     * Address line 3 <br />
     * Optional<br />
     * Max field length: 40
     */
    public function unsetDeliveryAddressLine3(): void
    {
        $this->deliveryAddressLine3 = [];
    }

    /**
     * Returns Delivery Zip Code.
     * ZIP code <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 10
     */
    public function getDeliveryZipCode(): ?string
    {
        if (count($this->deliveryZipCode) == 0) {
            return null;
        }
        return $this->deliveryZipCode['value'];
    }

    /**
     * Sets Delivery Zip Code.
     * ZIP code <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 10
     *
     * @maps DeliveryZipCode
     */
    public function setDeliveryZipCode(?string $deliveryZipCode): void
    {
        $this->deliveryZipCode['value'] = $deliveryZipCode;
    }

    /**
     * Unsets Delivery Zip Code.
     * ZIP code <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 10
     */
    public function unsetDeliveryZipCode(): void
    {
        $this->deliveryZipCode = [];
    }

    /**
     * Returns Delivery City.
     * City  <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 40
     */
    public function getDeliveryCity(): ?string
    {
        if (count($this->deliveryCity) == 0) {
            return null;
        }
        return $this->deliveryCity['value'];
    }

    /**
     * Sets Delivery City.
     * City  <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 40
     *
     * @maps DeliveryCity
     */
    public function setDeliveryCity(?string $deliveryCity): void
    {
        $this->deliveryCity['value'] = $deliveryCity;
    }

    /**
     * Unsets Delivery City.
     * City  <br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true.<br />
     * Max field length: 40
     */
    public function unsetDeliveryCity(): void
    {
        $this->deliveryCity = [];
    }

    /**
     * Returns Delivery Region Id.
     * Region Id  <br />
     * Optional
     */
    public function getDeliveryRegionId(): ?int
    {
        if (count($this->deliveryRegionId) == 0) {
            return null;
        }
        return $this->deliveryRegionId['value'];
    }

    /**
     * Sets Delivery Region Id.
     * Region Id  <br />
     * Optional
     *
     * @maps DeliveryRegionId
     */
    public function setDeliveryRegionId(?int $deliveryRegionId): void
    {
        $this->deliveryRegionId['value'] = $deliveryRegionId;
    }

    /**
     * Unsets Delivery Region Id.
     * Region Id  <br />
     * Optional
     */
    public function unsetDeliveryRegionId(): void
    {
        $this->deliveryRegionId = [];
    }

    /**
     * Returns Delivery Region.
     * Region  <br />
     * Optional<br />
     * When region is passed
     */
    public function getDeliveryRegion(): ?string
    {
        if (count($this->deliveryRegion) == 0) {
            return null;
        }
        return $this->deliveryRegion['value'];
    }

    /**
     * Sets Delivery Region.
     * Region  <br />
     * Optional<br />
     * When region is passed
     *
     * @maps DeliveryRegion
     */
    public function setDeliveryRegion(?string $deliveryRegion): void
    {
        $this->deliveryRegion['value'] = $deliveryRegion;
    }

    /**
     * Unsets Delivery Region.
     * Region  <br />
     * Optional<br />
     * When region is passed
     */
    public function unsetDeliveryRegion(): void
    {
        $this->deliveryRegion = [];
    }

    /**
     * Returns Delivery Country.
     * The ISO code of the country.<br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true
     */
    public function getDeliveryCountry(): ?string
    {
        if (count($this->deliveryCountry) == 0) {
            return null;
        }
        return $this->deliveryCountry['value'];
    }

    /**
     * Sets Delivery Country.
     * The ISO code of the country.<br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true
     *
     * @maps DeliveryCountry
     */
    public function setDeliveryCountry(?string $deliveryCountry): void
    {
        $this->deliveryCountry['value'] = $deliveryCountry;
    }

    /**
     * Unsets Delivery Country.
     * The ISO code of the country.<br />
     * Mandatory - If CardDeliveryType  is 2 and OrderCardReplacement is passed as true
     */
    public function unsetDeliveryCountry(): void
    {
        $this->deliveryCountry = [];
    }

    /**
     * Returns Delivery Country Id.
     * The countryId of gicen country.<br />
     */
    public function getDeliveryCountryId(): ?int
    {
        if (count($this->deliveryCountryId) == 0) {
            return null;
        }
        return $this->deliveryCountryId['value'];
    }

    /**
     * Sets Delivery Country Id.
     * The countryId of gicen country.<br />
     *
     * @maps DeliveryCountryId
     */
    public function setDeliveryCountryId(?int $deliveryCountryId): void
    {
        $this->deliveryCountryId['value'] = $deliveryCountryId;
    }

    /**
     * Unsets Delivery Country Id.
     * The countryId of gicen country.<br />
     */
    public function unsetDeliveryCountryId(): void
    {
        $this->deliveryCountryId = [];
    }

    /**
     * Returns Phone Number.
     * Phone number for to send SMS. <br />
     * Optional<br />
     * Max field length: 20
     */
    public function getPhoneNumber(): ?string
    {
        return $this->phoneNumber;
    }

    /**
     * Sets Phone Number.
     * Phone number for to send SMS. <br />
     * Optional<br />
     * Max field length: 20
     *
     * @maps PhoneNumber
     */
    public function setPhoneNumber(?string $phoneNumber): void
    {
        $this->phoneNumber = $phoneNumber;
    }

    /**
     * Returns Email Address.
     * Email address for to send email.<br />
     * Mandatory if PINAdviceType is email else optional.<br />
     * Max field length: 90
     */
    public function getEmailAddress(): ?string
    {
        if (count($this->emailAddress) == 0) {
            return null;
        }
        return $this->emailAddress['value'];
    }

    /**
     * Sets Email Address.
     * Email address for to send email.<br />
     * Mandatory if PINAdviceType is email else optional.<br />
     * Max field length: 90
     *
     * @maps EmailAddress
     */
    public function setEmailAddress(?string $emailAddress): void
    {
        $this->emailAddress['value'] = $emailAddress;
    }

    /**
     * Unsets Email Address.
     * Email address for to send email.<br />
     * Mandatory if PINAdviceType is email else optional.<br />
     * Max field length: 90
     */
    public function unsetEmailAddress(): void
    {
        $this->emailAddress = [];
    }

    /**
     * Returns P in Delivery Address Type.
     * PIN delivery address type selection.<br />
     * Optional<br />
     * Allowed Values:<br />
     * 1.    Customer Address(Default)<br />
     * 2.    Card Address<br />
     * 3.    New Delivery Address
     */
    public function getPINDeliveryAddressType(): ?int
    {
        if (count($this->pINDeliveryAddressType) == 0) {
            return null;
        }
        return $this->pINDeliveryAddressType['value'];
    }

    /**
     * Sets P in Delivery Address Type.
     * PIN delivery address type selection.<br />
     * Optional<br />
     * Allowed Values:<br />
     * 1.    Customer Address(Default)<br />
     * 2.    Card Address<br />
     * 3.    New Delivery Address
     *
     * @maps PINDeliveryAddressType
     */
    public function setPINDeliveryAddressType(?int $pINDeliveryAddressType): void
    {
        $this->pINDeliveryAddressType['value'] = $pINDeliveryAddressType;
    }

    /**
     * Unsets P in Delivery Address Type.
     * PIN delivery address type selection.<br />
     * Optional<br />
     * Allowed Values:<br />
     * 1.    Customer Address(Default)<br />
     * 2.    Card Address<br />
     * 3.    New Delivery Address
     */
    public function unsetPINDeliveryAddressType(): void
    {
        $this->pINDeliveryAddressType = [];
    }

    /**
     * Returns P in Advice Type.
     * PIN delivery method.<br />
     * Mandatory when OrderReplacement Is true.<br />
     * Allowed Values:<br />
     * 1.    Paper<br />
     * 2.    Email<br />
     * 3.    SMS<br />
     * 4.    None
     */
    public function getPINAdviceType(): ?int
    {
        if (count($this->pINAdviceType) == 0) {
            return null;
        }
        return $this->pINAdviceType['value'];
    }

    /**
     * Sets P in Advice Type.
     * PIN delivery method.<br />
     * Mandatory when OrderReplacement Is true.<br />
     * Allowed Values:<br />
     * 1.    Paper<br />
     * 2.    Email<br />
     * 3.    SMS<br />
     * 4.    None
     *
     * @maps PINAdviceType
     */
    public function setPINAdviceType(?int $pINAdviceType): void
    {
        $this->pINAdviceType['value'] = $pINAdviceType;
    }

    /**
     * Unsets P in Advice Type.
     * PIN delivery method.<br />
     * Mandatory when OrderReplacement Is true.<br />
     * Allowed Values:<br />
     * 1.    Paper<br />
     * 2.    Email<br />
     * 3.    SMS<br />
     * 4.    None
     */
    public function unsetPINAdviceType(): void
    {
        $this->pINAdviceType = [];
    }

    /**
     * Returns P in Delivery Contact Title.
     * Title of the contact person.<br />
     * Optional <br />
     * Max field length: 10
     */
    public function getPINDeliveryContactTitle(): ?string
    {
        if (count($this->pINDeliveryContactTitle) == 0) {
            return null;
        }
        return $this->pINDeliveryContactTitle['value'];
    }

    /**
     * Sets P in Delivery Contact Title.
     * Title of the contact person.<br />
     * Optional <br />
     * Max field length: 10
     *
     * @maps PINDeliveryContactTitle
     */
    public function setPINDeliveryContactTitle(?string $pINDeliveryContactTitle): void
    {
        $this->pINDeliveryContactTitle['value'] = $pINDeliveryContactTitle;
    }

    /**
     * Unsets P in Delivery Contact Title.
     * Title of the contact person.<br />
     * Optional <br />
     * Max field length: 10
     */
    public function unsetPINDeliveryContactTitle(): void
    {
        $this->pINDeliveryContactTitle = [];
    }

    /**
     * Returns P in Delivery Contact Name.
     * Name of the contact person.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 50
     */
    public function getPINDeliveryContactName(): ?string
    {
        if (count($this->pINDeliveryContactName) == 0) {
            return null;
        }
        return $this->pINDeliveryContactName['value'];
    }

    /**
     * Sets P in Delivery Contact Name.
     * Name of the contact person.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 50
     *
     * @maps PINDeliveryContactName
     */
    public function setPINDeliveryContactName(?string $pINDeliveryContactName): void
    {
        $this->pINDeliveryContactName['value'] = $pINDeliveryContactName;
    }

    /**
     * Unsets P in Delivery Contact Name.
     * Name of the contact person.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 50
     */
    public function unsetPINDeliveryContactName(): void
    {
        $this->pINDeliveryContactName = [];
    }

    /**
     * Returns P in Delivery Company Name.
     * Company name.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 50
     */
    public function getPINDeliveryCompanyName(): ?string
    {
        if (count($this->pINDeliveryCompanyName) == 0) {
            return null;
        }
        return $this->pINDeliveryCompanyName['value'];
    }

    /**
     * Sets P in Delivery Company Name.
     * Company name.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 50
     *
     * @maps PINDeliveryCompanyName
     */
    public function setPINDeliveryCompanyName(?string $pINDeliveryCompanyName): void
    {
        $this->pINDeliveryCompanyName['value'] = $pINDeliveryCompanyName;
    }

    /**
     * Unsets P in Delivery Company Name.
     * Company name.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 50
     */
    public function unsetPINDeliveryCompanyName(): void
    {
        $this->pINDeliveryCompanyName = [];
    }

    /**
     * Returns P in Delivery Address Line 1.
     * Address line 1.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 40
     */
    public function getPINDeliveryAddressLine1(): ?string
    {
        if (count($this->pINDeliveryAddressLine1) == 0) {
            return null;
        }
        return $this->pINDeliveryAddressLine1['value'];
    }

    /**
     * Sets P in Delivery Address Line 1.
     * Address line 1.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 40
     *
     * @maps PINDeliveryAddressLine1
     */
    public function setPINDeliveryAddressLine1(?string $pINDeliveryAddressLine1): void
    {
        $this->pINDeliveryAddressLine1['value'] = $pINDeliveryAddressLine1;
    }

    /**
     * Unsets P in Delivery Address Line 1.
     * Address line 1.<br />
     * Mandatory - If PINAdviceType is paper else optional.<br />
     * Max field length: 40
     */
    public function unsetPINDeliveryAddressLine1(): void
    {
        $this->pINDeliveryAddressLine1 = [];
    }

    /**
     * Returns P in Delivery Address Line 2.
     * Address line 2.<br />
     * Optional <br />
     * Max field length: 40
     */
    public function getPINDeliveryAddressLine2(): ?string
    {
        if (count($this->pINDeliveryAddressLine2) == 0) {
            return null;
        }
        return $this->pINDeliveryAddressLine2['value'];
    }

    /**
     * Sets P in Delivery Address Line 2.
     * Address line 2.<br />
     * Optional <br />
     * Max field length: 40
     *
     * @maps PINDeliveryAddressLine2
     */
    public function setPINDeliveryAddressLine2(?string $pINDeliveryAddressLine2): void
    {
        $this->pINDeliveryAddressLine2['value'] = $pINDeliveryAddressLine2;
    }

    /**
     * Unsets P in Delivery Address Line 2.
     * Address line 2.<br />
     * Optional <br />
     * Max field length: 40
     */
    public function unsetPINDeliveryAddressLine2(): void
    {
        $this->pINDeliveryAddressLine2 = [];
    }

    /**
     * Returns P in Delivery Address Line 3.
     * Address line 3.<br />
     * Optional <br />
     * Max field length: 40
     */
    public function getPINDeliveryAddressLine3(): ?string
    {
        if (count($this->pINDeliveryAddressLine3) == 0) {
            return null;
        }
        return $this->pINDeliveryAddressLine3['value'];
    }

    /**
     * Sets P in Delivery Address Line 3.
     * Address line 3.<br />
     * Optional <br />
     * Max field length: 40
     *
     * @maps PINDeliveryAddressLine3
     */
    public function setPINDeliveryAddressLine3(?string $pINDeliveryAddressLine3): void
    {
        $this->pINDeliveryAddressLine3['value'] = $pINDeliveryAddressLine3;
    }

    /**
     * Unsets P in Delivery Address Line 3.
     * Address line 3.<br />
     * Optional <br />
     * Max field length: 40
     */
    public function unsetPINDeliveryAddressLine3(): void
    {
        $this->pINDeliveryAddressLine3 = [];
    }

    /**
     * Returns P in Delivery Zip Code.
     * ZIP code.<br />
     * Mandatory - if PINAdviceType is paper else optional. <br />
     * Max field length: 10
     */
    public function getPINDeliveryZipCode(): ?string
    {
        if (count($this->pINDeliveryZipCode) == 0) {
            return null;
        }
        return $this->pINDeliveryZipCode['value'];
    }

    /**
     * Sets P in Delivery Zip Code.
     * ZIP code.<br />
     * Mandatory - if PINAdviceType is paper else optional. <br />
     * Max field length: 10
     *
     * @maps PINDeliveryZipCode
     */
    public function setPINDeliveryZipCode(?string $pINDeliveryZipCode): void
    {
        $this->pINDeliveryZipCode['value'] = $pINDeliveryZipCode;
    }

    /**
     * Unsets P in Delivery Zip Code.
     * ZIP code.<br />
     * Mandatory - if PINAdviceType is paper else optional. <br />
     * Max field length: 10
     */
    public function unsetPINDeliveryZipCode(): void
    {
        $this->pINDeliveryZipCode = [];
    }

    /**
     * Returns P in Delivery City.
     * City.<br />
     * Mandatory - If PINAdviceType is paper else optional. <br />
     * Max field length: 40
     */
    public function getPINDeliveryCity(): ?string
    {
        if (count($this->pINDeliveryCity) == 0) {
            return null;
        }
        return $this->pINDeliveryCity['value'];
    }

    /**
     * Sets P in Delivery City.
     * City.<br />
     * Mandatory - If PINAdviceType is paper else optional. <br />
     * Max field length: 40
     *
     * @maps PINDeliveryCity
     */
    public function setPINDeliveryCity(?string $pINDeliveryCity): void
    {
        $this->pINDeliveryCity['value'] = $pINDeliveryCity;
    }

    /**
     * Unsets P in Delivery City.
     * City.<br />
     * Mandatory - If PINAdviceType is paper else optional. <br />
     * Max field length: 40
     */
    public function unsetPINDeliveryCity(): void
    {
        $this->pINDeliveryCity = [];
    }

    /**
     * Returns P in Delivery Region Id.
     * Region Id.<br />
     * Optional
     */
    public function getPINDeliveryRegionId(): ?int
    {
        if (count($this->pINDeliveryRegionId) == 0) {
            return null;
        }
        return $this->pINDeliveryRegionId['value'];
    }

    /**
     * Sets P in Delivery Region Id.
     * Region Id.<br />
     * Optional
     *
     * @maps PINDeliveryRegionId
     */
    public function setPINDeliveryRegionId(?int $pINDeliveryRegionId): void
    {
        $this->pINDeliveryRegionId['value'] = $pINDeliveryRegionId;
    }

    /**
     * Unsets P in Delivery Region Id.
     * Region Id.<br />
     * Optional
     */
    public function unsetPINDeliveryRegionId(): void
    {
        $this->pINDeliveryRegionId = [];
    }

    /**
     * Returns P in Delivery Region.
     * Region.<br />
     * When region is passed
     */
    public function getPINDeliveryRegion(): ?string
    {
        if (count($this->pINDeliveryRegion) == 0) {
            return null;
        }
        return $this->pINDeliveryRegion['value'];
    }

    /**
     * Sets P in Delivery Region.
     * Region.<br />
     * When region is passed
     *
     * @maps PINDeliveryRegion
     */
    public function setPINDeliveryRegion(?string $pINDeliveryRegion): void
    {
        $this->pINDeliveryRegion['value'] = $pINDeliveryRegion;
    }

    /**
     * Unsets P in Delivery Region.
     * Region.<br />
     * When region is passed
     */
    public function unsetPINDeliveryRegion(): void
    {
        $this->pINDeliveryRegion = [];
    }

    /**
     * Returns P in Delivery Country.
     * The ISO code of the country.<br />
     * Mappings for ISO code <br />
     * Mandatory if PINAdviceType is paper else optional.
     */
    public function getPINDeliveryCountry(): ?string
    {
        if (count($this->pINDeliveryCountry) == 0) {
            return null;
        }
        return $this->pINDeliveryCountry['value'];
    }

    /**
     * Sets P in Delivery Country.
     * The ISO code of the country.<br />
     * Mappings for ISO code <br />
     * Mandatory if PINAdviceType is paper else optional.
     *
     * @maps PINDeliveryCountry
     */
    public function setPINDeliveryCountry(?string $pINDeliveryCountry): void
    {
        $this->pINDeliveryCountry['value'] = $pINDeliveryCountry;
    }

    /**
     * Unsets P in Delivery Country.
     * The ISO code of the country.<br />
     * Mappings for ISO code <br />
     * Mandatory if PINAdviceType is paper else optional.
     */
    public function unsetPINDeliveryCountry(): void
    {
        $this->pINDeliveryCountry = [];
    }

    /**
     * Returns P in Delivery Country Id.
     * The countryId of the country.<br />
     * Mappings for ISO code<br />
     * This is not an input parameter.
     */
    public function getPINDeliveryCountryId(): ?int
    {
        if (count($this->pINDeliveryCountryId) == 0) {
            return null;
        }
        return $this->pINDeliveryCountryId['value'];
    }

    /**
     * Sets P in Delivery Country Id.
     * The countryId of the country.<br />
     * Mappings for ISO code<br />
     * This is not an input parameter.
     *
     * @maps PINDeliveryCountryId
     */
    public function setPINDeliveryCountryId(?int $pINDeliveryCountryId): void
    {
        $this->pINDeliveryCountryId['value'] = $pINDeliveryCountryId;
    }

    /**
     * Unsets P in Delivery Country Id.
     * The countryId of the country.<br />
     * Mappings for ISO code<br />
     * This is not an input parameter.
     */
    public function unsetPINDeliveryCountryId(): void
    {
        $this->pINDeliveryCountryId = [];
    }

    /**
     * Returns P in Phone Number.
     * Phone number for to send SMS of the PIN in case PINAdviceType is SMS.<br />
     * Mandatory if PINAdviceType is SMS else optional.<br />
     * Max field length: 20
     */
    public function getPINPhoneNumber(): ?string
    {
        if (count($this->pINPhoneNumber) == 0) {
            return null;
        }
        return $this->pINPhoneNumber['value'];
    }

    /**
     * Sets P in Phone Number.
     * Phone number for to send SMS of the PIN in case PINAdviceType is SMS.<br />
     * Mandatory if PINAdviceType is SMS else optional.<br />
     * Max field length: 20
     *
     * @maps PINPhoneNumber
     */
    public function setPINPhoneNumber(?string $pINPhoneNumber): void
    {
        $this->pINPhoneNumber['value'] = $pINPhoneNumber;
    }

    /**
     * Unsets P in Phone Number.
     * Phone number for to send SMS of the PIN in case PINAdviceType is SMS.<br />
     * Mandatory if PINAdviceType is SMS else optional.<br />
     * Max field length: 20
     */
    public function unsetPINPhoneNumber(): void
    {
        $this->pINPhoneNumber = [];
    }

    /**
     * Returns P in Email Address.
     * Email address for to send email of the PIN in case PINAdviceType is Email.<br />
     * Mandatory if PINAdviceType is email else optional.<br />
     * Max field length: 90
     */
    public function getPINEmailAddress(): ?string
    {
        if (count($this->pINEmailAddress) == 0) {
            return null;
        }
        return $this->pINEmailAddress['value'];
    }

    /**
     * Sets P in Email Address.
     * Email address for to send email of the PIN in case PINAdviceType is Email.<br />
     * Mandatory if PINAdviceType is email else optional.<br />
     * Max field length: 90
     *
     * @maps PINEmailAddress
     */
    public function setPINEmailAddress(?string $pINEmailAddress): void
    {
        $this->pINEmailAddress['value'] = $pINEmailAddress;
    }

    /**
     * Unsets P in Email Address.
     * Email address for to send email of the PIN in case PINAdviceType is Email.<br />
     * Mandatory if PINAdviceType is email else optional.<br />
     * Max field length: 90
     */
    public function unsetPINEmailAddress(): void
    {
        $this->pINEmailAddress = [];
    }

    /**
     * Returns Save for PIN Reminder.
     * The given address will be used for sending PIN reminders in future when requested.<br />
     *
     * PIN Advice type should be Paper
     *
     * Optional
     */
    public function getSaveForPINReminder(): ?bool
    {
        return $this->saveForPINReminder;
    }

    /**
     * Sets Save for PIN Reminder.
     * The given address will be used for sending PIN reminders in future when requested.<br />
     *
     * PIN Advice type should be Paper
     *
     * Optional
     *
     * @maps SaveForPINReminder
     */
    public function setSaveForPINReminder(?bool $saveForPINReminder): void
    {
        $this->saveForPINReminder = $saveForPINReminder;
    }

    /**
     * Returns Save for Card Reissue.
     * If this is specified, the contact address will be saved in cards platform for card reissue
     * processing.<br />
     * Optional
     */
    public function getSaveForCardReissue(): ?bool
    {
        return $this->saveForCardReissue;
    }

    /**
     * Sets Save for Card Reissue.
     * If this is specified, the contact address will be saved in cards platform for card reissue
     * processing.<br />
     * Optional
     *
     * @maps SaveForCardReissue
     */
    public function setSaveForCardReissue(?bool $saveForCardReissue): void
    {
        $this->saveForCardReissue = $saveForCardReissue;
    }

    /**
     * Returns Expiry Date.
     * Expiry Date for newly created card to be update in cards plot form.<br />
     *
     * Optional <br />
     *
     * Format: MMyy <br />
     *
     * Eg:1221 <br />
     *
     * If not apply the default Expiry Date.<br />
     *
     * Note:<br />
     *
     * There is a limit to the ExpiryDate which the user can choose for the Card.
     *
     * If the user chooses a later ExpiryDate than the allowed value for the CardType of the OU,
     *
     * the background service logs the respective error code and description
     */
    public function getExpiryDate(): ?string
    {
        if (count($this->expiryDate) == 0) {
            return null;
        }
        return $this->expiryDate['value'];
    }

    /**
     * Sets Expiry Date.
     * Expiry Date for newly created card to be update in cards plot form.<br />
     *
     * Optional <br />
     *
     * Format: MMyy <br />
     *
     * Eg:1221 <br />
     *
     * If not apply the default Expiry Date.<br />
     *
     * Note:<br />
     *
     * There is a limit to the ExpiryDate which the user can choose for the Card.
     *
     * If the user chooses a later ExpiryDate than the allowed value for the CardType of the OU,
     *
     * the background service logs the respective error code and description
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate['value'] = $expiryDate;
    }

    /**
     * Unsets Expiry Date.
     * Expiry Date for newly created card to be update in cards plot form.<br />
     *
     * Optional <br />
     *
     * Format: MMyy <br />
     *
     * Eg:1221 <br />
     *
     * If not apply the default Expiry Date.<br />
     *
     * Note:<br />
     *
     * There is a limit to the ExpiryDate which the user can choose for the Card.
     *
     * If the user chooses a later ExpiryDate than the allowed value for the CardType of the OU,
     *
     * the background service logs the respective error code and description
     */
    public function unsetExpiryDate(): void
    {
        $this->expiryDate = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->selfSelectedEncryptedPIN)) {
            $json['SelfSelectedEncryptedPIN']  = $this->selfSelectedEncryptedPIN['value'];
        }
        if (!empty($this->selfSelectedPINKeyID)) {
            $json['SelfSelectedPINKeyID']      = $this->selfSelectedPINKeyID['value'];
        }
        if (!empty($this->selfSelectedPINSessionKey)) {
            $json['SelfSelectedPINSessionKey'] = $this->selfSelectedPINSessionKey['value'];
        }
        if (isset($this->validateFleetId)) {
            $json['ValidateFleetId']           = $this->validateFleetId;
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']               = $this->cardGroupId['value'];
        }
        $json['CardDeliveryType']              = $this->cardDeliveryType;
        if (!empty($this->deliveryContactTitle)) {
            $json['DeliveryContactTitle']      = $this->deliveryContactTitle['value'];
        }
        if (!empty($this->deliveryContactName)) {
            $json['DeliveryContactName']       = $this->deliveryContactName['value'];
        }
        if (!empty($this->deliveryCompanyName)) {
            $json['DeliveryCompanyName']       = $this->deliveryCompanyName['value'];
        }
        if (!empty($this->deliveryAddressLine1)) {
            $json['DeliveryAddressLine1']      = $this->deliveryAddressLine1['value'];
        }
        if (!empty($this->deliveryAddressLine2)) {
            $json['DeliveryAddressLine2']      = $this->deliveryAddressLine2['value'];
        }
        if (!empty($this->deliveryAddressLine3)) {
            $json['DeliveryAddressLine3']      = $this->deliveryAddressLine3['value'];
        }
        if (!empty($this->deliveryZipCode)) {
            $json['DeliveryZipCode']           = $this->deliveryZipCode['value'];
        }
        if (!empty($this->deliveryCity)) {
            $json['DeliveryCity']              = $this->deliveryCity['value'];
        }
        if (!empty($this->deliveryRegionId)) {
            $json['DeliveryRegionId']          = $this->deliveryRegionId['value'];
        }
        if (!empty($this->deliveryRegion)) {
            $json['DeliveryRegion']            = $this->deliveryRegion['value'];
        }
        if (!empty($this->deliveryCountry)) {
            $json['DeliveryCountry']           = $this->deliveryCountry['value'];
        }
        if (!empty($this->deliveryCountryId)) {
            $json['DeliveryCountryId']         = $this->deliveryCountryId['value'];
        }
        if (isset($this->phoneNumber)) {
            $json['PhoneNumber']               = $this->phoneNumber;
        }
        if (!empty($this->emailAddress)) {
            $json['EmailAddress']              = $this->emailAddress['value'];
        }
        if (!empty($this->pINDeliveryAddressType)) {
            $json['PINDeliveryAddressType']    = $this->pINDeliveryAddressType['value'];
        }
        if (!empty($this->pINAdviceType)) {
            $json['PINAdviceType']             = $this->pINAdviceType['value'];
        }
        if (!empty($this->pINDeliveryContactTitle)) {
            $json['PINDeliveryContactTitle']   = $this->pINDeliveryContactTitle['value'];
        }
        if (!empty($this->pINDeliveryContactName)) {
            $json['PINDeliveryContactName']    = $this->pINDeliveryContactName['value'];
        }
        if (!empty($this->pINDeliveryCompanyName)) {
            $json['PINDeliveryCompanyName']    = $this->pINDeliveryCompanyName['value'];
        }
        if (!empty($this->pINDeliveryAddressLine1)) {
            $json['PINDeliveryAddressLine1']   = $this->pINDeliveryAddressLine1['value'];
        }
        if (!empty($this->pINDeliveryAddressLine2)) {
            $json['PINDeliveryAddressLine2']   = $this->pINDeliveryAddressLine2['value'];
        }
        if (!empty($this->pINDeliveryAddressLine3)) {
            $json['PINDeliveryAddressLine3']   = $this->pINDeliveryAddressLine3['value'];
        }
        if (!empty($this->pINDeliveryZipCode)) {
            $json['PINDeliveryZipCode']        = $this->pINDeliveryZipCode['value'];
        }
        if (!empty($this->pINDeliveryCity)) {
            $json['PINDeliveryCity']           = $this->pINDeliveryCity['value'];
        }
        if (!empty($this->pINDeliveryRegionId)) {
            $json['PINDeliveryRegionId']       = $this->pINDeliveryRegionId['value'];
        }
        if (!empty($this->pINDeliveryRegion)) {
            $json['PINDeliveryRegion']         = $this->pINDeliveryRegion['value'];
        }
        if (!empty($this->pINDeliveryCountry)) {
            $json['PINDeliveryCountry']        = $this->pINDeliveryCountry['value'];
        }
        if (!empty($this->pINDeliveryCountryId)) {
            $json['PINDeliveryCountryId']      = $this->pINDeliveryCountryId['value'];
        }
        if (!empty($this->pINPhoneNumber)) {
            $json['PINPhoneNumber']            = $this->pINPhoneNumber['value'];
        }
        if (!empty($this->pINEmailAddress)) {
            $json['PINEmailAddress']           = $this->pINEmailAddress['value'];
        }
        if (isset($this->saveForPINReminder)) {
            $json['SaveForPINReminder']        = $this->saveForPINReminder;
        }
        if (isset($this->saveForCardReissue)) {
            $json['SaveForCardReissue']        = $this->saveForCardReissue;
        }
        if (!empty($this->expiryDate)) {
            $json['ExpiryDate']                = $this->expiryDate['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
