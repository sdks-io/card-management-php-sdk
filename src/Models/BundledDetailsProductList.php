<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class BundledDetailsProductList implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $purchaseCategoryId;

    /**
     * @var string|null
     */
    private $purchaseCategoryCode;

    /**
     * @var string[]|null
     */
    private $products;

    /**
     * @var string[]|null
     */
    private $productGroups;

    /**
     * @var string|null
     */
    private $fuelSetId;

    /**
     * @var string|null
     */
    private $fuelSetName;

    /**
     * @var string|null
     */
    private $nonFuelSets;

    /**
     * Returns Purchase Category Id.
     * Purchase category Id
     * Example: 123, 124, etc.,
     */
    public function getPurchaseCategoryId(): ?int
    {
        return $this->purchaseCategoryId;
    }

    /**
     * Sets Purchase Category Id.
     * Purchase category Id
     * Example: 123, 124, etc.,
     *
     * @maps PurchaseCategoryId
     */
    public function setPurchaseCategoryId(?int $purchaseCategoryId): void
    {
        $this->purchaseCategoryId = $purchaseCategoryId;
    }

    /**
     * Returns Purchase Category Code.
     * Purchase category name.
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     */
    public function getPurchaseCategoryCode(): ?string
    {
        return $this->purchaseCategoryCode;
    }

    /**
     * Sets Purchase Category Code.
     * Purchase category name.
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * @maps PurchaseCategoryCode
     */
    public function setPurchaseCategoryCode(?string $purchaseCategoryCode): void
    {
        $this->purchaseCategoryCode = $purchaseCategoryCode;
    }

    /**
     * Returns Products.
     * An array of 3-digit global product codes.
     * Example: [ "033", "021", "023" ]
     *
     * @return string[]|null
     */
    public function getProducts(): ?array
    {
        return $this->products;
    }

    /**
     * Sets Products.
     * An array of 3-digit global product codes.
     * Example: [ "033", "021", "023" ]
     *
     * @maps Products
     *
     * @param string[]|null $products
     */
    public function setProducts(?array $products): void
    {
        $this->products = $products;
    }

    /**
     * Returns Product Groups.
     * An array of product group ids.
     * Example: [ "670246404", "40557126" ]
     *
     * @return string[]|null
     */
    public function getProductGroups(): ?array
    {
        return $this->productGroups;
    }

    /**
     * Sets Product Groups.
     * An array of product group ids.
     * Example: [ "670246404", "40557126" ]
     *
     * @maps ProductGroups
     *
     * @param string[]|null $productGroups
     */
    public function setProductGroups(?array $productGroups): void
    {
        $this->productGroups = $productGroups;
    }

    /**
     * Returns Fuel Set Id.
     * Fuel set id that is allowed to be purchased with the card
     */
    public function getFuelSetId(): ?string
    {
        return $this->fuelSetId;
    }

    /**
     * Sets Fuel Set Id.
     * Fuel set id that is allowed to be purchased with the card
     *
     * @maps FuelSetId
     */
    public function setFuelSetId(?string $fuelSetId): void
    {
        $this->fuelSetId = $fuelSetId;
    }

    /**
     * Returns Fuel Set Name.
     * Fuel set name that is allowed to be purchased with the card
     */
    public function getFuelSetName(): ?string
    {
        return $this->fuelSetName;
    }

    /**
     * Sets Fuel Set Name.
     * Fuel set name that is allowed to be purchased with the card
     *
     * @maps FuelSetName
     */
    public function setFuelSetName(?string $fuelSetName): void
    {
        $this->fuelSetName = $fuelSetName;
    }

    /**
     * Returns Non Fuel Sets.
     * Non-Fuel set name that is allowed to be purchased with the card
     */
    public function getNonFuelSets(): ?string
    {
        return $this->nonFuelSets;
    }

    /**
     * Sets Non Fuel Sets.
     * Non-Fuel set name that is allowed to be purchased with the card
     *
     * @maps NonFuelSets
     */
    public function setNonFuelSets(?string $nonFuelSets): void
    {
        $this->nonFuelSets = $nonFuelSets;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->purchaseCategoryId)) {
            $json['PurchaseCategoryId']   = $this->purchaseCategoryId;
        }
        if (isset($this->purchaseCategoryCode)) {
            $json['PurchaseCategoryCode'] = $this->purchaseCategoryCode;
        }
        if (isset($this->products)) {
            $json['Products']             = $this->products;
        }
        if (isset($this->productGroups)) {
            $json['ProductGroups']        = $this->productGroups;
        }
        if (isset($this->fuelSetId)) {
            $json['FuelSetId']            = $this->fuelSetId;
        }
        if (isset($this->fuelSetName)) {
            $json['FuelSetName']          = $this->fuelSetName;
        }
        if (isset($this->nonFuelSets)) {
            $json['NonFuelSets']          = $this->nonFuelSets;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
