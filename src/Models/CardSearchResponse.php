<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class CardSearchResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $requestId = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var Card[]|null
     */
    private $data;

    /**
     * @var int|null
     */
    private $page;

    /**
     * @var int|null
     */
    private $pageSize;

    /**
     * @var int|null
     */
    private $totalPages;

    /**
     * @var int|null
     */
    private $totalRecords;

    /**
     * Returns Request Id.
     * Unique request identifier passed from end user. This identifier helps in tracing a transaction
     */
    public function getRequestId(): ?string
    {
        if (count($this->requestId) == 0) {
            return null;
        }
        return $this->requestId['value'];
    }

    /**
     * Sets Request Id.
     * Unique request identifier passed from end user. This identifier helps in tracing a transaction
     *
     * @maps RequestId
     */
    public function setRequestId(?string $requestId): void
    {
        $this->requestId['value'] = $requestId;
    }

    /**
     * Unsets Request Id.
     * Unique request identifier passed from end user. This identifier helps in tracing a transaction
     */
    public function unsetRequestId(): void
    {
        $this->requestId = [];
    }

    /**
     * Returns Status.
     * Indicates overall status of the request. Allowed values: SUCCES, FAILED, PARTIAL_SUCCES
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Indicates overall status of the request. Allowed values: SUCCES, FAILED, PARTIAL_SUCCES
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Indicates overall status of the request. Allowed values: SUCCES, FAILED, PARTIAL_SUCCES
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Data.
     *
     * @return Card[]|null
     */
    public function getData(): ?array
    {
        return $this->data;
    }

    /**
     * Sets Data.
     *
     * @maps Data
     *
     * @param Card[]|null $data
     */
    public function setData(?array $data): void
    {
        $this->data = $data;
    }

    /**
     * Returns Page.
     * Specifies the returned page of the results
     */
    public function getPage(): ?int
    {
        return $this->page;
    }

    /**
     * Sets Page.
     * Specifies the returned page of the results
     *
     * @maps Page
     */
    public function setPage(?int $page): void
    {
        $this->page = $page;
    }

    /**
     * Returns Page Size.
     * Specifies the number of records to be returned which could be less than the PageSize in the request
     */
    public function getPageSize(): ?int
    {
        return $this->pageSize;
    }

    /**
     * Sets Page Size.
     * Specifies the number of records to be returned which could be less than the PageSize in the request
     *
     * @maps PageSize
     */
    public function setPageSize(?int $pageSize): void
    {
        $this->pageSize = $pageSize;
    }

    /**
     * Returns Total Pages.
     * Specifies the total pages available in the result
     */
    public function getTotalPages(): ?int
    {
        return $this->totalPages;
    }

    /**
     * Sets Total Pages.
     * Specifies the total pages available in the result
     *
     * @maps TotalPages
     */
    public function setTotalPages(?int $totalPages): void
    {
        $this->totalPages = $totalPages;
    }

    /**
     * Returns Total Records.
     * Specifies the total pages available in the result
     */
    public function getTotalRecords(): ?int
    {
        return $this->totalRecords;
    }

    /**
     * Sets Total Records.
     * Specifies the total pages available in the result
     *
     * @maps TotalRecords
     */
    public function setTotalRecords(?int $totalRecords): void
    {
        $this->totalRecords = $totalRecords;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->requestId)) {
            $json['RequestId']    = $this->requestId['value'];
        }
        if (!empty($this->status)) {
            $json['Status']       = $this->status['value'];
        }
        if (isset($this->data)) {
            $json['Data']         = $this->data;
        }
        if (isset($this->page)) {
            $json['Page']         = $this->page;
        }
        if (isset($this->pageSize)) {
            $json['PageSize']     = $this->pageSize;
        }
        if (isset($this->totalPages)) {
            $json['TotalPages']   = $this->totalPages;
        }
        if (isset($this->totalRecords)) {
            $json['TotalRecords'] = $this->totalRecords;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
