<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class UpdateCardRenewalAddress2 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $contactName;

    /**
     * @var string|null
     */
    private $contactTitle;

    /**
     * @var string
     */
    private $companyName;

    /**
     * @var string
     */
    private $addressLine;

    /**
     * @var string
     */
    private $zipCode;

    /**
     * @var string|null
     */
    private $city;

    /**
     * @var int|null
     */
    private $regionID;

    /**
     * @var int
     */
    private $countryID;

    /**
     * @var string|null
     */
    private $emailAddress;

    /**
     * @var string|null
     */
    private $phoneNumber;

    /**
     * @param string $contactName
     * @param string $companyName
     * @param string $addressLine
     * @param string $zipCode
     * @param int $countryID
     */
    public function __construct(
        string $contactName,
        string $companyName,
        string $addressLine,
        string $zipCode,
        int $countryID
    ) {
        $this->contactName = $contactName;
        $this->companyName = $companyName;
        $this->addressLine = $addressLine;
        $this->zipCode = $zipCode;
        $this->countryID = $countryID;
    }

    /**
     * Returns Contact Name.
     * Contact name
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     *
     *
     * Max Length: 50
     */
    public function getContactName(): string
    {
        return $this->contactName;
    }

    /**
     * Sets Contact Name.
     * Contact name
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     *
     *
     * Max Length: 50
     *
     * @required
     * @maps ContactName
     */
    public function setContactName(string $contactName): void
    {
        $this->contactName = $contactName;
    }

    /**
     * Returns Contact Title.
     * Title
     * Max Length: 50
     */
    public function getContactTitle(): ?string
    {
        return $this->contactTitle;
    }

    /**
     * Sets Contact Title.
     * Title
     * Max Length: 50
     *
     * @maps ContactTitle
     */
    public function setContactTitle(?string $contactTitle): void
    {
        $this->contactTitle = $contactTitle;
    }

    /**
     * Returns Company Name.
     * Company name.
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 50
     */
    public function getCompanyName(): string
    {
        return $this->companyName;
    }

    /**
     * Sets Company Name.
     * Company name.
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 50
     *
     * @required
     * @maps CompanyName
     */
    public function setCompanyName(string $companyName): void
    {
        $this->companyName = $companyName;
    }

    /**
     * Returns Address Line.
     * Address line 1,2 and 3
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 128
     * Note: -Each address line should be separated by “\r\n”.
     */
    public function getAddressLine(): string
    {
        return $this->addressLine;
    }

    /**
     * Sets Address Line.
     * Address line 1,2 and 3
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 128
     * Note: -Each address line should be separated by “\r\n”.
     *
     * @required
     * @maps AddressLine
     */
    public function setAddressLine(string $addressLine): void
    {
        $this->addressLine = $addressLine;
    }

    /**
     * Returns Zip Code.
     * ZipCode
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 10
     */
    public function getZipCode(): string
    {
        return $this->zipCode;
    }

    /**
     * Sets Zip Code.
     * ZipCode
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 10
     *
     * @required
     * @maps ZipCode
     */
    public function setZipCode(string $zipCode): void
    {
        $this->zipCode = $zipCode;
    }

    /**
     * Returns City.
     * City
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 40
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * Sets City.
     * City
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     * Max Length: 40
     *
     * @maps City
     */
    public function setCity(?string $city): void
    {
        $this->city = $city;
    }

    /**
     * Returns Region ID.
     * Region id of card.
     */
    public function getRegionID(): ?int
    {
        return $this->regionID;
    }

    /**
     * Sets Region ID.
     * Region id of card.
     *
     * @maps RegionID
     */
    public function setRegionID(?int $regionID): void
    {
        $this->regionID = $regionID;
    }

    /**
     * Returns Country ID.
     * Country ID
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     */
    public function getCountryID(): int
    {
        return $this->countryID;
    }

    /**
     * Sets Country ID.
     * Country ID
     * Note: Mandatory when ‘UseCustomerDefaultAddress’ is set to ‘false’. The field is ignored otherwise.
     *
     * @required
     * @maps CountryID
     */
    public function setCountryID(int $countryID): void
    {
        $this->countryID = $countryID;
    }

    /**
     * Returns Email Address.
     * Email Address
     *
     *
     *
     * Max Length: 90
     *
     * Note: -
     *
     * Based on the international standard that there can be
     *
     * •    Max Length 64 before the @ (the 'Local part’) =64(minimum of 1)
     *
     * •    Max Lenth after the (the domain) = 88 (Minimum of 2)
     */
    public function getEmailAddress(): ?string
    {
        return $this->emailAddress;
    }

    /**
     * Sets Email Address.
     * Email Address
     *
     *
     *
     * Max Length: 90
     *
     * Note: -
     *
     * Based on the international standard that there can be
     *
     * •    Max Length 64 before the @ (the 'Local part’) =64(minimum of 1)
     *
     * •    Max Lenth after the (the domain) = 88 (Minimum of 2)
     *
     * @maps EmailAddress
     */
    public function setEmailAddress(?string $emailAddress): void
    {
        $this->emailAddress = $emailAddress;
    }

    /**
     * Returns Phone Number.
     * Phone number
     * Optional
     * Max Length: 16
     */
    public function getPhoneNumber(): ?string
    {
        return $this->phoneNumber;
    }

    /**
     * Sets Phone Number.
     * Phone number
     * Optional
     * Max Length: 16
     *
     * @maps PhoneNumber
     */
    public function setPhoneNumber(?string $phoneNumber): void
    {
        $this->phoneNumber = $phoneNumber;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['ContactName']      = $this->contactName;
        if (isset($this->contactTitle)) {
            $json['ContactTitle'] = $this->contactTitle;
        }
        $json['CompanyName']      = $this->companyName;
        $json['AddressLine']      = $this->addressLine;
        $json['ZipCode']          = $this->zipCode;
        if (isset($this->city)) {
            $json['City']         = $this->city;
        }
        if (isset($this->regionID)) {
            $json['RegionID']     = $this->regionID;
        }
        $json['CountryID']        = $this->countryID;
        if (isset($this->emailAddress)) {
            $json['EmailAddress'] = $this->emailAddress;
        }
        if (isset($this->phoneNumber)) {
            $json['PhoneNumber']  = $this->phoneNumber;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
