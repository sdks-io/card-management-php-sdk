<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class RestrictionSearchCardResponseDataItems implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $bundleId;

    /**
     * @var SearchCardResponseRestrictions|null
     */
    private $restrictions;

    /**
     * @var array
     */
    private $restrictionCurrencyCode = [];

    /**
     * @var array
     */
    private $restrictionCurrencySymbol = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $cardTypeCode = [];

    /**
     * @var array
     */
    private $cardTypeId = [];

    /**
     * @var array
     */
    private $cardTypeName = [];

    /**
     * @var array
     */
    private $colCoCurrencyCode = [];

    /**
     * @var array
     */
    private $colCoCurrencySymbol = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $expiryDate = [];

    /**
     * @var bool|null
     */
    private $isCRT;

    /**
     * @var bool|null
     */
    private $isFleet;

    /**
     * @var bool|null
     */
    private $isInternational;

    /**
     * @var bool|null
     */
    private $isNational;

    /**
     * @var bool|null
     */
    private $isPartnerSitesIncluded;

    /**
     * @var bool|null
     */
    private $isShellSitesOnly;

    /**
     * @var array
     */
    private $issueDate = [];

    /**
     * @var array
     */
    private $issueNumber = [];

    /**
     * @var bool|null
     */
    private $isSuperseded;

    /**
     * @var bool|null
     */
    private $isVirtualCard;

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $purchaseCategoryCode = [];

    /**
     * @var array
     */
    private $purchaseCategoryId = [];

    /**
     * @var array
     */
    private $purchaseCategoryName = [];

    /**
     * @var array
     */
    private $statusDescription = [];

    /**
     * @var array
     */
    private $statusId = [];

    /**
     * @var array
     */
    private $vRN = [];

    /**
     * @var array
     */
    private $mediumTypeID = [];

    /**
     * @var array
     */
    private $mediumType = [];

    /**
     * Returns Bundle Id.
     * Bundle Id associated with card
     */
    public function getBundleId(): ?int
    {
        return $this->bundleId;
    }

    /**
     * Sets Bundle Id.
     * Bundle Id associated with card
     *
     * @maps BundleId
     */
    public function setBundleId(?int $bundleId): void
    {
        $this->bundleId = $bundleId;
    }

    /**
     * Returns Restrictions.
     */
    public function getRestrictions(): ?SearchCardResponseRestrictions
    {
        return $this->restrictions;
    }

    /**
     * Sets Restrictions.
     *
     * @maps Restrictions
     */
    public function setRestrictions(?SearchCardResponseRestrictions $restrictions): void
    {
        $this->restrictions = $restrictions;
    }

    /**
     * Returns Restriction Currency Code.
     * ISO currency code of the country.
     */
    public function getRestrictionCurrencyCode(): ?string
    {
        if (count($this->restrictionCurrencyCode) == 0) {
            return null;
        }
        return $this->restrictionCurrencyCode['value'];
    }

    /**
     * Sets Restriction Currency Code.
     * ISO currency code of the country.
     *
     * @maps RestrictionCurrencyCode
     */
    public function setRestrictionCurrencyCode(?string $restrictionCurrencyCode): void
    {
        $this->restrictionCurrencyCode['value'] = $restrictionCurrencyCode;
    }

    /**
     * Unsets Restriction Currency Code.
     * ISO currency code of the country.
     */
    public function unsetRestrictionCurrencyCode(): void
    {
        $this->restrictionCurrencyCode = [];
    }

    /**
     * Returns Restriction Currency Symbol.
     * Currency symbol of the country.
     */
    public function getRestrictionCurrencySymbol(): ?string
    {
        if (count($this->restrictionCurrencySymbol) == 0) {
            return null;
        }
        return $this->restrictionCurrencySymbol['value'];
    }

    /**
     * Sets Restriction Currency Symbol.
     * Currency symbol of the country.
     *
     * @maps RestrictionCurrencySymbol
     */
    public function setRestrictionCurrencySymbol(?string $restrictionCurrencySymbol): void
    {
        $this->restrictionCurrencySymbol['value'] = $restrictionCurrencySymbol;
    }

    /**
     * Unsets Restriction Currency Symbol.
     * Currency symbol of the country.
     */
    public function unsetRestrictionCurrencySymbol(): void
    {
        $this->restrictionCurrencySymbol = [];
    }

    /**
     * Returns Account Id.
     * Account ID
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Name.
     * Account Name
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Account Name
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Account Name
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * AccountShortName
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * AccountShortName
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * AccountShortName
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Card Id.
     * Unique Card
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public function getCardTypeCode(): ?string
    {
        if (count($this->cardTypeCode) == 0) {
            return null;
        }
        return $this->cardTypeCode['value'];
    }

    /**
     * Sets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN
     *
     * @maps CardTypeCode
     */
    public function setCardTypeCode(?string $cardTypeCode): void
    {
        $this->cardTypeCode['value'] = $cardTypeCode;
    }

    /**
     * Unsets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public function unsetCardTypeCode(): void
    {
        $this->cardTypeCode = [];
    }

    /**
     * Returns Card Type Id.
     * Card Type ID
     *
     * Example Id & Description:
     *
     * 1 - Philippines CRT 7077861
     *
     * 2- Philippines Fleet 7002861
     *
     * 5-SHELL FLEET- HONG KONG 7002821
     *
     * 6-SHELL NHF- HONG KONG 7002821
     *
     * 7-SHELL CRT- HONG KONG 7077821
     */
    public function getCardTypeId(): ?int
    {
        if (count($this->cardTypeId) == 0) {
            return null;
        }
        return $this->cardTypeId['value'];
    }

    /**
     * Sets Card Type Id.
     * Card Type ID
     *
     * Example Id & Description:
     *
     * 1 - Philippines CRT 7077861
     *
     * 2- Philippines Fleet 7002861
     *
     * 5-SHELL FLEET- HONG KONG 7002821
     *
     * 6-SHELL NHF- HONG KONG 7002821
     *
     * 7-SHELL CRT- HONG KONG 7077821
     *
     * @maps CardTypeId
     */
    public function setCardTypeId(?int $cardTypeId): void
    {
        $this->cardTypeId['value'] = $cardTypeId;
    }

    /**
     * Unsets Card Type Id.
     * Card Type ID
     *
     * Example Id & Description:
     *
     * 1 - Philippines CRT 7077861
     *
     * 2- Philippines Fleet 7002861
     *
     * 5-SHELL FLEET- HONG KONG 7002821
     *
     * 6-SHELL NHF- HONG KONG 7002821
     *
     * 7-SHELL CRT- HONG KONG 7077821
     */
    public function unsetCardTypeId(): void
    {
        $this->cardTypeId = [];
    }

    /**
     * Returns Card Type Name.
     * Card Type Name
     *
     * Example Id & Description:
     *
     * 1 - Philippines CRT 7077861
     *
     * 2- Philippines Fleet 7002861
     *
     * 5-SHELL FLEET- HONG KONG 7002821
     *
     * 6-SHELL NHF- HONG KONG 7002821
     *
     * 7-SHELL CRT- HONG KONG 7077821
     */
    public function getCardTypeName(): ?string
    {
        if (count($this->cardTypeName) == 0) {
            return null;
        }
        return $this->cardTypeName['value'];
    }

    /**
     * Sets Card Type Name.
     * Card Type Name
     *
     * Example Id & Description:
     *
     * 1 - Philippines CRT 7077861
     *
     * 2- Philippines Fleet 7002861
     *
     * 5-SHELL FLEET- HONG KONG 7002821
     *
     * 6-SHELL NHF- HONG KONG 7002821
     *
     * 7-SHELL CRT- HONG KONG 7077821
     *
     * @maps CardTypeName
     */
    public function setCardTypeName(?string $cardTypeName): void
    {
        $this->cardTypeName['value'] = $cardTypeName;
    }

    /**
     * Unsets Card Type Name.
     * Card Type Name
     *
     * Example Id & Description:
     *
     * 1 - Philippines CRT 7077861
     *
     * 2- Philippines Fleet 7002861
     *
     * 5-SHELL FLEET- HONG KONG 7002821
     *
     * 6-SHELL NHF- HONG KONG 7002821
     *
     * 7-SHELL CRT- HONG KONG 7077821
     */
    public function unsetCardTypeName(): void
    {
        $this->cardTypeName = [];
    }

    /**
     * Returns Col Co Currency Code.
     * ISO currency code of the country
     */
    public function getColCoCurrencyCode(): ?string
    {
        if (count($this->colCoCurrencyCode) == 0) {
            return null;
        }
        return $this->colCoCurrencyCode['value'];
    }

    /**
     * Sets Col Co Currency Code.
     * ISO currency code of the country
     *
     * @maps ColCoCurrencyCode
     */
    public function setColCoCurrencyCode(?string $colCoCurrencyCode): void
    {
        $this->colCoCurrencyCode['value'] = $colCoCurrencyCode;
    }

    /**
     * Unsets Col Co Currency Code.
     * ISO currency code of the country
     */
    public function unsetColCoCurrencyCode(): void
    {
        $this->colCoCurrencyCode = [];
    }

    /**
     * Returns Col Co Currency Symbol.
     * Currency symbol of the country
     */
    public function getColCoCurrencySymbol(): ?string
    {
        if (count($this->colCoCurrencySymbol) == 0) {
            return null;
        }
        return $this->colCoCurrencySymbol['value'];
    }

    /**
     * Sets Col Co Currency Symbol.
     * Currency symbol of the country
     *
     * @maps ColCoCurrencySymbol
     */
    public function setColCoCurrencySymbol(?string $colCoCurrencySymbol): void
    {
        $this->colCoCurrencySymbol['value'] = $colCoCurrencySymbol;
    }

    /**
     * Unsets Col Co Currency Symbol.
     * Currency symbol of the country
     */
    public function unsetColCoCurrencySymbol(): void
    {
        $this->colCoCurrencySymbol = [];
    }

    /**
     * Returns Currency Code.
     * ISO currency code of the Customer Currency
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * ISO currency code of the Customer Currency
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * ISO currency code of the Customer Currency
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Currency symbol of the Customer Currency Code
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Currency symbol of the Customer Currency Code
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Currency symbol of the Customer Currency Code
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Driver Name.
     * Driver name
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver name
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver name
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Expiry Date.
     * Expiry date of the card
     *
     * Format: yyyyMMdd
     */
    public function getExpiryDate(): ?string
    {
        if (count($this->expiryDate) == 0) {
            return null;
        }
        return $this->expiryDate['value'];
    }

    /**
     * Sets Expiry Date.
     * Expiry date of the card
     *
     * Format: yyyyMMdd
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate['value'] = $expiryDate;
    }

    /**
     * Unsets Expiry Date.
     * Expiry date of the card
     *
     * Format: yyyyMMdd
     */
    public function unsetExpiryDate(): void
    {
        $this->expiryDate = [];
    }

    /**
     * Returns Is CRT.
     * True if it is a CRT type card, else false
     */
    public function getIsCRT(): ?bool
    {
        return $this->isCRT;
    }

    /**
     * Sets Is CRT.
     * True if it is a CRT type card, else false
     *
     * @maps IsCRT
     */
    public function setIsCRT(?bool $isCRT): void
    {
        $this->isCRT = $isCRT;
    }

    /**
     * Returns Is Fleet.
     * True if it is a Fleet type card, else false
     */
    public function getIsFleet(): ?bool
    {
        return $this->isFleet;
    }

    /**
     * Sets Is Fleet.
     * True if it is a Fleet type card, else false
     *
     * @maps IsFleet
     */
    public function setIsFleet(?bool $isFleet): void
    {
        $this->isFleet = $isFleet;
    }

    /**
     * Returns Is International.
     * True if it is an international card, else false
     */
    public function getIsInternational(): ?bool
    {
        return $this->isInternational;
    }

    /**
     * Sets Is International.
     * True if it is an international card, else false
     *
     * @maps IsInternational
     */
    public function setIsInternational(?bool $isInternational): void
    {
        $this->isInternational = $isInternational;
    }

    /**
     * Returns Is National.
     * True if it is a national card, else false
     */
    public function getIsNational(): ?bool
    {
        return $this->isNational;
    }

    /**
     * Sets Is National.
     * True if it is a national card, else false
     *
     * @maps IsNational
     */
    public function setIsNational(?bool $isNational): void
    {
        $this->isNational = $isNational;
    }

    /**
     * Returns Is Partner Sites Included.
     * True if it is allowed at all partner sites, else false
     */
    public function getIsPartnerSitesIncluded(): ?bool
    {
        return $this->isPartnerSitesIncluded;
    }

    /**
     * Sets Is Partner Sites Included.
     * True if it is allowed at all partner sites, else false
     *
     * @maps IsPartnerSitesIncluded
     */
    public function setIsPartnerSitesIncluded(?bool $isPartnerSitesIncluded): void
    {
        $this->isPartnerSitesIncluded = $isPartnerSitesIncluded;
    }

    /**
     * Returns Is Shell Sites Only.
     * True if it is only allowed at Shell sites, else false
     */
    public function getIsShellSitesOnly(): ?bool
    {
        return $this->isShellSitesOnly;
    }

    /**
     * Sets Is Shell Sites Only.
     * True if it is only allowed at Shell sites, else false
     *
     * @maps IsShellSitesOnly
     */
    public function setIsShellSitesOnly(?bool $isShellSitesOnly): void
    {
        $this->isShellSitesOnly = $isShellSitesOnly;
    }

    /**
     * Returns Issue Date.
     * Issue date
     *
     * Format: yyyyMMdd
     */
    public function getIssueDate(): ?string
    {
        if (count($this->issueDate) == 0) {
            return null;
        }
        return $this->issueDate['value'];
    }

    /**
     * Sets Issue Date.
     * Issue date
     *
     * Format: yyyyMMdd
     *
     * @maps IssueDate
     */
    public function setIssueDate(?string $issueDate): void
    {
        $this->issueDate['value'] = $issueDate;
    }

    /**
     * Unsets Issue Date.
     * Issue date
     *
     * Format: yyyyMMdd
     */
    public function unsetIssueDate(): void
    {
        $this->issueDate = [];
    }

    /**
     * Returns Issue Number.
     * Issue Number
     */
    public function getIssueNumber(): ?int
    {
        if (count($this->issueNumber) == 0) {
            return null;
        }
        return $this->issueNumber['value'];
    }

    /**
     * Sets Issue Number.
     * Issue Number
     *
     * @maps IssueNumber
     */
    public function setIssueNumber(?int $issueNumber): void
    {
        $this->issueNumber['value'] = $issueNumber;
    }

    /**
     * Unsets Issue Number.
     * Issue Number
     */
    public function unsetIssueNumber(): void
    {
        $this->issueNumber = [];
    }

    /**
     * Returns Is Superseded.
     * True if a new card is issued with the same PAN, else false
     */
    public function getIsSuperseded(): ?bool
    {
        return $this->isSuperseded;
    }

    /**
     * Sets Is Superseded.
     * True if a new card is issued with the same PAN, else false
     *
     * @maps IsSuperseded
     */
    public function setIsSuperseded(?bool $isSuperseded): void
    {
        $this->isSuperseded = $isSuperseded;
    }

    /**
     * Returns Is Virtual Card.
     * True if it is a virtual card, else false
     */
    public function getIsVirtualCard(): ?bool
    {
        return $this->isVirtualCard;
    }

    /**
     * Sets Is Virtual Card.
     * True if it is a virtual card, else false
     *
     * @maps IsVirtualCard
     */
    public function setIsVirtualCard(?bool $isVirtualCard): void
    {
        $this->isVirtualCard = $isVirtualCard;
    }

    /**
     * Returns P AN.
     * Card PAN
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * Card PAN
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * Card PAN
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Purchase Category Code.
     * Purchase category code
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * 4 - VP and FuelSave
     *
     * 5 - Diesel ONLY
     *
     * 6 - Diesel and Lubricants
     *
     * 7 - VP and Lubricants
     *
     * 8 - VP and FuelSave and Lubricants
     */
    public function getPurchaseCategoryCode(): ?string
    {
        if (count($this->purchaseCategoryCode) == 0) {
            return null;
        }
        return $this->purchaseCategoryCode['value'];
    }

    /**
     * Sets Purchase Category Code.
     * Purchase category code
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * 4 - VP and FuelSave
     *
     * 5 - Diesel ONLY
     *
     * 6 - Diesel and Lubricants
     *
     * 7 - VP and Lubricants
     *
     * 8 - VP and FuelSave and Lubricants
     *
     * @maps PurchaseCategoryCode
     */
    public function setPurchaseCategoryCode(?string $purchaseCategoryCode): void
    {
        $this->purchaseCategoryCode['value'] = $purchaseCategoryCode;
    }

    /**
     * Unsets Purchase Category Code.
     * Purchase category code
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * 4 - VP and FuelSave
     *
     * 5 - Diesel ONLY
     *
     * 6 - Diesel and Lubricants
     *
     * 7 - VP and Lubricants
     *
     * 8 - VP and FuelSave and Lubricants
     */
    public function unsetPurchaseCategoryCode(): void
    {
        $this->purchaseCategoryCode = [];
    }

    /**
     * Returns Purchase Category Id.
     * Purchase category Id
     */
    public function getPurchaseCategoryId(): ?int
    {
        if (count($this->purchaseCategoryId) == 0) {
            return null;
        }
        return $this->purchaseCategoryId['value'];
    }

    /**
     * Sets Purchase Category Id.
     * Purchase category Id
     *
     * @maps PurchaseCategoryId
     */
    public function setPurchaseCategoryId(?int $purchaseCategoryId): void
    {
        $this->purchaseCategoryId['value'] = $purchaseCategoryId;
    }

    /**
     * Unsets Purchase Category Id.
     * Purchase category Id
     */
    public function unsetPurchaseCategoryId(): void
    {
        $this->purchaseCategoryId = [];
    }

    /**
     * Returns Purchase Category Name.
     * Purchase category name
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * 4 - VP and FuelSave
     *
     * 5 - Diesel ONLY
     *
     * 6 - Diesel and Lubricants
     *
     * 7 - VP and Lubricants
     *
     * 8 - VP and FuelSave and Lubricants
     */
    public function getPurchaseCategoryName(): ?string
    {
        if (count($this->purchaseCategoryName) == 0) {
            return null;
        }
        return $this->purchaseCategoryName['value'];
    }

    /**
     * Sets Purchase Category Name.
     * Purchase category name
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * 4 - VP and FuelSave
     *
     * 5 - Diesel ONLY
     *
     * 6 - Diesel and Lubricants
     *
     * 7 - VP and Lubricants
     *
     * 8 - VP and FuelSave and Lubricants
     *
     * @maps PurchaseCategoryName
     */
    public function setPurchaseCategoryName(?string $purchaseCategoryName): void
    {
        $this->purchaseCategoryName['value'] = $purchaseCategoryName;
    }

    /**
     * Unsets Purchase Category Name.
     * Purchase category name
     *
     * Example:
     *
     * 0 - All Fuels (without VP) and Lubricants
     *
     * 1 - FuelSave only
     *
     * 2 - FuelSave and Lubricants
     *
     * 3 - No Restrictions
     *
     * 4 - VP and FuelSave
     *
     * 5 - Diesel ONLY
     *
     * 6 - Diesel and Lubricants
     *
     * 7 - VP and Lubricants
     *
     * 8 - VP and FuelSave and Lubricants
     */
    public function unsetPurchaseCategoryName(): void
    {
        $this->purchaseCategoryName = [];
    }

    /**
     * Returns Status Description.
     * Status Description (Active, Temporarily Blocked, etc.,)
     */
    public function getStatusDescription(): ?string
    {
        if (count($this->statusDescription) == 0) {
            return null;
        }
        return $this->statusDescription['value'];
    }

    /**
     * Sets Status Description.
     * Status Description (Active, Temporarily Blocked, etc.,)
     *
     * @maps StatusDescription
     */
    public function setStatusDescription(?string $statusDescription): void
    {
        $this->statusDescription['value'] = $statusDescription;
    }

    /**
     * Unsets Status Description.
     * Status Description (Active, Temporarily Blocked, etc.,)
     */
    public function unsetStatusDescription(): void
    {
        $this->statusDescription = [];
    }

    /**
     * Returns Status Id.
     * Card Status id
     */
    public function getStatusId(): ?int
    {
        if (count($this->statusId) == 0) {
            return null;
        }
        return $this->statusId['value'];
    }

    /**
     * Sets Status Id.
     * Card Status id
     *
     * @maps StatusId
     */
    public function setStatusId(?int $statusId): void
    {
        $this->statusId['value'] = $statusId;
    }

    /**
     * Unsets Status Id.
     * Card Status id
     */
    public function unsetStatusId(): void
    {
        $this->statusId = [];
    }

    /**
     * Returns V RN.
     * Vehicle registration number
     */
    public function getVRN(): ?string
    {
        if (count($this->vRN) == 0) {
            return null;
        }
        return $this->vRN['value'];
    }

    /**
     * Sets V RN.
     * Vehicle registration number
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN['value'] = $vRN;
    }

    /**
     * Unsets V RN.
     * Vehicle registration number
     */
    public function unsetVRN(): void
    {
        $this->vRN = [];
    }

    /**
     * Returns Medium Type ID.
     * Id of the medium type identifier.
     *
     *
     *
     * Example: 1,2,4
     *
     *
     *
     * Full list below:
     *
     * 1 - Fuel Card
     *
     * 2 - Fuel Card with EV
     *
     * 4 - Fuel Card and Key fob Card
     *
     * 5 - Key fob
     *
     * 6 - Virtual Card
     *
     * 7 - NPII Token
     *
     * 8 – Smartpay
     */
    public function getMediumTypeID(): ?int
    {
        if (count($this->mediumTypeID) == 0) {
            return null;
        }
        return $this->mediumTypeID['value'];
    }

    /**
     * Sets Medium Type ID.
     * Id of the medium type identifier.
     *
     *
     *
     * Example: 1,2,4
     *
     *
     *
     * Full list below:
     *
     * 1 - Fuel Card
     *
     * 2 - Fuel Card with EV
     *
     * 4 - Fuel Card and Key fob Card
     *
     * 5 - Key fob
     *
     * 6 - Virtual Card
     *
     * 7 - NPII Token
     *
     * 8 – Smartpay
     *
     * @maps MediumTypeID
     */
    public function setMediumTypeID(?int $mediumTypeID): void
    {
        $this->mediumTypeID['value'] = $mediumTypeID;
    }

    /**
     * Unsets Medium Type ID.
     * Id of the medium type identifier.
     *
     *
     *
     * Example: 1,2,4
     *
     *
     *
     * Full list below:
     *
     * 1 - Fuel Card
     *
     * 2 - Fuel Card with EV
     *
     * 4 - Fuel Card and Key fob Card
     *
     * 5 - Key fob
     *
     * 6 - Virtual Card
     *
     * 7 - NPII Token
     *
     * 8 – Smartpay
     */
    public function unsetMediumTypeID(): void
    {
        $this->mediumTypeID = [];
    }

    /**
     * Returns Medium Type.
     * Name of the medium type identifier.
     *
     *
     *
     * Example: Fuel Card, Fuel Card with EV, Key fob
     *
     * Full list below:
     *
     * 1 - Fuel Card
     *
     * 2 - Fuel Card with EV
     *
     * 4 - Fuel Card and Key fob Card
     *
     * 5 - Key fob
     *
     * 6 - Virtual Card
     *
     * 7 - NPII Token
     *
     * 8 - Smartpay
     */
    public function getMediumType(): ?string
    {
        if (count($this->mediumType) == 0) {
            return null;
        }
        return $this->mediumType['value'];
    }

    /**
     * Sets Medium Type.
     * Name of the medium type identifier.
     *
     *
     *
     * Example: Fuel Card, Fuel Card with EV, Key fob
     *
     * Full list below:
     *
     * 1 - Fuel Card
     *
     * 2 - Fuel Card with EV
     *
     * 4 - Fuel Card and Key fob Card
     *
     * 5 - Key fob
     *
     * 6 - Virtual Card
     *
     * 7 - NPII Token
     *
     * 8 - Smartpay
     *
     * @maps MediumType
     */
    public function setMediumType(?string $mediumType): void
    {
        $this->mediumType['value'] = $mediumType;
    }

    /**
     * Unsets Medium Type.
     * Name of the medium type identifier.
     *
     *
     *
     * Example: Fuel Card, Fuel Card with EV, Key fob
     *
     * Full list below:
     *
     * 1 - Fuel Card
     *
     * 2 - Fuel Card with EV
     *
     * 4 - Fuel Card and Key fob Card
     *
     * 5 - Key fob
     *
     * 6 - Virtual Card
     *
     * 7 - NPII Token
     *
     * 8 - Smartpay
     */
    public function unsetMediumType(): void
    {
        $this->mediumType = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->bundleId)) {
            $json['BundleId']                  = $this->bundleId;
        }
        if (isset($this->restrictions)) {
            $json['Restrictions']              = $this->restrictions;
        }
        if (!empty($this->restrictionCurrencyCode)) {
            $json['RestrictionCurrencyCode']   = $this->restrictionCurrencyCode['value'];
        }
        if (!empty($this->restrictionCurrencySymbol)) {
            $json['RestrictionCurrencySymbol'] = $this->restrictionCurrencySymbol['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                 = $this->accountId['value'];
        }
        if (!empty($this->accountName)) {
            $json['AccountName']               = $this->accountName['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']             = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']          = $this->accountShortName['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                    = $this->cardId['value'];
        }
        if (!empty($this->cardTypeCode)) {
            $json['CardTypeCode']              = $this->cardTypeCode['value'];
        }
        if (!empty($this->cardTypeId)) {
            $json['CardTypeId']                = $this->cardTypeId['value'];
        }
        if (!empty($this->cardTypeName)) {
            $json['CardTypeName']              = $this->cardTypeName['value'];
        }
        if (!empty($this->colCoCurrencyCode)) {
            $json['ColCoCurrencyCode']         = $this->colCoCurrencyCode['value'];
        }
        if (!empty($this->colCoCurrencySymbol)) {
            $json['ColCoCurrencySymbol']       = $this->colCoCurrencySymbol['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']              = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']            = $this->currencySymbol['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                = $this->driverName['value'];
        }
        if (!empty($this->expiryDate)) {
            $json['ExpiryDate']                = $this->expiryDate['value'];
        }
        if (isset($this->isCRT)) {
            $json['IsCRT']                     = $this->isCRT;
        }
        if (isset($this->isFleet)) {
            $json['IsFleet']                   = $this->isFleet;
        }
        if (isset($this->isInternational)) {
            $json['IsInternational']           = $this->isInternational;
        }
        if (isset($this->isNational)) {
            $json['IsNational']                = $this->isNational;
        }
        if (isset($this->isPartnerSitesIncluded)) {
            $json['IsPartnerSitesIncluded']    = $this->isPartnerSitesIncluded;
        }
        if (isset($this->isShellSitesOnly)) {
            $json['IsShellSitesOnly']          = $this->isShellSitesOnly;
        }
        if (!empty($this->issueDate)) {
            $json['IssueDate']                 = $this->issueDate['value'];
        }
        if (!empty($this->issueNumber)) {
            $json['IssueNumber']               = $this->issueNumber['value'];
        }
        if (isset($this->isSuperseded)) {
            $json['IsSuperseded']              = $this->isSuperseded;
        }
        if (isset($this->isVirtualCard)) {
            $json['IsVirtualCard']             = $this->isVirtualCard;
        }
        if (!empty($this->pAN)) {
            $json['PAN']                       = $this->pAN['value'];
        }
        if (!empty($this->purchaseCategoryCode)) {
            $json['PurchaseCategoryCode']      = $this->purchaseCategoryCode['value'];
        }
        if (!empty($this->purchaseCategoryId)) {
            $json['PurchaseCategoryId']        = $this->purchaseCategoryId['value'];
        }
        if (!empty($this->purchaseCategoryName)) {
            $json['PurchaseCategoryName']      = $this->purchaseCategoryName['value'];
        }
        if (!empty($this->statusDescription)) {
            $json['StatusDescription']         = $this->statusDescription['value'];
        }
        if (!empty($this->statusId)) {
            $json['StatusId']                  = $this->statusId['value'];
        }
        if (!empty($this->vRN)) {
            $json['VRN']                       = $this->vRN['value'];
        }
        if (!empty($this->mediumTypeID)) {
            $json['MediumTypeID']              = $this->mediumTypeID['value'];
        }
        if (!empty($this->mediumType)) {
            $json['MediumType']                = $this->mediumType['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
