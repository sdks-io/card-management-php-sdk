<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class CardMoveResponseSuccessfulRequestsItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $moveCardReference = [];

    /**
     * Returns Account Number.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Id.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns P AN.
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Card Id.
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Move Card Reference.
     */
    public function getMoveCardReference(): ?int
    {
        if (count($this->moveCardReference) == 0) {
            return null;
        }
        return $this->moveCardReference['value'];
    }

    /**
     * Sets Move Card Reference.
     *
     * @maps MoveCardReference
     */
    public function setMoveCardReference(?int $moveCardReference): void
    {
        $this->moveCardReference['value'] = $moveCardReference;
    }

    /**
     * Unsets Move Card Reference.
     */
    public function unsetMoveCardReference(): void
    {
        $this->moveCardReference = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']     = $this->accountNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']         = $this->accountId['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']               = $this->pAN['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']            = $this->cardId['value'];
        }
        if (!empty($this->moveCardReference)) {
            $json['MoveCardReference'] = $this->moveCardReference['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
