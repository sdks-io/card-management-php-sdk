<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class AccountVelocityLimit implements \JsonSerializable
{
    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $period = [];

    /**
     * @var array
     */
    private $limit = [];

    /**
     * @var array
     */
    private $accumulation = [];

    /**
     * @var array
     */
    private $balance = [];

    /**
     * @var array
     */
    private $override = [];

    /**
     * @var array
     */
    private $productGroup = [];

    /**
     * @var array
     */
    private $threshold = [];

    /**
     * Returns Type.
     * Type of velocity (COUNT type is not present for limits of PERTRX period
     *
     * Possible Values: VALUE, VOLUME, COUNT
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     * Type of velocity (COUNT type is not present for limits of PERTRX period
     *
     * Possible Values: VALUE, VOLUME, COUNT
     *
     * @maps Type
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     * Type of velocity (COUNT type is not present for limits of PERTRX period
     *
     * Possible Values: VALUE, VOLUME, COUNT
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Period.
     * Duration of the velocity or threshold alert.
     *
     * Possible Values: DAILY, WEEKLY, MONTHLY, ANNUAL, LIFETIME, PERTRX
     */
    public function getPeriod(): ?string
    {
        if (count($this->period) == 0) {
            return null;
        }
        return $this->period['value'];
    }

    /**
     * Sets Period.
     * Duration of the velocity or threshold alert.
     *
     * Possible Values: DAILY, WEEKLY, MONTHLY, ANNUAL, LIFETIME, PERTRX
     *
     * @maps Period
     */
    public function setPeriod(?string $period): void
    {
        $this->period['value'] = $period;
    }

    /**
     * Unsets Period.
     * Duration of the velocity or threshold alert.
     *
     * Possible Values: DAILY, WEEKLY, MONTHLY, ANNUAL, LIFETIME, PERTRX
     */
    public function unsetPeriod(): void
    {
        $this->period = [];
    }

    /**
     * Returns Limit.
     * The limit associated with this velocity with the correct number of digits after the decimal point
     * according to the minor denomination of the currency of the card issuer (except for COUNT type
     * velocity).
     */
    public function getLimit(): ?float
    {
        if (count($this->limit) == 0) {
            return null;
        }
        return $this->limit['value'];
    }

    /**
     * Sets Limit.
     * The limit associated with this velocity with the correct number of digits after the decimal point
     * according to the minor denomination of the currency of the card issuer (except for COUNT type
     * velocity).
     *
     * @maps Limit
     */
    public function setLimit(?float $limit): void
    {
        $this->limit['value'] = $limit;
    }

    /**
     * Unsets Limit.
     * The limit associated with this velocity with the correct number of digits after the decimal point
     * according to the minor denomination of the currency of the card issuer (except for COUNT type
     * velocity).
     */
    public function unsetLimit(): void
    {
        $this->limit = [];
    }

    /**
     * Returns Accumulation.
     * The transaction accumulation during the current period with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     */
    public function getAccumulation(): ?float
    {
        if (count($this->accumulation) == 0) {
            return null;
        }
        return $this->accumulation['value'];
    }

    /**
     * Sets Accumulation.
     * The transaction accumulation during the current period with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     *
     * @maps Accumulation
     */
    public function setAccumulation(?float $accumulation): void
    {
        $this->accumulation['value'] = $accumulation;
    }

    /**
     * Unsets Accumulation.
     * The transaction accumulation during the current period with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     */
    public function unsetAccumulation(): void
    {
        $this->accumulation = [];
    }

    /**
     * Returns Balance.
     * The remaining/available balance at this point in time with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     */
    public function getBalance(): ?float
    {
        if (count($this->balance) == 0) {
            return null;
        }
        return $this->balance['value'];
    }

    /**
     * Sets Balance.
     * The remaining/available balance at this point in time with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     *
     * @maps Balance
     */
    public function setBalance(?float $balance): void
    {
        $this->balance['value'] = $balance;
    }

    /**
     * Unsets Balance.
     * The remaining/available balance at this point in time with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     */
    public function unsetBalance(): void
    {
        $this->balance = [];
    }

    /**
     * Returns Override.
     * Indicate if the limit is overridden or default. (false for default).
     */
    public function getOverride(): ?bool
    {
        if (count($this->override) == 0) {
            return null;
        }
        return $this->override['value'];
    }

    /**
     * Sets Override.
     * Indicate if the limit is overridden or default. (false for default).
     *
     * @maps Override
     */
    public function setOverride(?bool $override): void
    {
        $this->override['value'] = $override;
    }

    /**
     * Unsets Override.
     * Indicate if the limit is overridden or default. (false for default).
     */
    public function unsetOverride(): void
    {
        $this->override = [];
    }

    /**
     * Returns Product Group.
     * The reference group name for product differentiated velocities. This field cannot be used with
     * Volume type velocity.
     *
     * Example: RoadSvc
     *
     * This is an optional output field.
     */
    public function getProductGroup(): ?string
    {
        if (count($this->productGroup) == 0) {
            return null;
        }
        return $this->productGroup['value'];
    }

    /**
     * Sets Product Group.
     * The reference group name for product differentiated velocities. This field cannot be used with
     * Volume type velocity.
     *
     * Example: RoadSvc
     *
     * This is an optional output field.
     *
     * @maps ProductGroup
     */
    public function setProductGroup(?string $productGroup): void
    {
        $this->productGroup['value'] = $productGroup;
    }

    /**
     * Unsets Product Group.
     * The reference group name for product differentiated velocities. This field cannot be used with
     * Volume type velocity.
     *
     * Example: RoadSvc
     *
     * This is an optional output field.
     */
    public function unsetProductGroup(): void
    {
        $this->productGroup = [];
    }

    /**
     * Returns Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     */
    public function getThreshold(): ?float
    {
        if (count($this->threshold) == 0) {
            return null;
        }
        return $this->threshold['value'];
    }

    /**
     * Sets Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * @maps Threshold
     */
    public function setThreshold(?float $threshold): void
    {
        $this->threshold['value'] = $threshold;
    }

    /**
     * Unsets Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     */
    public function unsetThreshold(): void
    {
        $this->threshold = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->type)) {
            $json['Type']         = $this->type['value'];
        }
        if (!empty($this->period)) {
            $json['Period']       = $this->period['value'];
        }
        if (!empty($this->limit)) {
            $json['Limit']        = $this->limit['value'];
        }
        if (!empty($this->accumulation)) {
            $json['Accumulation'] = $this->accumulation['value'];
        }
        if (!empty($this->balance)) {
            $json['Balance']      = $this->balance['value'];
        }
        if (!empty($this->override)) {
            $json['Override']     = $this->override['value'];
        }
        if (!empty($this->productGroup)) {
            $json['ProductGroup'] = $this->productGroup['value'];
        }
        if (!empty($this->threshold)) {
            $json['Threshold']    = $this->threshold['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
