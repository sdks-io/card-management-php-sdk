<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class AccountVelocityLimit implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $period;

    /**
     * @var float|null
     */
    private $limit;

    /**
     * @var float|null
     */
    private $accumulation;

    /**
     * @var float|null
     */
    private $balance;

    /**
     * @var bool|null
     */
    private $override;

    /**
     * @var string|null
     */
    private $productGroup;

    /**
     * @var float|null
     */
    private $threshold;

    /**
     * Returns Type.
     * Type of velocity (COUNT type is not present for limits of PERTRX period
     * Possible Values: VALUE, VOLUME, COUNT
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type of velocity (COUNT type is not present for limits of PERTRX period
     * Possible Values: VALUE, VOLUME, COUNT
     *
     * @maps Type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Period.
     * Duration of the velocity or threshold alert.
     * Possible Values: DAILY, WEEKLY, MONTHLY, ANNUAL, LIFETIME, PERTRX
     */
    public function getPeriod(): ?string
    {
        return $this->period;
    }

    /**
     * Sets Period.
     * Duration of the velocity or threshold alert.
     * Possible Values: DAILY, WEEKLY, MONTHLY, ANNUAL, LIFETIME, PERTRX
     *
     * @maps Period
     */
    public function setPeriod(?string $period): void
    {
        $this->period = $period;
    }

    /**
     * Returns Limit.
     * The limit associated with this velocity with the correct number of digits after the decimal point
     * according to the minor denomination of the currency of the card issuer.
     * Example: 1500.55
     */
    public function getLimit(): ?float
    {
        return $this->limit;
    }

    /**
     * Sets Limit.
     * The limit associated with this velocity with the correct number of digits after the decimal point
     * according to the minor denomination of the currency of the card issuer.
     * Example: 1500.55
     *
     * @maps Limit
     */
    public function setLimit(?float $limit): void
    {
        $this->limit = $limit;
    }

    /**
     * Returns Accumulation.
     * The transaction accumulation during the current period with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     * Example: 1100.55
     */
    public function getAccumulation(): ?float
    {
        return $this->accumulation;
    }

    /**
     * Sets Accumulation.
     * The transaction accumulation during the current period with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     * Example: 1100.55
     *
     * @maps Accumulation
     */
    public function setAccumulation(?float $accumulation): void
    {
        $this->accumulation = $accumulation;
    }

    /**
     * Returns Balance.
     * The remaining/available balance at this point in time with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     * Example: 400.55
     */
    public function getBalance(): ?float
    {
        return $this->balance;
    }

    /**
     * Sets Balance.
     * The remaining/available balance at this point in time with the correct number of digits after the
     * decimal point according to the minor denomination of the currency of the card issuer (except for
     * COUNT type velocity). Not present for PERTRX period.
     * Example: 400.55
     *
     * @maps Balance
     */
    public function setBalance(?float $balance): void
    {
        $this->balance = $balance;
    }

    /**
     * Returns Override.
     * Indicate if the limit is overridden or default. (false for default).
     * Example: false
     */
    public function getOverride(): ?bool
    {
        return $this->override;
    }

    /**
     * Sets Override.
     * Indicate if the limit is overridden or default. (false for default).
     * Example: false
     *
     * @maps Override
     */
    public function setOverride(?bool $override): void
    {
        $this->override = $override;
    }

    /**
     * Returns Product Group.
     * The reference group name for product differentiated velocities. This field cannot be used with
     * Volume type velocity.
     * Example: RoadSvc
     * This is an optional output field.
     */
    public function getProductGroup(): ?string
    {
        return $this->productGroup;
    }

    /**
     * Sets Product Group.
     * The reference group name for product differentiated velocities. This field cannot be used with
     * Volume type velocity.
     * Example: RoadSvc
     * This is an optional output field.
     *
     * @maps ProductGroup
     */
    public function setProductGroup(?string $productGroup): void
    {
        $this->productGroup = $productGroup;
    }

    /**
     * Returns Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     * Example: 50.55
     * This is an optional output field.
     */
    public function getThreshold(): ?float
    {
        return $this->threshold;
    }

    /**
     * Sets Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     * Example: 50.55
     * This is an optional output field.
     *
     * @maps Threshold
     */
    public function setThreshold(?float $threshold): void
    {
        $this->threshold = $threshold;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->type)) {
            $json['Type']         = $this->type;
        }
        if (isset($this->period)) {
            $json['Period']       = $this->period;
        }
        if (isset($this->limit)) {
            $json['Limit']        = $this->limit;
        }
        if (isset($this->accumulation)) {
            $json['Accumulation'] = $this->accumulation;
        }
        if (isset($this->balance)) {
            $json['Balance']      = $this->balance;
        }
        if (isset($this->override)) {
            $json['Override']     = $this->override;
        }
        if (isset($this->productGroup)) {
            $json['ProductGroup'] = $this->productGroup;
        }
        if (isset($this->threshold)) {
            $json['Threshold']    = $this->threshold;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
