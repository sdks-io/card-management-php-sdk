<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

/**
 * Details of the usage restrictions such as day/week/month value and volume restrictions applied on
 * the card.
 */
class UsageRestriction implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $level;

    /**
     * @var float|null
     */
    private $dailySpend;

    /**
     * @var float|null
     */
    private $dailySpendAccumulated;

    /**
     * @var float|null
     */
    private $dailySpendBalance;

    /**
     * @var bool|null
     */
    private $dailySpendOverride;

    /**
     * @var float|null
     */
    private $dailySpendThreshold;

    /**
     * @var float|null
     */
    private $weeklySpend;

    /**
     * @var float|null
     */
    private $weeklySpendAccumulated;

    /**
     * @var float|null
     */
    private $weeklySpendBalance;

    /**
     * @var bool|null
     */
    private $weeklySpendOverride;

    /**
     * @var float|null
     */
    private $weeklySpendThreshold;

    /**
     * @var float|null
     */
    private $monthlySpend;

    /**
     * @var float|null
     */
    private $monthlySpendAccumulated;

    /**
     * @var float|null
     */
    private $monthlySpendBalance;

    /**
     * @var bool|null
     */
    private $monthlySpendOverride;

    /**
     * @var float|null
     */
    private $perTransactionSpend;

    /**
     * @var bool|null
     */
    private $perTransactionSpendOverride;

    /**
     * @var float|null
     */
    private $annualSpend;

    /**
     * @var float|null
     */
    private $annualSpendAccumulated;

    /**
     * @var float|null
     */
    private $annualSpendBalance;

    /**
     * @var bool|null
     */
    private $annualSpendOverride;

    /**
     * @var float|null
     */
    private $annualSpendThreshold;

    /**
     * @var float|null
     */
    private $lifeTimeSpend;

    /**
     * @var float|null
     */
    private $lifeTimeSpendAccumulated;

    /**
     * @var float|null
     */
    private $lifeTimeSpendBalance;

    /**
     * @var bool|null
     */
    private $lifeTimeSpendOverride;

    /**
     * @var float|null
     */
    private $lifeTimeSpendThreshold;

    /**
     * @var float|null
     */
    private $dailyVolume;

    /**
     * @var float|null
     */
    private $dailyVolumeAccumulated;

    /**
     * @var float|null
     */
    private $dailyVolumeBalance;

    /**
     * @var float|null
     */
    private $dailyVolumeOverride;

    /**
     * @var float|null
     */
    private $dailyVolumeThreshold;

    /**
     * @var float|null
     */
    private $weeklyVolume;

    /**
     * @var float|null
     */
    private $weeklyVolumeAccumulated;

    /**
     * @var float|null
     */
    private $weeklyVolumeBalance;

    /**
     * @var bool|null
     */
    private $weeklyVolumeOverride;

    /**
     * @var float|null
     */
    private $weeklyVolumeThreshold;

    /**
     * @var float|null
     */
    private $monthlyVolume;

    /**
     * @var float|null
     */
    private $monthlyVolumeAccumulated;

    /**
     * @var float|null
     */
    private $monthlyVolumeBalance;

    /**
     * @var bool|null
     */
    private $monthlyVolumeOverride;

    /**
     * @var float|null
     */
    private $monthlyVolumeThreshold;

    /**
     * @var float|null
     */
    private $perTransactionVolume;

    /**
     * @var bool|null
     */
    private $perTransactionVolumeOverride;

    /**
     * @var float|null
     */
    private $annualVolume;

    /**
     * @var float|null
     */
    private $annualVolumeAccumulated;

    /**
     * @var float|null
     */
    private $annualVolumeBalance;

    /**
     * @var bool|null
     */
    private $annualVolumeOverride;

    /**
     * @var float|null
     */
    private $annualVolumeThreshold;

    /**
     * @var float|null
     */
    private $lifeTimeVolume;

    /**
     * @var float|null
     */
    private $lifeTimeVolumeAccumulated;

    /**
     * @var float|null
     */
    private $lifeTimeVolumeBalance;

    /**
     * @var bool|null
     */
    private $lifeTimeVolumeOverride;

    /**
     * @var float|null
     */
    private $lifeTimeVolumeThreshold;

    /**
     * @var float|null
     */
    private $dailyTransactionCount;

    /**
     * @var float|null
     */
    private $dailyTransactionAccumulated;

    /**
     * @var float|null
     */
    private $dailyTransactionBalance;

    /**
     * @var bool|null
     */
    private $dailyTransactionOverride;

    /**
     * @var float|null
     */
    private $dailyTransactionThreshold;

    /**
     * @var float|null
     */
    private $weeklyTransactionCount;

    /**
     * @var float|null
     */
    private $weeklyTransactionAccumulated;

    /**
     * @var float|null
     */
    private $weeklyTransactionBalance;

    /**
     * @var bool|null
     */
    private $weeklyTransactionOverride;

    /**
     * @var float|null
     */
    private $weeklyTransactionThreshold;

    /**
     * @var float|null
     */
    private $monthlyTransactionCount;

    /**
     * @var float|null
     */
    private $monthlyTransactionAccumulated;

    /**
     * @var float|null
     */
    private $monthlyTransactionBalance;

    /**
     * @var bool|null
     */
    private $monthlyTransactionOverride;

    /**
     * @var float|null
     */
    private $monthlyTransactionThreshold;

    /**
     * @var float|null
     */
    private $annualTransactionCount;

    /**
     * @var float|null
     */
    private $annualTransactionAccumulated;

    /**
     * @var float|null
     */
    private $annualTransactionBalance;

    /**
     * @var bool|null
     */
    private $annualTransactionOverride;

    /**
     * @var float|null
     */
    private $annualTransactionThreshold;

    /**
     * @var float|null
     */
    private $lifeTimeTransactionCount;

    /**
     * @var float|null
     */
    private $lifeTimeTransactionAccumulated;

    /**
     * @var float|null
     */
    private $lifeTimeTransactionBalance;

    /**
     * @var bool|null
     */
    private $lifeTimeTransactionOverride;

    /**
     * @var float|null
     */
    private $lifeTimeTransactionThreshold;

    /**
     * Returns Level.
     * Usage limit is applied on the card from this level.
     *
     * Valid values –
     *
     * • Inherited
     *
     * • Card
     *
     * When Card level usage restrictions are not present, the API will return the inherited restrictions.
     *
     * Note: -This field is deprecated. Instead, use ‘Override’.
     */
    public function getLevel(): ?string
    {
        return $this->level;
    }

    /**
     * Sets Level.
     * Usage limit is applied on the card from this level.
     *
     * Valid values –
     *
     * • Inherited
     *
     * • Card
     *
     * When Card level usage restrictions are not present, the API will return the inherited restrictions.
     *
     * Note: -This field is deprecated. Instead, use ‘Override’.
     *
     * @maps Level
     */
    public function setLevel(?string $level): void
    {
        $this->level = $level;
    }

    /**
     * Returns Daily Spend.
     * Maximum spend value (amount) allowed per day.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getDailySpend(): ?float
    {
        return $this->dailySpend;
    }

    /**
     * Sets Daily Spend.
     * Maximum spend value (amount) allowed per day.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps DailySpend
     */
    public function setDailySpend(?float $dailySpend): void
    {
        $this->dailySpend = $dailySpend;
    }

    /**
     * Returns Daily Spend Accumulated.
     * Balance spend value (amount) available for rest of the day.
     */
    public function getDailySpendAccumulated(): ?float
    {
        return $this->dailySpendAccumulated;
    }

    /**
     * Sets Daily Spend Accumulated.
     * Balance spend value (amount) available for rest of the day.
     *
     * @maps DailySpendAccumulated
     */
    public function setDailySpendAccumulated(?float $dailySpendAccumulated): void
    {
        $this->dailySpendAccumulated = $dailySpendAccumulated;
    }

    /**
     * Returns Daily Spend Balance.
     * Balance spend value (amount) available for rest of the day.
     */
    public function getDailySpendBalance(): ?float
    {
        return $this->dailySpendBalance;
    }

    /**
     * Sets Daily Spend Balance.
     * Balance spend value (amount) available for rest of the day.
     *
     * @maps DailySpendBalance
     */
    public function setDailySpendBalance(?float $dailySpendBalance): void
    {
        $this->dailySpendBalance = $dailySpendBalance;
    }

    /**
     * Returns Daily Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getDailySpendOverride(): ?bool
    {
        return $this->dailySpendOverride;
    }

    /**
     * Sets Daily Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps DailySpendOverride
     */
    public function setDailySpendOverride(?bool $dailySpendOverride): void
    {
        $this->dailySpendOverride = $dailySpendOverride;
    }

    /**
     * Returns Daily Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     */
    public function getDailySpendThreshold(): ?float
    {
        return $this->dailySpendThreshold;
    }

    /**
     * Sets Daily Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * @maps DailySpendThreshold
     */
    public function setDailySpendThreshold(?float $dailySpendThreshold): void
    {
        $this->dailySpendThreshold = $dailySpendThreshold;
    }

    /**
     * Returns Weekly Spend.
     * Maximum spend value (amount) allowed per week.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getWeeklySpend(): ?float
    {
        return $this->weeklySpend;
    }

    /**
     * Sets Weekly Spend.
     * Maximum spend value (amount) allowed per week.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps WeeklySpend
     */
    public function setWeeklySpend(?float $weeklySpend): void
    {
        $this->weeklySpend = $weeklySpend;
    }

    /**
     * Returns Weekly Spend Accumulated.
     * Value (amount) spent during the week.
     */
    public function getWeeklySpendAccumulated(): ?float
    {
        return $this->weeklySpendAccumulated;
    }

    /**
     * Sets Weekly Spend Accumulated.
     * Value (amount) spent during the week.
     *
     * @maps WeeklySpendAccumulated
     */
    public function setWeeklySpendAccumulated(?float $weeklySpendAccumulated): void
    {
        $this->weeklySpendAccumulated = $weeklySpendAccumulated;
    }

    /**
     * Returns Weekly Spend Balance.
     * Balance spend value (amount) available for rest of the week.
     */
    public function getWeeklySpendBalance(): ?float
    {
        return $this->weeklySpendBalance;
    }

    /**
     * Sets Weekly Spend Balance.
     * Balance spend value (amount) available for rest of the week.
     *
     * @maps WeeklySpendBalance
     */
    public function setWeeklySpendBalance(?float $weeklySpendBalance): void
    {
        $this->weeklySpendBalance = $weeklySpendBalance;
    }

    /**
     * Returns Weekly Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getWeeklySpendOverride(): ?bool
    {
        return $this->weeklySpendOverride;
    }

    /**
     * Sets Weekly Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps WeeklySpendOverride
     */
    public function setWeeklySpendOverride(?bool $weeklySpendOverride): void
    {
        $this->weeklySpendOverride = $weeklySpendOverride;
    }

    /**
     * Returns Weekly Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getWeeklySpendThreshold(): ?float
    {
        return $this->weeklySpendThreshold;
    }

    /**
     * Sets Weekly Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps WeeklySpendThreshold
     */
    public function setWeeklySpendThreshold(?float $weeklySpendThreshold): void
    {
        $this->weeklySpendThreshold = $weeklySpendThreshold;
    }

    /**
     * Returns Monthly Spend.
     * Maximum spend value (amount) allowed per month.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getMonthlySpend(): ?float
    {
        return $this->monthlySpend;
    }

    /**
     * Sets Monthly Spend.
     * Maximum spend value (amount) allowed per month.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps MonthlySpend
     */
    public function setMonthlySpend(?float $monthlySpend): void
    {
        $this->monthlySpend = $monthlySpend;
    }

    /**
     * Returns Monthly Spend Accumulated.
     * Value (amount) spent during the month.
     */
    public function getMonthlySpendAccumulated(): ?float
    {
        return $this->monthlySpendAccumulated;
    }

    /**
     * Sets Monthly Spend Accumulated.
     * Value (amount) spent during the month.
     *
     * @maps MonthlySpendAccumulated
     */
    public function setMonthlySpendAccumulated(?float $monthlySpendAccumulated): void
    {
        $this->monthlySpendAccumulated = $monthlySpendAccumulated;
    }

    /**
     * Returns Monthly Spend Balance.
     * Balance spend value (amount) available for rest of the month.
     */
    public function getMonthlySpendBalance(): ?float
    {
        return $this->monthlySpendBalance;
    }

    /**
     * Sets Monthly Spend Balance.
     * Balance spend value (amount) available for rest of the month.
     *
     * @maps MonthlySpendBalance
     */
    public function setMonthlySpendBalance(?float $monthlySpendBalance): void
    {
        $this->monthlySpendBalance = $monthlySpendBalance;
    }

    /**
     * Returns Monthly Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getMonthlySpendOverride(): ?bool
    {
        return $this->monthlySpendOverride;
    }

    /**
     * Sets Monthly Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps MonthlySpendOverride
     */
    public function setMonthlySpendOverride(?bool $monthlySpendOverride): void
    {
        $this->monthlySpendOverride = $monthlySpendOverride;
    }

    /**
     * Returns Per Transaction Spend.
     * Maximum spend value (amount) allowed per transaction.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getPerTransactionSpend(): ?float
    {
        return $this->perTransactionSpend;
    }

    /**
     * Sets Per Transaction Spend.
     * Maximum spend value (amount) allowed per transaction.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps PerTransactionSpend
     */
    public function setPerTransactionSpend(?float $perTransactionSpend): void
    {
        $this->perTransactionSpend = $perTransactionSpend;
    }

    /**
     * Returns Per Transaction Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getPerTransactionSpendOverride(): ?bool
    {
        return $this->perTransactionSpendOverride;
    }

    /**
     * Sets Per Transaction Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps PerTransactionSpendOverride
     */
    public function setPerTransactionSpendOverride(?bool $perTransactionSpendOverride): void
    {
        $this->perTransactionSpendOverride = $perTransactionSpendOverride;
    }

    /**
     * Returns Annual Spend.
     * Maximum spend value (amount) allowed per annum.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getAnnualSpend(): ?float
    {
        return $this->annualSpend;
    }

    /**
     * Sets Annual Spend.
     * Maximum spend value (amount) allowed per annum.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps AnnualSpend
     */
    public function setAnnualSpend(?float $annualSpend): void
    {
        $this->annualSpend = $annualSpend;
    }

    /**
     * Returns Annual Spend Accumulated.
     * Value (amount) spent during the year.
     */
    public function getAnnualSpendAccumulated(): ?float
    {
        return $this->annualSpendAccumulated;
    }

    /**
     * Sets Annual Spend Accumulated.
     * Value (amount) spent during the year.
     *
     * @maps AnnualSpendAccumulated
     */
    public function setAnnualSpendAccumulated(?float $annualSpendAccumulated): void
    {
        $this->annualSpendAccumulated = $annualSpendAccumulated;
    }

    /**
     * Returns Annual Spend Balance.
     * Balance spend value (amount) available for rest of the year.
     */
    public function getAnnualSpendBalance(): ?float
    {
        return $this->annualSpendBalance;
    }

    /**
     * Sets Annual Spend Balance.
     * Balance spend value (amount) available for rest of the year.
     *
     * @maps AnnualSpendBalance
     */
    public function setAnnualSpendBalance(?float $annualSpendBalance): void
    {
        $this->annualSpendBalance = $annualSpendBalance;
    }

    /**
     * Returns Annual Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getAnnualSpendOverride(): ?bool
    {
        return $this->annualSpendOverride;
    }

    /**
     * Sets Annual Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps AnnualSpendOverride
     */
    public function setAnnualSpendOverride(?bool $annualSpendOverride): void
    {
        $this->annualSpendOverride = $annualSpendOverride;
    }

    /**
     * Returns Annual Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getAnnualSpendThreshold(): ?float
    {
        return $this->annualSpendThreshold;
    }

    /**
     * Sets Annual Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps AnnualSpendThreshold
     */
    public function setAnnualSpendThreshold(?float $annualSpendThreshold): void
    {
        $this->annualSpendThreshold = $annualSpendThreshold;
    }

    /**
     * Returns Life Time Spend.
     * Maximum spend value (amount) allowed in card’s life time.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited
     */
    public function getLifeTimeSpend(): ?float
    {
        return $this->lifeTimeSpend;
    }

    /**
     * Sets Life Time Spend.
     * Maximum spend value (amount) allowed in card’s life time.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited
     *
     * @maps LifeTimeSpend
     */
    public function setLifeTimeSpend(?float $lifeTimeSpend): void
    {
        $this->lifeTimeSpend = $lifeTimeSpend;
    }

    /**
     * Returns Life Time Spend Accumulated.
     * Value (amount) spent during the card’s life time
     */
    public function getLifeTimeSpendAccumulated(): ?float
    {
        return $this->lifeTimeSpendAccumulated;
    }

    /**
     * Sets Life Time Spend Accumulated.
     * Value (amount) spent during the card’s life time
     *
     * @maps LifeTimeSpendAccumulated
     */
    public function setLifeTimeSpendAccumulated(?float $lifeTimeSpendAccumulated): void
    {
        $this->lifeTimeSpendAccumulated = $lifeTimeSpendAccumulated;
    }

    /**
     * Returns Life Time Spend Balance.
     * Balance spend value (amount) available for rest of the card’s life time.
     */
    public function getLifeTimeSpendBalance(): ?float
    {
        return $this->lifeTimeSpendBalance;
    }

    /**
     * Sets Life Time Spend Balance.
     * Balance spend value (amount) available for rest of the card’s life time.
     *
     * @maps LifeTimeSpendBalance
     */
    public function setLifeTimeSpendBalance(?float $lifeTimeSpendBalance): void
    {
        $this->lifeTimeSpendBalance = $lifeTimeSpendBalance;
    }

    /**
     * Returns Life Time Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getLifeTimeSpendOverride(): ?bool
    {
        return $this->lifeTimeSpendOverride;
    }

    /**
     * Sets Life Time Spend Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps LifeTimeSpendOverride
     */
    public function setLifeTimeSpendOverride(?bool $lifeTimeSpendOverride): void
    {
        $this->lifeTimeSpendOverride = $lifeTimeSpendOverride;
    }

    /**
     * Returns Life Time Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getLifeTimeSpendThreshold(): ?float
    {
        return $this->lifeTimeSpendThreshold;
    }

    /**
     * Sets Life Time Spend Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps LifeTimeSpendThreshold
     */
    public function setLifeTimeSpendThreshold(?float $lifeTimeSpendThreshold): void
    {
        $this->lifeTimeSpendThreshold = $lifeTimeSpendThreshold;
    }

    /**
     * Returns Daily Volume.
     * Maximum volume (quantity) allowed per day.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getDailyVolume(): ?float
    {
        return $this->dailyVolume;
    }

    /**
     * Sets Daily Volume.
     * Maximum volume (quantity) allowed per day.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps DailyVolume
     */
    public function setDailyVolume(?float $dailyVolume): void
    {
        $this->dailyVolume = $dailyVolume;
    }

    /**
     * Returns Daily Volume Accumulated.
     * Volume (quantity) bought during the day.
     */
    public function getDailyVolumeAccumulated(): ?float
    {
        return $this->dailyVolumeAccumulated;
    }

    /**
     * Sets Daily Volume Accumulated.
     * Volume (quantity) bought during the day.
     *
     * @maps DailyVolumeAccumulated
     */
    public function setDailyVolumeAccumulated(?float $dailyVolumeAccumulated): void
    {
        $this->dailyVolumeAccumulated = $dailyVolumeAccumulated;
    }

    /**
     * Returns Daily Volume Balance.
     * Balance volume (quantity) available for rest of the day.
     */
    public function getDailyVolumeBalance(): ?float
    {
        return $this->dailyVolumeBalance;
    }

    /**
     * Sets Daily Volume Balance.
     * Balance volume (quantity) available for rest of the day.
     *
     * @maps DailyVolumeBalance
     */
    public function setDailyVolumeBalance(?float $dailyVolumeBalance): void
    {
        $this->dailyVolumeBalance = $dailyVolumeBalance;
    }

    /**
     * Returns Daily Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getDailyVolumeOverride(): ?float
    {
        return $this->dailyVolumeOverride;
    }

    /**
     * Sets Daily Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps DailyVolumeOverride
     */
    public function setDailyVolumeOverride(?float $dailyVolumeOverride): void
    {
        $this->dailyVolumeOverride = $dailyVolumeOverride;
    }

    /**
     * Returns Daily Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getDailyVolumeThreshold(): ?float
    {
        return $this->dailyVolumeThreshold;
    }

    /**
     * Sets Daily Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps DailyVolumeThreshold
     */
    public function setDailyVolumeThreshold(?float $dailyVolumeThreshold): void
    {
        $this->dailyVolumeThreshold = $dailyVolumeThreshold;
    }

    /**
     * Returns Weekly Volume.
     * Maximum volume (quantity) allowed per week.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getWeeklyVolume(): ?float
    {
        return $this->weeklyVolume;
    }

    /**
     * Sets Weekly Volume.
     * Maximum volume (quantity) allowed per week.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps WeeklyVolume
     */
    public function setWeeklyVolume(?float $weeklyVolume): void
    {
        $this->weeklyVolume = $weeklyVolume;
    }

    /**
     * Returns Weekly Volume Accumulated.
     * Volume (quantity) bought during the week.
     */
    public function getWeeklyVolumeAccumulated(): ?float
    {
        return $this->weeklyVolumeAccumulated;
    }

    /**
     * Sets Weekly Volume Accumulated.
     * Volume (quantity) bought during the week.
     *
     * @maps WeeklyVolumeAccumulated
     */
    public function setWeeklyVolumeAccumulated(?float $weeklyVolumeAccumulated): void
    {
        $this->weeklyVolumeAccumulated = $weeklyVolumeAccumulated;
    }

    /**
     * Returns Weekly Volume Balance.
     * Balance volume (quantity) available for rest of the week.
     */
    public function getWeeklyVolumeBalance(): ?float
    {
        return $this->weeklyVolumeBalance;
    }

    /**
     * Sets Weekly Volume Balance.
     * Balance volume (quantity) available for rest of the week.
     *
     * @maps WeeklyVolumeBalance
     */
    public function setWeeklyVolumeBalance(?float $weeklyVolumeBalance): void
    {
        $this->weeklyVolumeBalance = $weeklyVolumeBalance;
    }

    /**
     * Returns Weekly Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getWeeklyVolumeOverride(): ?bool
    {
        return $this->weeklyVolumeOverride;
    }

    /**
     * Sets Weekly Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps WeeklyVolumeOverride
     */
    public function setWeeklyVolumeOverride(?bool $weeklyVolumeOverride): void
    {
        $this->weeklyVolumeOverride = $weeklyVolumeOverride;
    }

    /**
     * Returns Weekly Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getWeeklyVolumeThreshold(): ?float
    {
        return $this->weeklyVolumeThreshold;
    }

    /**
     * Sets Weekly Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps WeeklyVolumeThreshold
     */
    public function setWeeklyVolumeThreshold(?float $weeklyVolumeThreshold): void
    {
        $this->weeklyVolumeThreshold = $weeklyVolumeThreshold;
    }

    /**
     * Returns Monthly Volume.
     * Maximum volume (quantity) allowed per month.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getMonthlyVolume(): ?float
    {
        return $this->monthlyVolume;
    }

    /**
     * Sets Monthly Volume.
     * Maximum volume (quantity) allowed per month.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps MonthlyVolume
     */
    public function setMonthlyVolume(?float $monthlyVolume): void
    {
        $this->monthlyVolume = $monthlyVolume;
    }

    /**
     * Returns Monthly Volume Accumulated.
     * Volume (quantity) bought during the month.
     */
    public function getMonthlyVolumeAccumulated(): ?float
    {
        return $this->monthlyVolumeAccumulated;
    }

    /**
     * Sets Monthly Volume Accumulated.
     * Volume (quantity) bought during the month.
     *
     * @maps MonthlyVolumeAccumulated
     */
    public function setMonthlyVolumeAccumulated(?float $monthlyVolumeAccumulated): void
    {
        $this->monthlyVolumeAccumulated = $monthlyVolumeAccumulated;
    }

    /**
     * Returns Monthly Volume Balance.
     * Balance volume (quantity) available for rest of the month.
     */
    public function getMonthlyVolumeBalance(): ?float
    {
        return $this->monthlyVolumeBalance;
    }

    /**
     * Sets Monthly Volume Balance.
     * Balance volume (quantity) available for rest of the month.
     *
     * @maps MonthlyVolumeBalance
     */
    public function setMonthlyVolumeBalance(?float $monthlyVolumeBalance): void
    {
        $this->monthlyVolumeBalance = $monthlyVolumeBalance;
    }

    /**
     * Returns Monthly Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     */
    public function getMonthlyVolumeOverride(): ?bool
    {
        return $this->monthlyVolumeOverride;
    }

    /**
     * Sets Monthly Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * @maps MonthlyVolumeOverride
     */
    public function setMonthlyVolumeOverride(?bool $monthlyVolumeOverride): void
    {
        $this->monthlyVolumeOverride = $monthlyVolumeOverride;
    }

    /**
     * Returns Monthly Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getMonthlyVolumeThreshold(): ?float
    {
        return $this->monthlyVolumeThreshold;
    }

    /**
     * Sets Monthly Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps MonthlyVolumeThreshold
     */
    public function setMonthlyVolumeThreshold(?float $monthlyVolumeThreshold): void
    {
        $this->monthlyVolumeThreshold = $monthlyVolumeThreshold;
    }

    /**
     * Returns Per Transaction Volume.
     * Maximum volume (quantity) allowed per transaction.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getPerTransactionVolume(): ?float
    {
        return $this->perTransactionVolume;
    }

    /**
     * Sets Per Transaction Volume.
     * Maximum volume (quantity) allowed per transaction.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps PerTransactionVolume
     */
    public function setPerTransactionVolume(?float $perTransactionVolume): void
    {
        $this->perTransactionVolume = $perTransactionVolume;
    }

    /**
     * Returns Per Transaction Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getPerTransactionVolumeOverride(): ?bool
    {
        return $this->perTransactionVolumeOverride;
    }

    /**
     * Sets Per Transaction Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps PerTransactionVolumeOverride
     */
    public function setPerTransactionVolumeOverride(?bool $perTransactionVolumeOverride): void
    {
        $this->perTransactionVolumeOverride = $perTransactionVolumeOverride;
    }

    /**
     * Returns Annual Volume.
     * Maximum volume (quantity) allowed per annum.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getAnnualVolume(): ?float
    {
        return $this->annualVolume;
    }

    /**
     * Sets Annual Volume.
     * Maximum volume (quantity) allowed per annum.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps AnnualVolume
     */
    public function setAnnualVolume(?float $annualVolume): void
    {
        $this->annualVolume = $annualVolume;
    }

    /**
     * Returns Annual Volume Accumulated.
     * Volume (quantity) bought during the year.
     */
    public function getAnnualVolumeAccumulated(): ?float
    {
        return $this->annualVolumeAccumulated;
    }

    /**
     * Sets Annual Volume Accumulated.
     * Volume (quantity) bought during the year.
     *
     * @maps AnnualVolumeAccumulated
     */
    public function setAnnualVolumeAccumulated(?float $annualVolumeAccumulated): void
    {
        $this->annualVolumeAccumulated = $annualVolumeAccumulated;
    }

    /**
     * Returns Annual Volume Balance.
     * Balance volume (quantity) available for rest of the year.
     */
    public function getAnnualVolumeBalance(): ?float
    {
        return $this->annualVolumeBalance;
    }

    /**
     * Sets Annual Volume Balance.
     * Balance volume (quantity) available for rest of the year.
     *
     * @maps AnnualVolumeBalance
     */
    public function setAnnualVolumeBalance(?float $annualVolumeBalance): void
    {
        $this->annualVolumeBalance = $annualVolumeBalance;
    }

    /**
     * Returns Annual Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getAnnualVolumeOverride(): ?bool
    {
        return $this->annualVolumeOverride;
    }

    /**
     * Sets Annual Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps AnnualVolumeOverride
     */
    public function setAnnualVolumeOverride(?bool $annualVolumeOverride): void
    {
        $this->annualVolumeOverride = $annualVolumeOverride;
    }

    /**
     * Returns Annual Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getAnnualVolumeThreshold(): ?float
    {
        return $this->annualVolumeThreshold;
    }

    /**
     * Sets Annual Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps AnnualVolumeThreshold
     */
    public function setAnnualVolumeThreshold(?float $annualVolumeThreshold): void
    {
        $this->annualVolumeThreshold = $annualVolumeThreshold;
    }

    /**
     * Returns Life Time Volume.
     * Maximum volume (quantity) allowed in the card’s life time.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getLifeTimeVolume(): ?float
    {
        return $this->lifeTimeVolume;
    }

    /**
     * Sets Life Time Volume.
     * Maximum volume (quantity) allowed in the card’s life time.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps LifeTimeVolume
     */
    public function setLifeTimeVolume(?float $lifeTimeVolume): void
    {
        $this->lifeTimeVolume = $lifeTimeVolume;
    }

    /**
     * Returns Life Time Volume Accumulated.
     * Volume (quantity) bought during the card’s life time.
     */
    public function getLifeTimeVolumeAccumulated(): ?float
    {
        return $this->lifeTimeVolumeAccumulated;
    }

    /**
     * Sets Life Time Volume Accumulated.
     * Volume (quantity) bought during the card’s life time.
     *
     * @maps LifeTimeVolumeAccumulated
     */
    public function setLifeTimeVolumeAccumulated(?float $lifeTimeVolumeAccumulated): void
    {
        $this->lifeTimeVolumeAccumulated = $lifeTimeVolumeAccumulated;
    }

    /**
     * Returns Life Time Volume Balance.
     * Balance volume (quantity) available for rest of the card’s life time.
     */
    public function getLifeTimeVolumeBalance(): ?float
    {
        return $this->lifeTimeVolumeBalance;
    }

    /**
     * Sets Life Time Volume Balance.
     * Balance volume (quantity) available for rest of the card’s life time.
     *
     * @maps LifeTimeVolumeBalance
     */
    public function setLifeTimeVolumeBalance(?float $lifeTimeVolumeBalance): void
    {
        $this->lifeTimeVolumeBalance = $lifeTimeVolumeBalance;
    }

    /**
     * Returns Life Time Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getLifeTimeVolumeOverride(): ?bool
    {
        return $this->lifeTimeVolumeOverride;
    }

    /**
     * Sets Life Time Volume Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps LifeTimeVolumeOverride
     */
    public function setLifeTimeVolumeOverride(?bool $lifeTimeVolumeOverride): void
    {
        $this->lifeTimeVolumeOverride = $lifeTimeVolumeOverride;
    }

    /**
     * Returns Life Time Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getLifeTimeVolumeThreshold(): ?float
    {
        return $this->lifeTimeVolumeThreshold;
    }

    /**
     * Sets Life Time Volume Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps LifeTimeVolumeThreshold
     */
    public function setLifeTimeVolumeThreshold(?float $lifeTimeVolumeThreshold): void
    {
        $this->lifeTimeVolumeThreshold = $lifeTimeVolumeThreshold;
    }

    /**
     * Returns Daily Transaction Count.
     * Maximum number of transactions allowed per day.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited
     */
    public function getDailyTransactionCount(): ?float
    {
        return $this->dailyTransactionCount;
    }

    /**
     * Sets Daily Transaction Count.
     * Maximum number of transactions allowed per day.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited
     *
     * @maps DailyTransactionCount
     */
    public function setDailyTransactionCount(?float $dailyTransactionCount): void
    {
        $this->dailyTransactionCount = $dailyTransactionCount;
    }

    /**
     * Returns Daily Transaction Accumulated.
     * Number of times the card is used during the day.
     */
    public function getDailyTransactionAccumulated(): ?float
    {
        return $this->dailyTransactionAccumulated;
    }

    /**
     * Sets Daily Transaction Accumulated.
     * Number of times the card is used during the day.
     *
     * @maps DailyTransactionAccumulated
     */
    public function setDailyTransactionAccumulated(?float $dailyTransactionAccumulated): void
    {
        $this->dailyTransactionAccumulated = $dailyTransactionAccumulated;
    }

    /**
     * Returns Daily Transaction Balance.
     * Number of times the card could be used in rest of the day.
     */
    public function getDailyTransactionBalance(): ?float
    {
        return $this->dailyTransactionBalance;
    }

    /**
     * Sets Daily Transaction Balance.
     * Number of times the card could be used in rest of the day.
     *
     * @maps DailyTransactionBalance
     */
    public function setDailyTransactionBalance(?float $dailyTransactionBalance): void
    {
        $this->dailyTransactionBalance = $dailyTransactionBalance;
    }

    /**
     * Returns Daily Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getDailyTransactionOverride(): ?bool
    {
        return $this->dailyTransactionOverride;
    }

    /**
     * Sets Daily Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps DailyTransactionOverride
     */
    public function setDailyTransactionOverride(?bool $dailyTransactionOverride): void
    {
        $this->dailyTransactionOverride = $dailyTransactionOverride;
    }

    /**
     * Returns Daily Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getDailyTransactionThreshold(): ?float
    {
        return $this->dailyTransactionThreshold;
    }

    /**
     * Sets Daily Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps DailyTransactionThreshold
     */
    public function setDailyTransactionThreshold(?float $dailyTransactionThreshold): void
    {
        $this->dailyTransactionThreshold = $dailyTransactionThreshold;
    }

    /**
     * Returns Weekly Transaction Count.
     * Maximum number of transactions allowed per week.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getWeeklyTransactionCount(): ?float
    {
        return $this->weeklyTransactionCount;
    }

    /**
     * Sets Weekly Transaction Count.
     * Maximum number of transactions allowed per week.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps WeeklyTransactionCount
     */
    public function setWeeklyTransactionCount(?float $weeklyTransactionCount): void
    {
        $this->weeklyTransactionCount = $weeklyTransactionCount;
    }

    /**
     * Returns Weekly Transaction Accumulated.
     * Number of times the card is used during the week
     */
    public function getWeeklyTransactionAccumulated(): ?float
    {
        return $this->weeklyTransactionAccumulated;
    }

    /**
     * Sets Weekly Transaction Accumulated.
     * Number of times the card is used during the week
     *
     * @maps WeeklyTransactionAccumulated
     */
    public function setWeeklyTransactionAccumulated(?float $weeklyTransactionAccumulated): void
    {
        $this->weeklyTransactionAccumulated = $weeklyTransactionAccumulated;
    }

    /**
     * Returns Weekly Transaction Balance.
     * Number of times the card could be used in rest of the week.
     */
    public function getWeeklyTransactionBalance(): ?float
    {
        return $this->weeklyTransactionBalance;
    }

    /**
     * Sets Weekly Transaction Balance.
     * Number of times the card could be used in rest of the week.
     *
     * @maps WeeklyTransactionBalance
     */
    public function setWeeklyTransactionBalance(?float $weeklyTransactionBalance): void
    {
        $this->weeklyTransactionBalance = $weeklyTransactionBalance;
    }

    /**
     * Returns Weekly Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getWeeklyTransactionOverride(): ?bool
    {
        return $this->weeklyTransactionOverride;
    }

    /**
     * Sets Weekly Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps WeeklyTransactionOverride
     */
    public function setWeeklyTransactionOverride(?bool $weeklyTransactionOverride): void
    {
        $this->weeklyTransactionOverride = $weeklyTransactionOverride;
    }

    /**
     * Returns Weekly Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getWeeklyTransactionThreshold(): ?float
    {
        return $this->weeklyTransactionThreshold;
    }

    /**
     * Sets Weekly Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps WeeklyTransactionThreshold
     */
    public function setWeeklyTransactionThreshold(?float $weeklyTransactionThreshold): void
    {
        $this->weeklyTransactionThreshold = $weeklyTransactionThreshold;
    }

    /**
     * Returns Monthly Transaction Count.
     * Maximum number of transactions allowed per month.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getMonthlyTransactionCount(): ?float
    {
        return $this->monthlyTransactionCount;
    }

    /**
     * Sets Monthly Transaction Count.
     * Maximum number of transactions allowed per month.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps MonthlyTransactionCount
     */
    public function setMonthlyTransactionCount(?float $monthlyTransactionCount): void
    {
        $this->monthlyTransactionCount = $monthlyTransactionCount;
    }

    /**
     * Returns Monthly Transaction Accumulated.
     * Number of times the card is used during the month
     */
    public function getMonthlyTransactionAccumulated(): ?float
    {
        return $this->monthlyTransactionAccumulated;
    }

    /**
     * Sets Monthly Transaction Accumulated.
     * Number of times the card is used during the month
     *
     * @maps MonthlyTransactionAccumulated
     */
    public function setMonthlyTransactionAccumulated(?float $monthlyTransactionAccumulated): void
    {
        $this->monthlyTransactionAccumulated = $monthlyTransactionAccumulated;
    }

    /**
     * Returns Monthly Transaction Balance.
     * Number of times the card could be used in rest of the month.
     */
    public function getMonthlyTransactionBalance(): ?float
    {
        return $this->monthlyTransactionBalance;
    }

    /**
     * Sets Monthly Transaction Balance.
     * Number of times the card could be used in rest of the month.
     *
     * @maps MonthlyTransactionBalance
     */
    public function setMonthlyTransactionBalance(?float $monthlyTransactionBalance): void
    {
        $this->monthlyTransactionBalance = $monthlyTransactionBalance;
    }

    /**
     * Returns Monthly Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getMonthlyTransactionOverride(): ?bool
    {
        return $this->monthlyTransactionOverride;
    }

    /**
     * Sets Monthly Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps MonthlyTransactionOverride
     */
    public function setMonthlyTransactionOverride(?bool $monthlyTransactionOverride): void
    {
        $this->monthlyTransactionOverride = $monthlyTransactionOverride;
    }

    /**
     * Returns Monthly Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getMonthlyTransactionThreshold(): ?float
    {
        return $this->monthlyTransactionThreshold;
    }

    /**
     * Sets Monthly Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps MonthlyTransactionThreshold
     */
    public function setMonthlyTransactionThreshold(?float $monthlyTransactionThreshold): void
    {
        $this->monthlyTransactionThreshold = $monthlyTransactionThreshold;
    }

    /**
     * Returns Annual Transaction Count.
     * Maximum number of transactions allowed per annum.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     */
    public function getAnnualTransactionCount(): ?float
    {
        return $this->annualTransactionCount;
    }

    /**
     * Sets Annual Transaction Count.
     * Maximum number of transactions allowed per annum.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * @maps AnnualTransactionCount
     */
    public function setAnnualTransactionCount(?float $annualTransactionCount): void
    {
        $this->annualTransactionCount = $annualTransactionCount;
    }

    /**
     * Returns Annual Transaction Accumulated.
     * Number of times the card is used during the year.
     */
    public function getAnnualTransactionAccumulated(): ?float
    {
        return $this->annualTransactionAccumulated;
    }

    /**
     * Sets Annual Transaction Accumulated.
     * Number of times the card is used during the year.
     *
     * @maps AnnualTransactionAccumulated
     */
    public function setAnnualTransactionAccumulated(?float $annualTransactionAccumulated): void
    {
        $this->annualTransactionAccumulated = $annualTransactionAccumulated;
    }

    /**
     * Returns Annual Transaction Balance.
     * Number of times the card could be used in rest of the year.
     */
    public function getAnnualTransactionBalance(): ?float
    {
        return $this->annualTransactionBalance;
    }

    /**
     * Sets Annual Transaction Balance.
     * Number of times the card could be used in rest of the year.
     *
     * @maps AnnualTransactionBalance
     */
    public function setAnnualTransactionBalance(?float $annualTransactionBalance): void
    {
        $this->annualTransactionBalance = $annualTransactionBalance;
    }

    /**
     * Returns Annual Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getAnnualTransactionOverride(): ?bool
    {
        return $this->annualTransactionOverride;
    }

    /**
     * Sets Annual Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps AnnualTransactionOverride
     */
    public function setAnnualTransactionOverride(?bool $annualTransactionOverride): void
    {
        $this->annualTransactionOverride = $annualTransactionOverride;
    }

    /**
     * Returns Annual Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getAnnualTransactionThreshold(): ?float
    {
        return $this->annualTransactionThreshold;
    }

    /**
     * Sets Annual Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps AnnualTransactionThreshold
     */
    public function setAnnualTransactionThreshold(?float $annualTransactionThreshold): void
    {
        $this->annualTransactionThreshold = $annualTransactionThreshold;
    }

    /**
     * Returns Life Time Transaction Count.
     * Maximum number of transactions allowed in the card’s life time.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     */
    public function getLifeTimeTransactionCount(): ?float
    {
        return $this->lifeTimeTransactionCount;
    }

    /**
     * Sets Life Time Transaction Count.
     * Maximum number of transactions allowed in the card’s life time.
     *
     * Card limit ‘0’ represents the value is inherited and inherited limit could be calculated by adding
     * accumulated and balance.
     *
     * However, Inherited limit ‘0’ represents unlimited.
     *
     * @maps LifeTimeTransactionCount
     */
    public function setLifeTimeTransactionCount(?float $lifeTimeTransactionCount): void
    {
        $this->lifeTimeTransactionCount = $lifeTimeTransactionCount;
    }

    /**
     * Returns Life Time Transaction Accumulated.
     * Number of times the card is used during the card’s life time.
     */
    public function getLifeTimeTransactionAccumulated(): ?float
    {
        return $this->lifeTimeTransactionAccumulated;
    }

    /**
     * Sets Life Time Transaction Accumulated.
     * Number of times the card is used during the card’s life time.
     *
     * @maps LifeTimeTransactionAccumulated
     */
    public function setLifeTimeTransactionAccumulated(?float $lifeTimeTransactionAccumulated): void
    {
        $this->lifeTimeTransactionAccumulated = $lifeTimeTransactionAccumulated;
    }

    /**
     * Returns Life Time Transaction Balance.
     * Number of times the card could be used in rest of the card’s life time.
     */
    public function getLifeTimeTransactionBalance(): ?float
    {
        return $this->lifeTimeTransactionBalance;
    }

    /**
     * Sets Life Time Transaction Balance.
     * Number of times the card could be used in rest of the card’s life time.
     *
     * @maps LifeTimeTransactionBalance
     */
    public function setLifeTimeTransactionBalance(?float $lifeTimeTransactionBalance): void
    {
        $this->lifeTimeTransactionBalance = $lifeTimeTransactionBalance;
    }

    /**
     * Returns Life Time Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     */
    public function getLifeTimeTransactionOverride(): ?bool
    {
        return $this->lifeTimeTransactionOverride;
    }

    /**
     * Sets Life Time Transaction Override.
     * Indicate if the limit is overridden or default. (False for default).
     *
     * Example: false
     *
     * @maps LifeTimeTransactionOverride
     */
    public function setLifeTimeTransactionOverride(?bool $lifeTimeTransactionOverride): void
    {
        $this->lifeTimeTransactionOverride = $lifeTimeTransactionOverride;
    }

    /**
     * Returns Life Time Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     */
    public function getLifeTimeTransactionThreshold(): ?float
    {
        return $this->lifeTimeTransactionThreshold;
    }

    /**
     * Sets Life Time Transaction Threshold.
     * The limit to trigger an alert if the balance after a transaction reaches it or below. 0 indicates no
     * alerts will be sent. Not present if not set (issuer value threshold limit applies if available). Not
     * present for COUNT type velocity.
     *
     * Example: 50.55
     *
     * This is an optional output field.
     *
     * @maps LifeTimeTransactionThreshold
     */
    public function setLifeTimeTransactionThreshold(?float $lifeTimeTransactionThreshold): void
    {
        $this->lifeTimeTransactionThreshold = $lifeTimeTransactionThreshold;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->level)) {
            $json['Level']                          = $this->level;
        }
        if (isset($this->dailySpend)) {
            $json['DailySpend']                     = $this->dailySpend;
        }
        if (isset($this->dailySpendAccumulated)) {
            $json['DailySpendAccumulated']          = $this->dailySpendAccumulated;
        }
        if (isset($this->dailySpendBalance)) {
            $json['DailySpendBalance']              = $this->dailySpendBalance;
        }
        if (isset($this->dailySpendOverride)) {
            $json['DailySpendOverride']             = $this->dailySpendOverride;
        }
        if (isset($this->dailySpendThreshold)) {
            $json['DailySpendThreshold']            = $this->dailySpendThreshold;
        }
        if (isset($this->weeklySpend)) {
            $json['WeeklySpend']                    = $this->weeklySpend;
        }
        if (isset($this->weeklySpendAccumulated)) {
            $json['WeeklySpendAccumulated']         = $this->weeklySpendAccumulated;
        }
        if (isset($this->weeklySpendBalance)) {
            $json['WeeklySpendBalance']             = $this->weeklySpendBalance;
        }
        if (isset($this->weeklySpendOverride)) {
            $json['WeeklySpendOverride']            = $this->weeklySpendOverride;
        }
        if (isset($this->weeklySpendThreshold)) {
            $json['WeeklySpendThreshold']           = $this->weeklySpendThreshold;
        }
        if (isset($this->monthlySpend)) {
            $json['MonthlySpend']                   = $this->monthlySpend;
        }
        if (isset($this->monthlySpendAccumulated)) {
            $json['MonthlySpendAccumulated']        = $this->monthlySpendAccumulated;
        }
        if (isset($this->monthlySpendBalance)) {
            $json['MonthlySpendBalance']            = $this->monthlySpendBalance;
        }
        if (isset($this->monthlySpendOverride)) {
            $json['MonthlySpendOverride']           = $this->monthlySpendOverride;
        }
        if (isset($this->perTransactionSpend)) {
            $json['PerTransactionSpend']            = $this->perTransactionSpend;
        }
        if (isset($this->perTransactionSpendOverride)) {
            $json['PerTransactionSpendOverride']    = $this->perTransactionSpendOverride;
        }
        if (isset($this->annualSpend)) {
            $json['AnnualSpend']                    = $this->annualSpend;
        }
        if (isset($this->annualSpendAccumulated)) {
            $json['AnnualSpendAccumulated']         = $this->annualSpendAccumulated;
        }
        if (isset($this->annualSpendBalance)) {
            $json['AnnualSpendBalance']             = $this->annualSpendBalance;
        }
        if (isset($this->annualSpendOverride)) {
            $json['AnnualSpendOverride']            = $this->annualSpendOverride;
        }
        if (isset($this->annualSpendThreshold)) {
            $json['AnnualSpendThreshold']           = $this->annualSpendThreshold;
        }
        if (isset($this->lifeTimeSpend)) {
            $json['LifeTimeSpend']                  = $this->lifeTimeSpend;
        }
        if (isset($this->lifeTimeSpendAccumulated)) {
            $json['LifeTimeSpendAccumulated']       = $this->lifeTimeSpendAccumulated;
        }
        if (isset($this->lifeTimeSpendBalance)) {
            $json['LifeTimeSpendBalance']           = $this->lifeTimeSpendBalance;
        }
        if (isset($this->lifeTimeSpendOverride)) {
            $json['LifeTimeSpendOverride']          = $this->lifeTimeSpendOverride;
        }
        if (isset($this->lifeTimeSpendThreshold)) {
            $json['LifeTimeSpendThreshold']         = $this->lifeTimeSpendThreshold;
        }
        if (isset($this->dailyVolume)) {
            $json['DailyVolume']                    = $this->dailyVolume;
        }
        if (isset($this->dailyVolumeAccumulated)) {
            $json['DailyVolumeAccumulated']         = $this->dailyVolumeAccumulated;
        }
        if (isset($this->dailyVolumeBalance)) {
            $json['DailyVolumeBalance']             = $this->dailyVolumeBalance;
        }
        if (isset($this->dailyVolumeOverride)) {
            $json['DailyVolumeOverride']            = $this->dailyVolumeOverride;
        }
        if (isset($this->dailyVolumeThreshold)) {
            $json['DailyVolumeThreshold']           = $this->dailyVolumeThreshold;
        }
        if (isset($this->weeklyVolume)) {
            $json['WeeklyVolume']                   = $this->weeklyVolume;
        }
        if (isset($this->weeklyVolumeAccumulated)) {
            $json['WeeklyVolumeAccumulated']        = $this->weeklyVolumeAccumulated;
        }
        if (isset($this->weeklyVolumeBalance)) {
            $json['WeeklyVolumeBalance']            = $this->weeklyVolumeBalance;
        }
        if (isset($this->weeklyVolumeOverride)) {
            $json['WeeklyVolumeOverride']           = $this->weeklyVolumeOverride;
        }
        if (isset($this->weeklyVolumeThreshold)) {
            $json['WeeklyVolumeThreshold']          = $this->weeklyVolumeThreshold;
        }
        if (isset($this->monthlyVolume)) {
            $json['MonthlyVolume']                  = $this->monthlyVolume;
        }
        if (isset($this->monthlyVolumeAccumulated)) {
            $json['MonthlyVolumeAccumulated']       = $this->monthlyVolumeAccumulated;
        }
        if (isset($this->monthlyVolumeBalance)) {
            $json['MonthlyVolumeBalance']           = $this->monthlyVolumeBalance;
        }
        if (isset($this->monthlyVolumeOverride)) {
            $json['MonthlyVolumeOverride']          = $this->monthlyVolumeOverride;
        }
        if (isset($this->monthlyVolumeThreshold)) {
            $json['MonthlyVolumeThreshold']         = $this->monthlyVolumeThreshold;
        }
        if (isset($this->perTransactionVolume)) {
            $json['PerTransactionVolume']           = $this->perTransactionVolume;
        }
        if (isset($this->perTransactionVolumeOverride)) {
            $json['PerTransactionVolumeOverride']   = $this->perTransactionVolumeOverride;
        }
        if (isset($this->annualVolume)) {
            $json['AnnualVolume']                   = $this->annualVolume;
        }
        if (isset($this->annualVolumeAccumulated)) {
            $json['AnnualVolumeAccumulated']        = $this->annualVolumeAccumulated;
        }
        if (isset($this->annualVolumeBalance)) {
            $json['AnnualVolumeBalance']            = $this->annualVolumeBalance;
        }
        if (isset($this->annualVolumeOverride)) {
            $json['AnnualVolumeOverride']           = $this->annualVolumeOverride;
        }
        if (isset($this->annualVolumeThreshold)) {
            $json['AnnualVolumeThreshold']          = $this->annualVolumeThreshold;
        }
        if (isset($this->lifeTimeVolume)) {
            $json['LifeTimeVolume']                 = $this->lifeTimeVolume;
        }
        if (isset($this->lifeTimeVolumeAccumulated)) {
            $json['LifeTimeVolumeAccumulated']      = $this->lifeTimeVolumeAccumulated;
        }
        if (isset($this->lifeTimeVolumeBalance)) {
            $json['LifeTimeVolumeBalance']          = $this->lifeTimeVolumeBalance;
        }
        if (isset($this->lifeTimeVolumeOverride)) {
            $json['LifeTimeVolumeOverride']         = $this->lifeTimeVolumeOverride;
        }
        if (isset($this->lifeTimeVolumeThreshold)) {
            $json['LifeTimeVolumeThreshold']        = $this->lifeTimeVolumeThreshold;
        }
        if (isset($this->dailyTransactionCount)) {
            $json['DailyTransactionCount']          = $this->dailyTransactionCount;
        }
        if (isset($this->dailyTransactionAccumulated)) {
            $json['DailyTransactionAccumulated']    = $this->dailyTransactionAccumulated;
        }
        if (isset($this->dailyTransactionBalance)) {
            $json['DailyTransactionBalance']        = $this->dailyTransactionBalance;
        }
        if (isset($this->dailyTransactionOverride)) {
            $json['DailyTransactionOverride']       = $this->dailyTransactionOverride;
        }
        if (isset($this->dailyTransactionThreshold)) {
            $json['DailyTransactionThreshold']      = $this->dailyTransactionThreshold;
        }
        if (isset($this->weeklyTransactionCount)) {
            $json['WeeklyTransactionCount']         = $this->weeklyTransactionCount;
        }
        if (isset($this->weeklyTransactionAccumulated)) {
            $json['WeeklyTransactionAccumulated']   = $this->weeklyTransactionAccumulated;
        }
        if (isset($this->weeklyTransactionBalance)) {
            $json['WeeklyTransactionBalance']       = $this->weeklyTransactionBalance;
        }
        if (isset($this->weeklyTransactionOverride)) {
            $json['WeeklyTransactionOverride']      = $this->weeklyTransactionOverride;
        }
        if (isset($this->weeklyTransactionThreshold)) {
            $json['WeeklyTransactionThreshold']     = $this->weeklyTransactionThreshold;
        }
        if (isset($this->monthlyTransactionCount)) {
            $json['MonthlyTransactionCount']        = $this->monthlyTransactionCount;
        }
        if (isset($this->monthlyTransactionAccumulated)) {
            $json['MonthlyTransactionAccumulated']  = $this->monthlyTransactionAccumulated;
        }
        if (isset($this->monthlyTransactionBalance)) {
            $json['MonthlyTransactionBalance']      = $this->monthlyTransactionBalance;
        }
        if (isset($this->monthlyTransactionOverride)) {
            $json['MonthlyTransactionOverride']     = $this->monthlyTransactionOverride;
        }
        if (isset($this->monthlyTransactionThreshold)) {
            $json['MonthlyTransactionThreshold']    = $this->monthlyTransactionThreshold;
        }
        if (isset($this->annualTransactionCount)) {
            $json['AnnualTransactionCount']         = $this->annualTransactionCount;
        }
        if (isset($this->annualTransactionAccumulated)) {
            $json['AnnualTransactionAccumulated']   = $this->annualTransactionAccumulated;
        }
        if (isset($this->annualTransactionBalance)) {
            $json['AnnualTransactionBalance']       = $this->annualTransactionBalance;
        }
        if (isset($this->annualTransactionOverride)) {
            $json['AnnualTransactionOverride']      = $this->annualTransactionOverride;
        }
        if (isset($this->annualTransactionThreshold)) {
            $json['AnnualTransactionThreshold']     = $this->annualTransactionThreshold;
        }
        if (isset($this->lifeTimeTransactionCount)) {
            $json['LifeTimeTransactionCount']       = $this->lifeTimeTransactionCount;
        }
        if (isset($this->lifeTimeTransactionAccumulated)) {
            $json['LifeTimeTransactionAccumulated'] = $this->lifeTimeTransactionAccumulated;
        }
        if (isset($this->lifeTimeTransactionBalance)) {
            $json['LifeTimeTransactionBalance']     = $this->lifeTimeTransactionBalance;
        }
        if (isset($this->lifeTimeTransactionOverride)) {
            $json['LifeTimeTransactionOverride']    = $this->lifeTimeTransactionOverride;
        }
        if (isset($this->lifeTimeTransactionThreshold)) {
            $json['LifeTimeTransactionThreshold']   = $this->lifeTimeTransactionThreshold;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
