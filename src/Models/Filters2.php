<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class Filters2 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var int|null
     */
    private $referenceNumber;

    /**
     * @var int|null
     */
    private $referenceType;

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $orderRequestId = [];

    /**
     * Returns Account Id.
     * Account ID of the customer.<br/> Optional if AccountNumber is passed, else mandatory. <br/> This
     * input is a search criterion, if given.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.<br/> Optional if AccountNumber is passed, else mandatory. <br/> This
     * input is a search criterion, if given.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the customer.<br/> Optional if AccountNumber is passed, else mandatory. <br/> This
     * input is a search criterion, if given.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.<br/> Optional if AccountId is passed, else mandatory.<br/> This
     * input is a search criterion, if given.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.<br/> Optional if AccountId is passed, else mandatory.<br/> This
     * input is a search criterion, if given.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.<br/> Optional if AccountId is passed, else mandatory.<br/> This
     * input is a search criterion, if given.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer. <br />
     * Optional – when ‘ReferenceNumber’ is provided.<br />
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer. <br />
     * Optional – when ‘ReferenceNumber’ is provided.<br />
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer. <br />
     * Optional – when ‘ReferenceNumber’ is provided.<br />
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id (in ) of the selected payer. <br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘ColCoId’ or ‘ColCoCode’ is mandatory.
     * <br />
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id (in ) of the selected payer. <br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘ColCoId’ or ‘ColCoCode’ is mandatory.
     * <br />
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id (in ) of the selected payer. <br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘ColCoId’ or ‘ColCoCode’ is mandatory.
     * <br />
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Country Code.
     * ISO 3166 Alpha-2 Country Code for the customer and card owning country.
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * ISO 3166 Alpha-2 Country Code for the customer and card owning country.
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * ISO 3166 Alpha-2 Country Code for the customer and card owning country.
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer) of the selected payer.<br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘PayerId’ or ‘PayerNumber’ is mandatory.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer) of the selected payer.<br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘PayerId’ or ‘PayerNumber’ is mandatory.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer) of the selected payer.<br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘PayerId’ or ‘PayerNumber’ is mandatory.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘PayerId’ or ‘PayerNumber’ is mandatory.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘PayerId’ or ‘PayerNumber’ is mandatory.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.<br />
     * Optional – when ‘ReferenceNumber’ is provided. Else, either ‘PayerId’ or ‘PayerNumber’ is mandatory.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Reference Number.
     * Reference number of the Card Order/ Bulk Card Order/ Order Card Request.<br />
     * Mandatory when ColCo and Payer fields are not provided. Else, optional.
     */
    public function getReferenceNumber(): ?int
    {
        return $this->referenceNumber;
    }

    /**
     * Sets Reference Number.
     * Reference number of the Card Order/ Bulk Card Order/ Order Card Request.<br />
     * Mandatory when ColCo and Payer fields are not provided. Else, optional.
     *
     * @maps ReferenceNumber
     */
    public function setReferenceNumber(?int $referenceNumber): void
    {
        $this->referenceNumber = $referenceNumber;
    }

    /**
     * Returns Reference Type.
     * Type of the reference number provided.<br />
     * Mandatory if ReferenceNumber is provided. Else optional.<br />
     * Allowed Values:<br />
     * 1=Main Reference(Main Order Reference Number returned in the output of Card/OrderCard service. <br
     * />
     * 2=Order Card Reference (Reference number for each individual card in the order submitted via
     * Card/OrderCard service. <br />
     * 3=Bulk Order Card Reference (Reference number returned in the response of bulkcardinterface
     * /UploadOrderCardTemplate. )
     */
    public function getReferenceType(): ?int
    {
        return $this->referenceType;
    }

    /**
     * Sets Reference Type.
     * Type of the reference number provided.<br />
     * Mandatory if ReferenceNumber is provided. Else optional.<br />
     * Allowed Values:<br />
     * 1=Main Reference(Main Order Reference Number returned in the output of Card/OrderCard service. <br
     * />
     * 2=Order Card Reference (Reference number for each individual card in the order submitted via
     * Card/OrderCard service. <br />
     * 3=Bulk Order Card Reference (Reference number returned in the response of bulkcardinterface
     * /UploadOrderCardTemplate. )
     *
     * @maps ReferenceType
     * @factory \ShellCardManagementAPIsLib\Models\OrderCardEnquiryReqReferenceTypeEnum::checkValue
     */
    public function setReferenceType(?int $referenceType): void
    {
        $this->referenceType = $referenceType;
    }

    /**
     * Returns From Date.
     * Card Orders from Date/Time.<br />
     * Optional.<br />
     * Value should be with in last 7 days<br />
     * This field is ignored if ReferenceNumber is provided <br />
     * This field is optional when not provided and ReferenceNumber is null or empty then the value should
     * be set to D-7(Where D is current date)<br />
     * Format: yyyyMMdd
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * Card Orders from Date/Time.<br />
     * Optional.<br />
     * Value should be with in last 7 days<br />
     * This field is ignored if ReferenceNumber is provided <br />
     * This field is optional when not provided and ReferenceNumber is null or empty then the value should
     * be set to D-7(Where D is current date)<br />
     * Format: yyyyMMdd
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * Card Orders from Date/Time.<br />
     * Optional.<br />
     * Value should be with in last 7 days<br />
     * This field is ignored if ReferenceNumber is provided <br />
     * This field is optional when not provided and ReferenceNumber is null or empty then the value should
     * be set to D-7(Where D is current date)<br />
     * Format: yyyyMMdd
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Card Order to Date/Time<br />
     * Optional<br />
     * Value should be with in last 7 days<br />
     * This field is ignored if ReferenceNumber is provided <br />
     * This field is optional when not provided and ReferenceNumber is null or empty then the value should
     * be set to current date<br />
     * Format: yyyyMMdd
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Card Order to Date/Time<br />
     * Optional<br />
     * Value should be with in last 7 days<br />
     * This field is ignored if ReferenceNumber is provided <br />
     * This field is optional when not provided and ReferenceNumber is null or empty then the value should
     * be set to current date<br />
     * Format: yyyyMMdd
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Card Order to Date/Time<br />
     * Optional<br />
     * Value should be with in last 7 days<br />
     * This field is ignored if ReferenceNumber is provided <br />
     * This field is optional when not provided and ReferenceNumber is null or empty then the value should
     * be set to current date<br />
     * Format: yyyyMMdd
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Order Request Id.
     * Client provided Unique Id of the original Order Card request, the status of which is enquired by
     * this API
     */
    public function getOrderRequestId(): ?string
    {
        if (count($this->orderRequestId) == 0) {
            return null;
        }
        return $this->orderRequestId['value'];
    }

    /**
     * Sets Order Request Id.
     * Client provided Unique Id of the original Order Card request, the status of which is enquired by
     * this API
     *
     * @maps OrderRequestId
     */
    public function setOrderRequestId(?string $orderRequestId): void
    {
        $this->orderRequestId['value'] = $orderRequestId;
    }

    /**
     * Unsets Order Request Id.
     * Client provided Unique Id of the original Order Card request, the status of which is enquired by
     * this API
     */
    public function unsetOrderRequestId(): void
    {
        $this->orderRequestId = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']        = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']    = $this->accountNumber['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']        = $this->colCoCode['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']          = $this->colCoId['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode'] = $this->colCoCountryCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']          = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']      = $this->payerNumber['value'];
        }
        if (isset($this->referenceNumber)) {
            $json['ReferenceNumber']  = $this->referenceNumber;
        }
        if (isset($this->referenceType)) {
            $json['ReferenceType']    = OrderCardEnquiryReqReferenceTypeEnum::checkValue($this->referenceType);
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']         = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']           = $this->toDate['value'];
        }
        if (!empty($this->orderRequestId)) {
            $json['OrderRequestId']   = $this->orderRequestId['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
