<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class SummaryOfBundleResponseDataItemsCardBundlesItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $bundleId = [];

    /**
     * @var array
     */
    private $externalBundleId = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $totalCards = [];

    /**
     * Returns Bundle Id.
     * Gateway assigned unique identifier for the Card Bundle.
     */
    public function getBundleId(): ?string
    {
        if (count($this->bundleId) == 0) {
            return null;
        }
        return $this->bundleId['value'];
    }

    /**
     * Sets Bundle Id.
     * Gateway assigned unique identifier for the Card Bundle.
     *
     * @maps BundleId
     */
    public function setBundleId(?string $bundleId): void
    {
        $this->bundleId['value'] = $bundleId;
    }

    /**
     * Unsets Bundle Id.
     * Gateway assigned unique identifier for the Card Bundle.
     */
    public function unsetBundleId(): void
    {
        $this->bundleId = [];
    }

    /**
     * Returns External Bundle Id.
     * External system allocated Card Bundle identifier for Card Bundle.
     */
    public function getExternalBundleId(): ?string
    {
        if (count($this->externalBundleId) == 0) {
            return null;
        }
        return $this->externalBundleId['value'];
    }

    /**
     * Sets External Bundle Id.
     * External system allocated Card Bundle identifier for Card Bundle.
     *
     * @maps ExternalBundleId
     */
    public function setExternalBundleId(?string $externalBundleId): void
    {
        $this->externalBundleId['value'] = $externalBundleId;
    }

    /**
     * Unsets External Bundle Id.
     * External system allocated Card Bundle identifier for Card Bundle.
     */
    public function unsetExternalBundleId(): void
    {
        $this->externalBundleId = [];
    }

    /**
     * Returns Description.
     * Card Bundle Description.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Card Bundle Description.
     *
     * @maps Description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Card Bundle Description.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Total Cards.
     * No of Card PAN added to the card bundle.
     */
    public function getTotalCards(): ?int
    {
        if (count($this->totalCards) == 0) {
            return null;
        }
        return $this->totalCards['value'];
    }

    /**
     * Sets Total Cards.
     * No of Card PAN added to the card bundle.
     *
     * @maps TotalCards
     */
    public function setTotalCards(?int $totalCards): void
    {
        $this->totalCards['value'] = $totalCards;
    }

    /**
     * Unsets Total Cards.
     * No of Card PAN added to the card bundle.
     */
    public function unsetTotalCards(): void
    {
        $this->totalCards = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->bundleId)) {
            $json['BundleId']         = $this->bundleId['value'];
        }
        if (!empty($this->externalBundleId)) {
            $json['ExternalBundleId'] = $this->externalBundleId['value'];
        }
        if (!empty($this->description)) {
            $json['Description']      = $this->description['value'];
        }
        if (!empty($this->totalCards)) {
            $json['TotalCards']       = $this->totalCards['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
