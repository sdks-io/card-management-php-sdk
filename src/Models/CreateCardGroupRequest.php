<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class CreateCardGroupRequest implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var int|null
     */
    private $colCoId;

    /**
     * @var string|null
     */
    private $payerNumber;

    /**
     * @var int|null
     */
    private $payerId;

    /**
     * @var int|null
     */
    private $accountId;

    /**
     * @var string|null
     */
    private $accountNumber;

    /**
     * @var bool|null
     */
    private $printOnCard;

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var CreateCardGroupRequestCardsItems[]|null
     */
    private $cards;

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     */
    public function getColCoId(): ?int
    {
        return $this->colCoId;
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId = $colCoId;
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        return $this->payerNumber;
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber = $payerNumber;
    }

    /**
     * Returns Payer Id.
     * Payer Id (i.e., Customer Id of the Payment Customer in H3 Cards Platform) of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        return $this->payerId;
    }

    /**
     * Sets Payer Id.
     * Payer Id (i.e., Customer Id of the Payment Customer in H3 Cards Platform) of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId = $payerId;
    }

    /**
     * Returns Account Id.
     * Account ID of the customer.
     *
     * Optional if AccountNumber is passed else Mandatory.
     */
    public function getAccountId(): ?int
    {
        return $this->accountId;
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.
     *
     * Optional if AccountNumber is passed else Mandatory.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId = $accountId;
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     *
     * Optional if AccountId is passed else Mandatory.
     */
    public function getAccountNumber(): ?string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     *
     * Optional if AccountId is passed else Mandatory.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Print on Card.
     * Whether card group name to be embossed on the cards or not.
     */
    public function getPrintOnCard(): ?bool
    {
        return $this->printOnCard;
    }

    /**
     * Sets Print on Card.
     * Whether card group name to be embossed on the cards or not.
     *
     * @maps PrintOnCard
     */
    public function setPrintOnCard(?bool $printOnCard): void
    {
        $this->printOnCard = $printOnCard;
    }

    /**
     * Returns Card Group Name.
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Cards.
     * List of cards to be moved to the new card group. This list is optional – no card will be moved to
     * the new card group when the list is empty.
     *
     * The fields of Card entity are described in the below rows.
     *
     * The maximum number of cards allowed to be moved in a request is 500 (configurable). The whole
     * request including the card group creation will be rejected when the limit is exceeded.
     *
     * @return CreateCardGroupRequestCardsItems[]|null
     */
    public function getCards(): ?array
    {
        return $this->cards;
    }

    /**
     * Sets Cards.
     * List of cards to be moved to the new card group. This list is optional – no card will be moved to
     * the new card group when the list is empty.
     *
     * The fields of Card entity are described in the below rows.
     *
     * The maximum number of cards allowed to be moved in a request is 500 (configurable). The whole
     * request including the card group creation will be rejected when the limit is exceeded.
     *
     * @maps Cards
     *
     * @param CreateCardGroupRequestCardsItems[]|null $cards
     */
    public function setCards(?array $cards): void
    {
        $this->cards = $cards;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->colCoCode)) {
            $json['ColCoCode']     = $this->colCoCode;
        }
        if (isset($this->colCoId)) {
            $json['ColCoId']       = $this->colCoId;
        }
        if (isset($this->payerNumber)) {
            $json['PayerNumber']   = $this->payerNumber;
        }
        if (isset($this->payerId)) {
            $json['PayerId']       = $this->payerId;
        }
        if (isset($this->accountId)) {
            $json['AccountId']     = $this->accountId;
        }
        if (isset($this->accountNumber)) {
            $json['AccountNumber'] = $this->accountNumber;
        }
        if (isset($this->printOnCard)) {
            $json['PrintOnCard']   = $this->printOnCard;
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName'] = $this->cardGroupName['value'];
        }
        if (isset($this->cards)) {
            $json['Cards']         = $this->cards;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
