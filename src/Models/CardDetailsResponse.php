<?php

declare(strict_types=1);

/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellCardManagementAPIsLib\Models;

use stdClass;

class CardDetailsResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $localCurrencyCode = [];

    /**
     * @var array
     */
    private $localCurrencySymbol = [];

    /**
     * @var int|null
     */
    private $cardId;

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var int|null
     */
    private $statusId;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var bool|null
     */
    private $odometerPrompt;

    /**
     * @var bool|null
     */
    private $fleetIdPrompt;

    /**
     * @var string|null
     */
    private $pINType;

    /**
     * @var bool|null
     */
    private $hasPIN;

    /**
     * @var bool|null
     */
    private $isSelfSelectedPIN;

    /**
     * @var bool|null
     */
    private $temporaryBlockAllowed;

    /**
     * @var bool|null
     */
    private $unblockAllowed;

    /**
     * @var bool|null
     */
    private $permanentBlockAllowed;

    /**
     * @var int|null
     */
    private $issueNumber;

    /**
     * @var array
     */
    private $reissueSetting = [];

    /**
     * @var int|null
     */
    private $internationalPOSLanguageID;

    /**
     * @var string|null
     */
    private $internationalPOSLanguageCode;

    /**
     * @var int|null
     */
    private $localPOSLanguageID;

    /**
     * @var string|null
     */
    private $localPOSLanguageCode;

    /**
     * @var array
     */
    private $cardTypeCode = [];

    /**
     * @var array
     */
    private $cardTypeId = [];

    /**
     * @var array
     */
    private $cardTypeName = [];

    /**
     * @var array
     */
    private $tokenTypeId = [];

    /**
     * @var array
     */
    private $tokenTypeName = [];

    /**
     * @var bool|null
     */
    private $isChipCard;

    /**
     * @var bool|null
     */
    private $isMagStripCard;

    /**
     * @var bool|null
     */
    private $isVirtualCard;

    /**
     * @var array
     */
    private $purchaseCategoryCode = [];

    /**
     * @var int|null
     */
    private $purchaseCategoryId;

    /**
     * @var array
     */
    private $purchaseCategoryName = [];

    /**
     * @var bool|null
     */
    private $isCRT;

    /**
     * @var bool|null
     */
    private $isFleet;

    /**
     * @var bool|null
     */
    private $isInternational;

    /**
     * @var bool|null
     */
    private $isNational;

    /**
     * @var bool|null
     */
    private $isPartnerSitesIncluded;

    /**
     * @var bool|null
     */
    private $isShellSitesOnly;

    /**
     * @var CardDetailsResponseFuelSetsItems[]|null
     */
    private $fuelSets;

    /**
     * @var CardDetailsResponseNonFuelSetsItems[]|null
     */
    private $nonFuelSets;

    /**
     * @var array
     */
    private $issuedDate = [];

    /**
     * @var string|null
     */
    private $expiryDate;

    /**
     * @var array
     */
    private $lastUsedDate = [];

    /**
     * @var array
     */
    private $misuseDate = [];

    /**
     * @var array
     */
    private $temperature = [];

    /**
     * @var string|null
     */
    private $driverName;

    /**
     * @var string|null
     */
    private $vRN;

    /**
     * @var string|null
     */
    private $embossText;

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $renewalDate = [];

    /**
     * @var array
     */
    private $renewedCardId = [];

    /**
     * @var array
     */
    private $renewedCardStatusId = [];

    /**
     * @var string|null
     */
    private $renewedCardStatus;

    /**
     * @var string|null
     */
    private $renewedCardExpiryDate;

    /**
     * @var array
     */
    private $renewedCardIssueNumber = [];

    /**
     * @var string|null
     */
    private $renewedCardReissueSetting;

    /**
     * @var array
     */
    private $creationDate = [];

    /**
     * @var array
     */
    private $effectiveDate = [];

    /**
     * @var array
     */
    private $lastModifiedDate = [];

    /**
     * @var array
     */
    private $bundleId = [];

    /**
     * @var CardDetailsResponseCardDeliveryAddress|null
     */
    private $cardDeliveryAddress;

    /**
     * @var CardDetailsResponsePINDeliveryAddress|null
     */
    private $pINDeliveryAddress;

    /**
     * @var array
     */
    private $cardBlockSchedules = [];

    /**
     * @var ErrorStatus|null
     */
    private $error;

    /**
     * @var string|null
     */
    private $requestId;

    /**
     * Returns Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer in the Shell Card Platform) of the selected payer.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer in the Shell Card Platform) of the selected payer.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id (i.e. Customer Id of the Payment Customer in the Shell Card Platform) of the selected payer.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Account Id.
     * Account Id (i.e. Customer Id of the Customer in the Shell Card Platform) of the customer.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id (i.e. Customer Id of the Customer in the Shell Card Platform) of the customer.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id (i.e. Customer Id of the Customer in the Shell Card Platform) of the customer.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account short name.
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account short name.
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account short name.
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Col Co Country Code.
     * ISO 3166 Alpha-2 Country Code for the customer and card owning country.
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * ISO 3166 Alpha-2 Country Code for the customer and card owning country.
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * ISO 3166 Alpha-2 Country Code for the customer and card owning country.
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Local Currency Code.
     * ISO 4217 Curreny Code of the local currency.
     */
    public function getLocalCurrencyCode(): ?string
    {
        if (count($this->localCurrencyCode) == 0) {
            return null;
        }
        return $this->localCurrencyCode['value'];
    }

    /**
     * Sets Local Currency Code.
     * ISO 4217 Curreny Code of the local currency.
     *
     * @maps LocalCurrencyCode
     */
    public function setLocalCurrencyCode(?string $localCurrencyCode): void
    {
        $this->localCurrencyCode['value'] = $localCurrencyCode;
    }

    /**
     * Unsets Local Currency Code.
     * ISO 4217 Curreny Code of the local currency.
     */
    public function unsetLocalCurrencyCode(): void
    {
        $this->localCurrencyCode = [];
    }

    /**
     * Returns Local Currency Symbol.
     * Currency symbol of local currency.
     */
    public function getLocalCurrencySymbol(): ?string
    {
        if (count($this->localCurrencySymbol) == 0) {
            return null;
        }
        return $this->localCurrencySymbol['value'];
    }

    /**
     * Sets Local Currency Symbol.
     * Currency symbol of local currency.
     *
     * @maps LocalCurrencySymbol
     */
    public function setLocalCurrencySymbol(?string $localCurrencySymbol): void
    {
        $this->localCurrencySymbol['value'] = $localCurrencySymbol;
    }

    /**
     * Unsets Local Currency Symbol.
     * Currency symbol of local currency.
     */
    public function unsetLocalCurrencySymbol(): void
    {
        $this->localCurrencySymbol = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id in Cards platform.
     */
    public function getCardId(): ?int
    {
        return $this->cardId;
    }

    /**
     * Sets Card Id.
     * Unique Card Id in Cards platform.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId = $cardId;
    }

    /**
     * Returns P AN.
     * Card PAN. In the response body the PAN will be masked if the option is enabled in the Shell Card
     * Platform.
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * Card PAN. In the response body the PAN will be masked if the option is enabled in the Shell Card
     * Platform.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * Card PAN. In the response body the PAN will be masked if the option is enabled in the Shell Card
     * Platform.
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Status Id.
     * Possible Id’s and description:
     * * 1  Active
     * * 7  Blocked Card
     * * 8  Expired
     * * 9  Cancelled
     * * 10  New
     * * 23  Pending Renewal
     * * 31  Replaced
     * * 41  Temporary Block (Customer)
     * * 42  Temporary Block (Shell)
     * * 43  Fraud
     * * 101 Active (Block in progress) *
     * * 102 Blocked Card (Unblock in progress) *
     * * 103 Active (Cancel in progress) *
     * * 104 Active (Marked as damaged) *
     * * 105 New (Cancel as damaged) *
     * * 106 Active(Scheduled for block) ”#
     * * 107 Blocked Card(Scheduled for unblock)*#
     * * 108 Blocked Card (Cancel in progress) *
     * > Note:
     * •  Items marked with * are intermediate statuses  to indicate that there are pending requests in
     * progress. , The response can contain these intermediate statuses only if the
     * IncludeIntermediateStatus flag is true.
     * •  The placeholder “<Shell Card Platform Status>” in the items marked with # will be replaced with
     * the Shell Card Platform status description. E.g., “Active (Scheduled for block)”
     */
    public function getStatusId(): ?int
    {
        return $this->statusId;
    }

    /**
     * Sets Status Id.
     * Possible Id’s and description:
     * * 1  Active
     * * 7  Blocked Card
     * * 8  Expired
     * * 9  Cancelled
     * * 10  New
     * * 23  Pending Renewal
     * * 31  Replaced
     * * 41  Temporary Block (Customer)
     * * 42  Temporary Block (Shell)
     * * 43  Fraud
     * * 101 Active (Block in progress) *
     * * 102 Blocked Card (Unblock in progress) *
     * * 103 Active (Cancel in progress) *
     * * 104 Active (Marked as damaged) *
     * * 105 New (Cancel as damaged) *
     * * 106 Active(Scheduled for block) ”#
     * * 107 Blocked Card(Scheduled for unblock)*#
     * * 108 Blocked Card (Cancel in progress) *
     * > Note:
     * •  Items marked with * are intermediate statuses  to indicate that there are pending requests in
     * progress. , The response can contain these intermediate statuses only if the
     * IncludeIntermediateStatus flag is true.
     * •  The placeholder “<Shell Card Platform Status>” in the items marked with # will be replaced with
     * the Shell Card Platform status description. E.g., “Active (Scheduled for block)”
     *
     * @maps StatusId
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseStatusIdEnum::checkValue
     */
    public function setStatusId(?int $statusId): void
    {
        $this->statusId = $statusId;
    }

    /**
     * Returns Status.
     * Possible Id’s and description:
     * * 1  Active
     * * 7  Blocked Card
     * * 8  Expired
     * * 9  Cancelled
     * * 10  New
     * * 23  Pending Renewal
     * * 31  Replaced
     * * 41  Temporary Block (Customer)
     * * 42  Temporary Block (Shell)
     * * 43  Fraud
     * * 101 Active (Block in progress) *
     * * 102 Blocked Card (Unblock in progress) *
     * * 103 Active (Cancel in progress) *
     * * 104 Active (Marked as damaged) *
     * * 105 New (Cancel as damaged) *
     * * 106 Active(Scheduled for block) ”#
     * * 107 Blocked Card(Scheduled for unblock) *#
     * * 108 Blocked Card (Cancel in progress) *
     * > Note:
     * •  Items marked with * are intermediate statuses  to indicate that there are pending requests in
     * progress. , The response can contain these intermediate statuses only if the
     * IncludeIntermediateStatus flag is true.
     * •  The placeholder “<Shell Card Platform Status>” in the items marked with # will be replaced with
     * the Shell Card Platform status description. E.g., “Active (Scheduled for block)”
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Possible Id’s and description:
     * * 1  Active
     * * 7  Blocked Card
     * * 8  Expired
     * * 9  Cancelled
     * * 10  New
     * * 23  Pending Renewal
     * * 31  Replaced
     * * 41  Temporary Block (Customer)
     * * 42  Temporary Block (Shell)
     * * 43  Fraud
     * * 101 Active (Block in progress) *
     * * 102 Blocked Card (Unblock in progress) *
     * * 103 Active (Cancel in progress) *
     * * 104 Active (Marked as damaged) *
     * * 105 New (Cancel as damaged) *
     * * 106 Active(Scheduled for block) ”#
     * * 107 Blocked Card(Scheduled for unblock) *#
     * * 108 Blocked Card (Cancel in progress) *
     * > Note:
     * •  Items marked with * are intermediate statuses  to indicate that there are pending requests in
     * progress. , The response can contain these intermediate statuses only if the
     * IncludeIntermediateStatus flag is true.
     * •  The placeholder “<Shell Card Platform Status>” in the items marked with # will be replaced with
     * the Shell Card Platform status description. E.g., “Active (Scheduled for block)”
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Odometer Prompt.
     * True if odometer input is enabled on the card, else false
     */
    public function getOdometerPrompt(): ?bool
    {
        return $this->odometerPrompt;
    }

    /**
     * Sets Odometer Prompt.
     * True if odometer input is enabled on the card, else false
     *
     * @maps OdometerPrompt
     */
    public function setOdometerPrompt(?bool $odometerPrompt): void
    {
        $this->odometerPrompt = $odometerPrompt;
    }

    /**
     * Returns Fleet Id Prompt.
     * True if fleet id input is enabled, else false
     */
    public function getFleetIdPrompt(): ?bool
    {
        return $this->fleetIdPrompt;
    }

    /**
     * Sets Fleet Id Prompt.
     * True if fleet id input is enabled, else false
     *
     * @maps FleetIdPrompt
     */
    public function setFleetIdPrompt(?bool $fleetIdPrompt): void
    {
        $this->fleetIdPrompt = $fleetIdPrompt;
    }

    /**
     * Returns P in Type.
     * PIN type:
     * * `Card` - Card PIN
     * * `Fleet` - Fleet PIN
     */
    public function getPINType(): ?string
    {
        return $this->pINType;
    }

    /**
     * Sets P in Type.
     * PIN type:
     * * `Card` - Card PIN
     * * `Fleet` - Fleet PIN
     *
     * @maps PINType
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponsePINTypeEnum::checkValue
     */
    public function setPINType(?string $pINType): void
    {
        $this->pINType = $pINType;
    }

    /**
     * Returns Has PIN.
     * True if card has PIN, else false
     */
    public function getHasPIN(): ?bool
    {
        return $this->hasPIN;
    }

    /**
     * Sets Has PIN.
     * True if card has PIN, else false
     *
     * @maps HasPIN
     */
    public function setHasPIN(?bool $hasPIN): void
    {
        $this->hasPIN = $hasPIN;
    }

    /**
     * Returns Is Self Selected PIN.
     * True if card has Self Selected PIN, else false
     */
    public function getIsSelfSelectedPIN(): ?bool
    {
        return $this->isSelfSelectedPIN;
    }

    /**
     * Sets Is Self Selected PIN.
     * True if card has Self Selected PIN, else false
     *
     * @maps IsSelfSelectedPIN
     */
    public function setIsSelfSelectedPIN(?bool $isSelfSelectedPIN): void
    {
        $this->isSelfSelectedPIN = $isSelfSelectedPIN;
    }

    /**
     * Returns Temporary Block Allowed.
     * True if card can be blocked temporarily, else false
     */
    public function getTemporaryBlockAllowed(): ?bool
    {
        return $this->temporaryBlockAllowed;
    }

    /**
     * Sets Temporary Block Allowed.
     * True if card can be blocked temporarily, else false
     *
     * @maps TemporaryBlockAllowed
     */
    public function setTemporaryBlockAllowed(?bool $temporaryBlockAllowed): void
    {
        $this->temporaryBlockAllowed = $temporaryBlockAllowed;
    }

    /**
     * Returns Unblock Allowed.
     * True/False True if card can be Unblocked, else false
     */
    public function getUnblockAllowed(): ?bool
    {
        return $this->unblockAllowed;
    }

    /**
     * Sets Unblock Allowed.
     * True/False True if card can be Unblocked, else false
     *
     * @maps UnblockAllowed
     */
    public function setUnblockAllowed(?bool $unblockAllowed): void
    {
        $this->unblockAllowed = $unblockAllowed;
    }

    /**
     * Returns Permanent Block Allowed.
     * True if card can be blocked permanently, else false
     */
    public function getPermanentBlockAllowed(): ?bool
    {
        return $this->permanentBlockAllowed;
    }

    /**
     * Sets Permanent Block Allowed.
     * True if card can be blocked permanently, else false
     *
     * @maps PermanentBlockAllowed
     */
    public function setPermanentBlockAllowed(?bool $permanentBlockAllowed): void
    {
        $this->permanentBlockAllowed = $permanentBlockAllowed;
    }

    /**
     * Returns Issue Number.
     * Issue number of the card
     */
    public function getIssueNumber(): ?int
    {
        return $this->issueNumber;
    }

    /**
     * Sets Issue Number.
     * Issue number of the card
     *
     * @maps IssueNumber
     */
    public function setIssueNumber(?int $issueNumber): void
    {
        $this->issueNumber = $issueNumber;
    }

    /**
     * Returns Reissue Setting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is issued) then
     * reissue setting of the latest card issued. Reissue setting:
     * * `True` - Card will be Reissued when nearing its expiry date
     * * `False` - Card will not be Reissued
     */
    public function getReissueSetting(): ?string
    {
        if (count($this->reissueSetting) == 0) {
            return null;
        }
        return $this->reissueSetting['value'];
    }

    /**
     * Sets Reissue Setting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is issued) then
     * reissue setting of the latest card issued. Reissue setting:
     * * `True` - Card will be Reissued when nearing its expiry date
     * * `False` - Card will not be Reissued
     *
     * @maps ReissueSetting
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseReissueSettingEnum::checkValue
     */
    public function setReissueSetting(?string $reissueSetting): void
    {
        $this->reissueSetting['value'] = $reissueSetting;
    }

    /**
     * Unsets Reissue Setting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is issued) then
     * reissue setting of the latest card issued. Reissue setting:
     * * `True` - Card will be Reissued when nearing its expiry date
     * * `False` - Card will not be Reissued
     */
    public function unsetReissueSetting(): void
    {
        $this->reissueSetting = [];
    }

    /**
     * Returns International POS Language ID.
     * POS language identifier. Language Id:
     * * `1` - German
     * * `2` - French
     * * `3` - Bulgarian
     * * `4` - Croatian
     * * `5` - Czech
     * * `6` - Danish
     * * `7` - Finnish
     * * `8` - English
     * * `9` - Greek
     * * `10` - Chinese
     * * `11` - Hungarian
     * * `12` - Italian
     * * `13` - Luxembourgish
     * * `14` - Malay
     * * `15` - Dutch
     * * `16` - Norwegian, Bokmal
     * * `17` - Urdu
     * * `18` - Polish
     * * `19` - Portuguese
     * * `20` - Romanian
     * * `21` - Russian
     * * `22` - Slovak
     * * `23` - Slovenian
     * * `24` - Spanish
     * * `25` - Swedish
     * * `26` - Turkish
     * * `27` - Thai
     * * `28` - Filipino
     * * `29` - Estonian
     * * `30` - Latvian
     * * `31` - Lithuanian
     */
    public function getInternationalPOSLanguageID(): ?int
    {
        return $this->internationalPOSLanguageID;
    }

    /**
     * Sets International POS Language ID.
     * POS language identifier. Language Id:
     * * `1` - German
     * * `2` - French
     * * `3` - Bulgarian
     * * `4` - Croatian
     * * `5` - Czech
     * * `6` - Danish
     * * `7` - Finnish
     * * `8` - English
     * * `9` - Greek
     * * `10` - Chinese
     * * `11` - Hungarian
     * * `12` - Italian
     * * `13` - Luxembourgish
     * * `14` - Malay
     * * `15` - Dutch
     * * `16` - Norwegian, Bokmal
     * * `17` - Urdu
     * * `18` - Polish
     * * `19` - Portuguese
     * * `20` - Romanian
     * * `21` - Russian
     * * `22` - Slovak
     * * `23` - Slovenian
     * * `24` - Spanish
     * * `25` - Swedish
     * * `26` - Turkish
     * * `27` - Thai
     * * `28` - Filipino
     * * `29` - Estonian
     * * `30` - Latvian
     * * `31` - Lithuanian
     *
     * @maps InternationalPOSLanguageID
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseInternationalPOSLanguageIDEnum::checkValue
     */
    public function setInternationalPOSLanguageID(?int $internationalPOSLanguageID): void
    {
        $this->internationalPOSLanguageID = $internationalPOSLanguageID;
    }

    /**
     * Returns International POS Language Code.
     * POS language code. Language code:
     * * `deu` - German
     * * `fra` - French
     * * `bul` - Bulgarian
     * * `hrv` - Croatian
     * * `ces` - Czech
     * * `dan` - Danish
     * * `fin` - Finnish
     * * `eng` - English
     * * `ell` - Greek
     * * `zho` - Chinese
     * * `hun` - Hungarian
     * * `ita` - Italian
     * * `ltz` - Luxembourgish
     * * `msa` - Malay
     * * `nld` - Dutch
     * * `nob` - Norwegian, Bokmal
     * * `urd` - Urdu
     * * `pol` - Polish
     * * `por` - Portuguese
     * * `ron` - Romanian
     * * `rus` - Russian
     * * `slk` - Slovak
     * * `slv` - Slovenian
     * * `spa` - Spanish
     * * `swe` - Swedish
     * * `tur` - Turkish
     * * `tha` - Thai
     * * `fil` - Filipino
     * * `est` - Estonian
     * * `lav` - Latvian
     * * `lit` - Lithuanian
     */
    public function getInternationalPOSLanguageCode(): ?string
    {
        return $this->internationalPOSLanguageCode;
    }

    /**
     * Sets International POS Language Code.
     * POS language code. Language code:
     * * `deu` - German
     * * `fra` - French
     * * `bul` - Bulgarian
     * * `hrv` - Croatian
     * * `ces` - Czech
     * * `dan` - Danish
     * * `fin` - Finnish
     * * `eng` - English
     * * `ell` - Greek
     * * `zho` - Chinese
     * * `hun` - Hungarian
     * * `ita` - Italian
     * * `ltz` - Luxembourgish
     * * `msa` - Malay
     * * `nld` - Dutch
     * * `nob` - Norwegian, Bokmal
     * * `urd` - Urdu
     * * `pol` - Polish
     * * `por` - Portuguese
     * * `ron` - Romanian
     * * `rus` - Russian
     * * `slk` - Slovak
     * * `slv` - Slovenian
     * * `spa` - Spanish
     * * `swe` - Swedish
     * * `tur` - Turkish
     * * `tha` - Thai
     * * `fil` - Filipino
     * * `est` - Estonian
     * * `lav` - Latvian
     * * `lit` - Lithuanian
     *
     * @maps InternationalPOSLanguageCode
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseInternationalPOSLanguageCodeEnum::checkValue
     */
    public function setInternationalPOSLanguageCode(?string $internationalPOSLanguageCode): void
    {
        $this->internationalPOSLanguageCode = $internationalPOSLanguageCode;
    }

    /**
     * Returns Local POS Language ID.
     * POS language identifier. Language Id:
     * * `1` - German
     * * `2` - French
     * * `3` - Bulgarian
     * * `4` - Croatian
     * * `5` - Czech
     * * `6` - Danish
     * * `7` - Finnish
     * * `8` - English
     * * `9` - Greek
     * * `10` - Chinese
     * * `11` - Hungarian
     * * `12` - Italian
     * * `13` - Luxembourgish
     * * `14` - Malay
     * * `15` - Dutch
     * * `16` - Norwegian, Bokmal
     * * `17` - Urdu
     * * `18` - Polish
     * * `19` - Portuguese
     * * `20` - Romanian
     * * `21` - Russian
     * * `22` - Slovak
     * * `23` - Slovenian
     * * `24` - Spanish
     * * `25` - Swedish
     * * `26` - Turkish
     * * `27` - Thai
     * * `28` - Filipino
     * * `29` - Estonian
     * * `30` - Latvian
     * * `31` - Lithuanian
     */
    public function getLocalPOSLanguageID(): ?int
    {
        return $this->localPOSLanguageID;
    }

    /**
     * Sets Local POS Language ID.
     * POS language identifier. Language Id:
     * * `1` - German
     * * `2` - French
     * * `3` - Bulgarian
     * * `4` - Croatian
     * * `5` - Czech
     * * `6` - Danish
     * * `7` - Finnish
     * * `8` - English
     * * `9` - Greek
     * * `10` - Chinese
     * * `11` - Hungarian
     * * `12` - Italian
     * * `13` - Luxembourgish
     * * `14` - Malay
     * * `15` - Dutch
     * * `16` - Norwegian, Bokmal
     * * `17` - Urdu
     * * `18` - Polish
     * * `19` - Portuguese
     * * `20` - Romanian
     * * `21` - Russian
     * * `22` - Slovak
     * * `23` - Slovenian
     * * `24` - Spanish
     * * `25` - Swedish
     * * `26` - Turkish
     * * `27` - Thai
     * * `28` - Filipino
     * * `29` - Estonian
     * * `30` - Latvian
     * * `31` - Lithuanian
     *
     * @maps LocalPOSLanguageID
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseLocalPOSLanguageIDEnum::checkValue
     */
    public function setLocalPOSLanguageID(?int $localPOSLanguageID): void
    {
        $this->localPOSLanguageID = $localPOSLanguageID;
    }

    /**
     * Returns Local POS Language Code.
     * POS language code. Language code:
     * * `deu` - German
     * * `fra` - French
     * * `bul` - Bulgarian
     * * `hrv` - Croatian
     * * `ces` - Czech
     * * `dan` - Danish
     * * `fin` - Finnish
     * * `eng` - English
     * * `ell` - Greek
     * * `zho` - Chinese
     * * `hun` - Hungarian
     * * `ita` - Italian
     * * `ltz` - Luxembourgish
     * * `msa` - Malay
     * * `nld` - Dutch
     * * `nob` - Norwegian, Bokmal
     * * `urd` - Urdu
     * * `pol` - Polish
     * * `por` - Portuguese
     * * `ron` - Romanian
     * * `rus` - Russian
     * * `slk` - Slovak
     * * `slv` - Slovenian
     * * `spa` - Spanish
     * * `swe` - Swedish
     * * `tur` - Turkish
     * * `tha` - Thai
     * * `fil` - Filipino
     * * `est` - Estonian
     * * `lav` - Latvian
     * * `lit` - Lithuanian
     */
    public function getLocalPOSLanguageCode(): ?string
    {
        return $this->localPOSLanguageCode;
    }

    /**
     * Sets Local POS Language Code.
     * POS language code. Language code:
     * * `deu` - German
     * * `fra` - French
     * * `bul` - Bulgarian
     * * `hrv` - Croatian
     * * `ces` - Czech
     * * `dan` - Danish
     * * `fin` - Finnish
     * * `eng` - English
     * * `ell` - Greek
     * * `zho` - Chinese
     * * `hun` - Hungarian
     * * `ita` - Italian
     * * `ltz` - Luxembourgish
     * * `msa` - Malay
     * * `nld` - Dutch
     * * `nob` - Norwegian, Bokmal
     * * `urd` - Urdu
     * * `pol` - Polish
     * * `por` - Portuguese
     * * `ron` - Romanian
     * * `rus` - Russian
     * * `slk` - Slovak
     * * `slv` - Slovenian
     * * `spa` - Spanish
     * * `swe` - Swedish
     * * `tur` - Turkish
     * * `tha` - Thai
     * * `fil` - Filipino
     * * `est` - Estonian
     * * `lav` - Latvian
     * * `lit` - Lithuanian
     *
     * @maps LocalPOSLanguageCode
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseLocalPOSLanguageCodeEnum::checkValue
     */
    public function setLocalPOSLanguageCode(?string $localPOSLanguageCode): void
    {
        $this->localPOSLanguageCode = $localPOSLanguageCode;
    }

    /**
     * Returns Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN.
     */
    public function getCardTypeCode(): ?string
    {
        if (count($this->cardTypeCode) == 0) {
            return null;
        }
        return $this->cardTypeCode['value'];
    }

    /**
     * Sets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN.
     *
     * @maps CardTypeCode
     */
    public function setCardTypeCode(?string $cardTypeCode): void
    {
        $this->cardTypeCode['value'] = $cardTypeCode;
    }

    /**
     * Unsets Card Type Code.
     * ISO code of the card i.e. first 7 digits of the PAN.
     */
    public function unsetCardTypeCode(): void
    {
        $this->cardTypeCode = [];
    }

    /**
     * Returns Card Type Id.
     * Card Type ID
     */
    public function getCardTypeId(): ?int
    {
        if (count($this->cardTypeId) == 0) {
            return null;
        }
        return $this->cardTypeId['value'];
    }

    /**
     * Sets Card Type Id.
     * Card Type ID
     *
     * @maps CardTypeId
     */
    public function setCardTypeId(?int $cardTypeId): void
    {
        $this->cardTypeId['value'] = $cardTypeId;
    }

    /**
     * Unsets Card Type Id.
     * Card Type ID
     */
    public function unsetCardTypeId(): void
    {
        $this->cardTypeId = [];
    }

    /**
     * Returns Card Type Name.
     * Card Type Name
     */
    public function getCardTypeName(): ?string
    {
        if (count($this->cardTypeName) == 0) {
            return null;
        }
        return $this->cardTypeName['value'];
    }

    /**
     * Sets Card Type Name.
     * Card Type Name
     *
     * @maps CardTypeName
     */
    public function setCardTypeName(?string $cardTypeName): void
    {
        $this->cardTypeName['value'] = $cardTypeName;
    }

    /**
     * Unsets Card Type Name.
     * Card Type Name
     */
    public function unsetCardTypeName(): void
    {
        $this->cardTypeName = [];
    }

    /**
     * Returns Token Type Id.
     * Token Type ID configured for the Card
     */
    public function getTokenTypeId(): ?int
    {
        if (count($this->tokenTypeId) == 0) {
            return null;
        }
        return $this->tokenTypeId['value'];
    }

    /**
     * Sets Token Type Id.
     * Token Type ID configured for the Card
     *
     * @maps TokenTypeId
     */
    public function setTokenTypeId(?int $tokenTypeId): void
    {
        $this->tokenTypeId['value'] = $tokenTypeId;
    }

    /**
     * Unsets Token Type Id.
     * Token Type ID configured for the Card
     */
    public function unsetTokenTypeId(): void
    {
        $this->tokenTypeId = [];
    }

    /**
     * Returns Token Type Name.
     * Token Type Name configured for the Card
     */
    public function getTokenTypeName(): ?string
    {
        if (count($this->tokenTypeName) == 0) {
            return null;
        }
        return $this->tokenTypeName['value'];
    }

    /**
     * Sets Token Type Name.
     * Token Type Name configured for the Card
     *
     * @maps TokenTypeName
     */
    public function setTokenTypeName(?string $tokenTypeName): void
    {
        $this->tokenTypeName['value'] = $tokenTypeName;
    }

    /**
     * Unsets Token Type Name.
     * Token Type Name configured for the Card
     */
    public function unsetTokenTypeName(): void
    {
        $this->tokenTypeName = [];
    }

    /**
     * Returns Is Chip Card.
     * True if a chip card, else false
     */
    public function getIsChipCard(): ?bool
    {
        return $this->isChipCard;
    }

    /**
     * Sets Is Chip Card.
     * True if a chip card, else false
     *
     * @maps IsChipCard
     */
    public function setIsChipCard(?bool $isChipCard): void
    {
        $this->isChipCard = $isChipCard;
    }

    /**
     * Returns Is Mag Strip Card.
     * True if it is a magnetic stripe card, else false
     */
    public function getIsMagStripCard(): ?bool
    {
        return $this->isMagStripCard;
    }

    /**
     * Sets Is Mag Strip Card.
     * True if it is a magnetic stripe card, else false
     *
     * @maps IsMagStripCard
     */
    public function setIsMagStripCard(?bool $isMagStripCard): void
    {
        $this->isMagStripCard = $isMagStripCard;
    }

    /**
     * Returns Is Virtual Card.
     * True if it is a virtual card, else false
     */
    public function getIsVirtualCard(): ?bool
    {
        return $this->isVirtualCard;
    }

    /**
     * Sets Is Virtual Card.
     * True if it is a virtual card, else false
     *
     * @maps IsVirtualCard
     */
    public function setIsVirtualCard(?bool $isVirtualCard): void
    {
        $this->isVirtualCard = $isVirtualCard;
    }

    /**
     * Returns Purchase Category Code.
     * Purchase category code of the card.
     */
    public function getPurchaseCategoryCode(): ?string
    {
        if (count($this->purchaseCategoryCode) == 0) {
            return null;
        }
        return $this->purchaseCategoryCode['value'];
    }

    /**
     * Sets Purchase Category Code.
     * Purchase category code of the card.
     *
     * @maps PurchaseCategoryCode
     */
    public function setPurchaseCategoryCode(?string $purchaseCategoryCode): void
    {
        $this->purchaseCategoryCode['value'] = $purchaseCategoryCode;
    }

    /**
     * Unsets Purchase Category Code.
     * Purchase category code of the card.
     */
    public function unsetPurchaseCategoryCode(): void
    {
        $this->purchaseCategoryCode = [];
    }

    /**
     * Returns Purchase Category Id.
     * Purchase category identifier in the Shell Card Platform.
     */
    public function getPurchaseCategoryId(): ?int
    {
        return $this->purchaseCategoryId;
    }

    /**
     * Sets Purchase Category Id.
     * Purchase category identifier in the Shell Card Platform.
     *
     * @maps PurchaseCategoryId
     */
    public function setPurchaseCategoryId(?int $purchaseCategoryId): void
    {
        $this->purchaseCategoryId = $purchaseCategoryId;
    }

    /**
     * Returns Purchase Category Name.
     * Purchase category name
     */
    public function getPurchaseCategoryName(): ?string
    {
        if (count($this->purchaseCategoryName) == 0) {
            return null;
        }
        return $this->purchaseCategoryName['value'];
    }

    /**
     * Sets Purchase Category Name.
     * Purchase category name
     *
     * @maps PurchaseCategoryName
     */
    public function setPurchaseCategoryName(?string $purchaseCategoryName): void
    {
        $this->purchaseCategoryName['value'] = $purchaseCategoryName;
    }

    /**
     * Unsets Purchase Category Name.
     * Purchase category name
     */
    public function unsetPurchaseCategoryName(): void
    {
        $this->purchaseCategoryName = [];
    }

    /**
     * Returns Is CRT.
     * True if it is a Commercial Road Transport (CRT) card, else false
     */
    public function getIsCRT(): ?bool
    {
        return $this->isCRT;
    }

    /**
     * Sets Is CRT.
     * True if it is a Commercial Road Transport (CRT) card, else false
     *
     * @maps IsCRT
     */
    public function setIsCRT(?bool $isCRT): void
    {
        $this->isCRT = $isCRT;
    }

    /**
     * Returns Is Fleet.
     * True if it is a Fleet card, else false
     */
    public function getIsFleet(): ?bool
    {
        return $this->isFleet;
    }

    /**
     * Sets Is Fleet.
     * True if it is a Fleet card, else false
     *
     * @maps IsFleet
     */
    public function setIsFleet(?bool $isFleet): void
    {
        $this->isFleet = $isFleet;
    }

    /**
     * Returns Is International.
     * True if it is an international card, else false
     */
    public function getIsInternational(): ?bool
    {
        return $this->isInternational;
    }

    /**
     * Sets Is International.
     * True if it is an international card, else false
     *
     * @maps IsInternational
     */
    public function setIsInternational(?bool $isInternational): void
    {
        $this->isInternational = $isInternational;
    }

    /**
     * Returns Is National.
     * True if it is a national card, else false
     */
    public function getIsNational(): ?bool
    {
        return $this->isNational;
    }

    /**
     * Sets Is National.
     * True if it is a national card, else false
     *
     * @maps IsNational
     */
    public function setIsNational(?bool $isNational): void
    {
        $this->isNational = $isNational;
    }

    /**
     * Returns Is Partner Sites Included.
     * True if it is allowed at all partner sites, else false
     */
    public function getIsPartnerSitesIncluded(): ?bool
    {
        return $this->isPartnerSitesIncluded;
    }

    /**
     * Sets Is Partner Sites Included.
     * True if it is allowed at all partner sites, else false
     *
     * @maps IsPartnerSitesIncluded
     */
    public function setIsPartnerSitesIncluded(?bool $isPartnerSitesIncluded): void
    {
        $this->isPartnerSitesIncluded = $isPartnerSitesIncluded;
    }

    /**
     * Returns Is Shell Sites Only.
     * True if it is only allowed at Shell sites, else false
     */
    public function getIsShellSitesOnly(): ?bool
    {
        return $this->isShellSitesOnly;
    }

    /**
     * Sets Is Shell Sites Only.
     * True if it is only allowed at Shell sites, else false
     *
     * @maps IsShellSitesOnly
     */
    public function setIsShellSitesOnly(?bool $isShellSitesOnly): void
    {
        $this->isShellSitesOnly = $isShellSitesOnly;
    }

    /**
     * Returns Fuel Sets.
     * List of active fuel type product restrictions applied on the card.
     *
     * @return CardDetailsResponseFuelSetsItems[]|null
     */
    public function getFuelSets(): ?array
    {
        return $this->fuelSets;
    }

    /**
     * Sets Fuel Sets.
     * List of active fuel type product restrictions applied on the card.
     *
     * @maps FuelSets
     *
     * @param CardDetailsResponseFuelSetsItems[]|null $fuelSets
     */
    public function setFuelSets(?array $fuelSets): void
    {
        $this->fuelSets = $fuelSets;
    }

    /**
     * Returns Non Fuel Sets.
     * List of active non-fuel type product restrictions applied on the card.
     *
     * @return CardDetailsResponseNonFuelSetsItems[]|null
     */
    public function getNonFuelSets(): ?array
    {
        return $this->nonFuelSets;
    }

    /**
     * Sets Non Fuel Sets.
     * List of active non-fuel type product restrictions applied on the card.
     *
     * @maps NonFuelSets
     *
     * @param CardDetailsResponseNonFuelSetsItems[]|null $nonFuelSets
     */
    public function setNonFuelSets(?array $nonFuelSets): void
    {
        $this->nonFuelSets = $nonFuelSets;
    }

    /**
     * Returns Issued Date.
     * Card issue date.
     */
    public function getIssuedDate(): ?string
    {
        if (count($this->issuedDate) == 0) {
            return null;
        }
        return $this->issuedDate['value'];
    }

    /**
     * Sets Issued Date.
     * Card issue date.
     *
     * @maps IssuedDate
     */
    public function setIssuedDate(?string $issuedDate): void
    {
        $this->issuedDate['value'] = $issuedDate;
    }

    /**
     * Unsets Issued Date.
     * Card issue date.
     */
    public function unsetIssuedDate(): void
    {
        $this->issuedDate = [];
    }

    /**
     * Returns Expiry Date.
     * Expiry date of the card.
     */
    public function getExpiryDate(): ?string
    {
        return $this->expiryDate;
    }

    /**
     * Sets Expiry Date.
     * Expiry date of the card.
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate = $expiryDate;
    }

    /**
     * Returns Last Used Date.
     * Card last used date.
     */
    public function getLastUsedDate(): ?string
    {
        if (count($this->lastUsedDate) == 0) {
            return null;
        }
        return $this->lastUsedDate['value'];
    }

    /**
     * Sets Last Used Date.
     * Card last used date.
     *
     * @maps LastUsedDate
     */
    public function setLastUsedDate(?string $lastUsedDate): void
    {
        $this->lastUsedDate['value'] = $lastUsedDate;
    }

    /**
     * Unsets Last Used Date.
     * Card last used date.
     */
    public function unsetLastUsedDate(): void
    {
        $this->lastUsedDate = [];
    }

    /**
     * Returns Misuse Date.
     * Last misused date of the card.
     */
    public function getMisuseDate(): ?string
    {
        if (count($this->misuseDate) == 0) {
            return null;
        }
        return $this->misuseDate['value'];
    }

    /**
     * Sets Misuse Date.
     * Last misused date of the card.
     *
     * @maps MisuseDate
     */
    public function setMisuseDate(?string $misuseDate): void
    {
        $this->misuseDate['value'] = $misuseDate;
    }

    /**
     * Unsets Misuse Date.
     * Last misused date of the card.
     */
    public function unsetMisuseDate(): void
    {
        $this->misuseDate = [];
    }

    /**
     * Returns Temperature.
     * Hot-list status
     */
    public function getTemperature(): ?string
    {
        if (count($this->temperature) == 0) {
            return null;
        }
        return $this->temperature['value'];
    }

    /**
     * Sets Temperature.
     * Hot-list status
     *
     * @maps Temperature
     */
    public function setTemperature(?string $temperature): void
    {
        $this->temperature['value'] = $temperature;
    }

    /**
     * Unsets Temperature.
     * Hot-list status
     */
    public function unsetTemperature(): void
    {
        $this->temperature = [];
    }

    /**
     * Returns Driver Name.
     * Driver name of the card. Note- While ordering card, optional when VRN is passed else mandatory.
     */
    public function getDriverName(): ?string
    {
        return $this->driverName;
    }

    /**
     * Sets Driver Name.
     * Driver name of the card. Note- While ordering card, optional when VRN is passed else mandatory.
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName = $driverName;
    }

    /**
     * Returns V RN.
     * Vehicle registration number of the card. Note- While ordering card, optional when DriverName is
     * passed else mandatory.
     */
    public function getVRN(): ?string
    {
        return $this->vRN;
    }

    /**
     * Sets V RN.
     * Vehicle registration number of the card. Note- While ordering card, optional when DriverName is
     * passed else mandatory.
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN = $vRN;
    }

    /**
     * Returns Emboss Text.
     * Text printed on the card as account name.
     */
    public function getEmbossText(): ?string
    {
        return $this->embossText;
    }

    /**
     * Sets Emboss Text.
     * Text printed on the card as account name.
     *
     * @maps EmbossText
     */
    public function setEmbossText(?string $embossText): void
    {
        $this->embossText = $embossText;
    }

    /**
     * Returns Card Group Id.
     * Existing Card Group ID, under which the replacement card is to be created.
     * Pass “-1” if the replacement card should not be assigned to any card group.
     * Optional.
     * If not provided, the replacement card will be created under the same card group as the current card.
     * Example- 156
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Existing Card Group ID, under which the replacement card is to be created.
     * Pass “-1” if the replacement card should not be assigned to any card group.
     * Optional.
     * If not provided, the replacement card will be created under the same card group as the current card.
     * Example- 156
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Existing Card Group ID, under which the replacement card is to be created.
     * Pass “-1” if the replacement card should not be assigned to any card group.
     * Optional.
     * If not provided, the replacement card will be created under the same card group as the current card.
     * Example- 156
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name. Note- 1. While ordering card this field is mandatory when IsNewCardGroup is true.
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name. Note- 1. While ordering card this field is mandatory when IsNewCardGroup is true.
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name. Note- 1. While ordering card this field is mandatory when IsNewCardGroup is true.
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Renewal Date.
     * Renewal date of the card. Applicable if ReissueSetting is set to True.
     */
    public function getRenewalDate(): ?string
    {
        if (count($this->renewalDate) == 0) {
            return null;
        }
        return $this->renewalDate['value'];
    }

    /**
     * Sets Renewal Date.
     * Renewal date of the card. Applicable if ReissueSetting is set to True.
     *
     * @maps RenewalDate
     */
    public function setRenewalDate(?string $renewalDate): void
    {
        $this->renewalDate['value'] = $renewalDate;
    }

    /**
     * Unsets Renewal Date.
     * Renewal date of the card. Applicable if ReissueSetting is set to True.
     */
    public function unsetRenewalDate(): void
    {
        $this->renewalDate = [];
    }

    /**
     * Returns Renewed Card Id.
     * Renewed card id.
     */
    public function getRenewedCardId(): ?int
    {
        if (count($this->renewedCardId) == 0) {
            return null;
        }
        return $this->renewedCardId['value'];
    }

    /**
     * Sets Renewed Card Id.
     * Renewed card id.
     *
     * @maps RenewedCardId
     */
    public function setRenewedCardId(?int $renewedCardId): void
    {
        $this->renewedCardId['value'] = $renewedCardId;
    }

    /**
     * Unsets Renewed Card Id.
     * Renewed card id.
     */
    public function unsetRenewedCardId(): void
    {
        $this->renewedCardId = [];
    }

    /**
     * Returns Renewed Card Status Id.
     * Renewed card status id.
     */
    public function getRenewedCardStatusId(): ?int
    {
        if (count($this->renewedCardStatusId) == 0) {
            return null;
        }
        return $this->renewedCardStatusId['value'];
    }

    /**
     * Sets Renewed Card Status Id.
     * Renewed card status id.
     *
     * @maps RenewedCardStatusId
     */
    public function setRenewedCardStatusId(?int $renewedCardStatusId): void
    {
        $this->renewedCardStatusId['value'] = $renewedCardStatusId;
    }

    /**
     * Unsets Renewed Card Status Id.
     * Renewed card status id.
     */
    public function unsetRenewedCardStatusId(): void
    {
        $this->renewedCardStatusId = [];
    }

    /**
     * Returns Renewed Card Status.
     * Renewed card status description.
     */
    public function getRenewedCardStatus(): ?string
    {
        return $this->renewedCardStatus;
    }

    /**
     * Sets Renewed Card Status.
     * Renewed card status description.
     *
     * @maps RenewedCardStatus
     */
    public function setRenewedCardStatus(?string $renewedCardStatus): void
    {
        $this->renewedCardStatus = $renewedCardStatus;
    }

    /**
     * Returns Renewed Card Expiry Date.
     * Renewed card expiry date.
     */
    public function getRenewedCardExpiryDate(): ?string
    {
        return $this->renewedCardExpiryDate;
    }

    /**
     * Sets Renewed Card Expiry Date.
     * Renewed card expiry date.
     *
     * @maps RenewedCardExpiryDate
     */
    public function setRenewedCardExpiryDate(?string $renewedCardExpiryDate): void
    {
        $this->renewedCardExpiryDate = $renewedCardExpiryDate;
    }

    /**
     * Returns Renewed Card Issue Number.
     * Renewed card issue number.
     */
    public function getRenewedCardIssueNumber(): ?int
    {
        if (count($this->renewedCardIssueNumber) == 0) {
            return null;
        }
        return $this->renewedCardIssueNumber['value'];
    }

    /**
     * Sets Renewed Card Issue Number.
     * Renewed card issue number.
     *
     * @maps RenewedCardIssueNumber
     */
    public function setRenewedCardIssueNumber(?int $renewedCardIssueNumber): void
    {
        $this->renewedCardIssueNumber['value'] = $renewedCardIssueNumber;
    }

    /**
     * Unsets Renewed Card Issue Number.
     * Renewed card issue number.
     */
    public function unsetRenewedCardIssueNumber(): void
    {
        $this->renewedCardIssueNumber = [];
    }

    /**
     * Returns Renewed Card Reissue Setting.
     * Reissue setting of the renewed new card. Reissue Setting:
     * * `True` - Card will be sent to production
     * * `False` - Parent Card is Dormant or the Card is not to be produced
     */
    public function getRenewedCardReissueSetting(): ?string
    {
        return $this->renewedCardReissueSetting;
    }

    /**
     * Sets Renewed Card Reissue Setting.
     * Reissue setting of the renewed new card. Reissue Setting:
     * * `True` - Card will be sent to production
     * * `False` - Parent Card is Dormant or the Card is not to be produced
     *
     * @maps RenewedCardReissueSetting
     * @factory \ShellCardManagementAPIsLib\Models\CardDetailsResponseRenewedCardReissueSettingEnum::checkValue
     */
    public function setRenewedCardReissueSetting(?string $renewedCardReissueSetting): void
    {
        $this->renewedCardReissueSetting = $renewedCardReissueSetting;
    }

    /**
     * Returns Creation Date.
     * Card Creation Date time
     */
    public function getCreationDate(): ?string
    {
        if (count($this->creationDate) == 0) {
            return null;
        }
        return $this->creationDate['value'];
    }

    /**
     * Sets Creation Date.
     * Card Creation Date time
     *
     * @maps CreationDate
     */
    public function setCreationDate(?string $creationDate): void
    {
        $this->creationDate['value'] = $creationDate;
    }

    /**
     * Unsets Creation Date.
     * Card Creation Date time
     */
    public function unsetCreationDate(): void
    {
        $this->creationDate = [];
    }

    /**
     * Returns Effective Date.
     * Effective date for the Card
     */
    public function getEffectiveDate(): ?string
    {
        if (count($this->effectiveDate) == 0) {
            return null;
        }
        return $this->effectiveDate['value'];
    }

    /**
     * Sets Effective Date.
     * Effective date for the Card
     *
     * @maps EffectiveDate
     */
    public function setEffectiveDate(?string $effectiveDate): void
    {
        $this->effectiveDate['value'] = $effectiveDate;
    }

    /**
     * Unsets Effective Date.
     * Effective date for the Card
     */
    public function unsetEffectiveDate(): void
    {
        $this->effectiveDate = [];
    }

    /**
     * Returns Last Modified Date.
     * Card last modified date
     */
    public function getLastModifiedDate(): ?string
    {
        if (count($this->lastModifiedDate) == 0) {
            return null;
        }
        return $this->lastModifiedDate['value'];
    }

    /**
     * Sets Last Modified Date.
     * Card last modified date
     *
     * @maps LastModifiedDate
     */
    public function setLastModifiedDate(?string $lastModifiedDate): void
    {
        $this->lastModifiedDate['value'] = $lastModifiedDate;
    }

    /**
     * Unsets Last Modified Date.
     * Card last modified date
     */
    public function unsetLastModifiedDate(): void
    {
        $this->lastModifiedDate = [];
    }

    /**
     * Returns Bundle Id.
     * Bundle Id associated with card in the Gateway. This field will have a null value if the card is not
     * associated with any bundle in Gateway or the value of IncludeBundleDetails in request is false.
     */
    public function getBundleId(): ?string
    {
        if (count($this->bundleId) == 0) {
            return null;
        }
        return $this->bundleId['value'];
    }

    /**
     * Sets Bundle Id.
     * Bundle Id associated with card in the Gateway. This field will have a null value if the card is not
     * associated with any bundle in Gateway or the value of IncludeBundleDetails in request is false.
     *
     * @maps BundleId
     */
    public function setBundleId(?string $bundleId): void
    {
        $this->bundleId['value'] = $bundleId;
    }

    /**
     * Unsets Bundle Id.
     * Bundle Id associated with card in the Gateway. This field will have a null value if the card is not
     * associated with any bundle in Gateway or the value of IncludeBundleDetails in request is false.
     */
    public function unsetBundleId(): void
    {
        $this->bundleId = [];
    }

    /**
     * Returns Card Delivery Address.
     * Delivery address.
     */
    public function getCardDeliveryAddress(): ?CardDetailsResponseCardDeliveryAddress
    {
        return $this->cardDeliveryAddress;
    }

    /**
     * Sets Card Delivery Address.
     * Delivery address.
     *
     * @maps CardDeliveryAddress
     */
    public function setCardDeliveryAddress(?CardDetailsResponseCardDeliveryAddress $cardDeliveryAddress): void
    {
        $this->cardDeliveryAddress = $cardDeliveryAddress;
    }

    /**
     * Returns P in Delivery Address.
     * Delivery address.
     */
    public function getPINDeliveryAddress(): ?CardDetailsResponsePINDeliveryAddress
    {
        return $this->pINDeliveryAddress;
    }

    /**
     * Sets P in Delivery Address.
     * Delivery address.
     *
     * @maps PINDeliveryAddress
     */
    public function setPINDeliveryAddress(?CardDetailsResponsePINDeliveryAddress $pINDeliveryAddress): void
    {
        $this->pINDeliveryAddress = $pINDeliveryAddress;
    }

    /**
     * Returns Card Block Schedules.
     *
     * @return CardDetailsResponseCardBlockSchedulesItemsAllOf0[]|null
     */
    public function getCardBlockSchedules(): ?array
    {
        if (count($this->cardBlockSchedules) == 0) {
            return null;
        }
        return $this->cardBlockSchedules['value'];
    }

    /**
     * Sets Card Block Schedules.
     *
     * @maps CardBlockSchedules
     *
     * @param CardDetailsResponseCardBlockSchedulesItemsAllOf0[]|null $cardBlockSchedules
     */
    public function setCardBlockSchedules(?array $cardBlockSchedules): void
    {
        $this->cardBlockSchedules['value'] = $cardBlockSchedules;
    }

    /**
     * Unsets Card Block Schedules.
     */
    public function unsetCardBlockSchedules(): void
    {
        $this->cardBlockSchedules = [];
    }

    /**
     * Returns Error.
     */
    public function getError(): ?ErrorStatus
    {
        return $this->error;
    }

    /**
     * Sets Error.
     *
     * @maps Error
     */
    public function setError(?ErrorStatus $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Request Id.
     * API Request
     */
    public function getRequestId(): ?string
    {
        return $this->requestId;
    }

    /**
     * Sets Request Id.
     * API Request
     *
     * @maps RequestId
     */
    public function setRequestId(?string $requestId): void
    {
        $this->requestId = $requestId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->payerId)) {
            $json['PayerId']                      = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                  = $this->payerNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                    = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']             = $this->accountShortName['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode']             = $this->colCoCountryCode['value'];
        }
        if (!empty($this->localCurrencyCode)) {
            $json['LocalCurrencyCode']            = $this->localCurrencyCode['value'];
        }
        if (!empty($this->localCurrencySymbol)) {
            $json['LocalCurrencySymbol']          = $this->localCurrencySymbol['value'];
        }
        if (isset($this->cardId)) {
            $json['CardId']                       = $this->cardId;
        }
        if (!empty($this->pAN)) {
            $json['PAN']                          = $this->pAN['value'];
        }
        if (isset($this->statusId)) {
            $json['StatusId']                     = CardDetailsResponseStatusIdEnum::checkValue($this->statusId);
        }
        if (isset($this->status)) {
            $json['Status']                       = $this->status;
        }
        if (isset($this->odometerPrompt)) {
            $json['OdometerPrompt']               = $this->odometerPrompt;
        }
        if (isset($this->fleetIdPrompt)) {
            $json['FleetIdPrompt']                = $this->fleetIdPrompt;
        }
        if (isset($this->pINType)) {
            $json['PINType']                      = CardDetailsResponsePINTypeEnum::checkValue($this->pINType);
        }
        if (isset($this->hasPIN)) {
            $json['HasPIN']                       = $this->hasPIN;
        }
        if (isset($this->isSelfSelectedPIN)) {
            $json['IsSelfSelectedPIN']            = $this->isSelfSelectedPIN;
        }
        if (isset($this->temporaryBlockAllowed)) {
            $json['TemporaryBlockAllowed']        = $this->temporaryBlockAllowed;
        }
        if (isset($this->unblockAllowed)) {
            $json['UnblockAllowed']               = $this->unblockAllowed;
        }
        if (isset($this->permanentBlockAllowed)) {
            $json['PermanentBlockAllowed']        = $this->permanentBlockAllowed;
        }
        if (isset($this->issueNumber)) {
            $json['IssueNumber']                  = $this->issueNumber;
        }
        if (!empty($this->reissueSetting)) {
            $json['ReissueSetting']               =
                CardDetailsResponseReissueSettingEnum::checkValue(
                    $this->reissueSetting['value']
                );
        }
        if (isset($this->internationalPOSLanguageID)) {
            $json['InternationalPOSLanguageID']   =
                CardDetailsResponseInternationalPOSLanguageIDEnum::checkValue(
                    $this->internationalPOSLanguageID
                );
        }
        if (isset($this->internationalPOSLanguageCode)) {
            $json['InternationalPOSLanguageCode'] =
                CardDetailsResponseInternationalPOSLanguageCodeEnum::checkValue(
                    $this->internationalPOSLanguageCode
                );
        }
        if (isset($this->localPOSLanguageID)) {
            $json['LocalPOSLanguageID']           =
                CardDetailsResponseLocalPOSLanguageIDEnum::checkValue(
                    $this->localPOSLanguageID
                );
        }
        if (isset($this->localPOSLanguageCode)) {
            $json['LocalPOSLanguageCode']         =
                CardDetailsResponseLocalPOSLanguageCodeEnum::checkValue(
                    $this->localPOSLanguageCode
                );
        }
        if (!empty($this->cardTypeCode)) {
            $json['CardTypeCode']                 = $this->cardTypeCode['value'];
        }
        if (!empty($this->cardTypeId)) {
            $json['CardTypeId']                   = $this->cardTypeId['value'];
        }
        if (!empty($this->cardTypeName)) {
            $json['CardTypeName']                 = $this->cardTypeName['value'];
        }
        if (!empty($this->tokenTypeId)) {
            $json['TokenTypeId']                  = $this->tokenTypeId['value'];
        }
        if (!empty($this->tokenTypeName)) {
            $json['TokenTypeName']                = $this->tokenTypeName['value'];
        }
        if (isset($this->isChipCard)) {
            $json['IsChipCard']                   = $this->isChipCard;
        }
        if (isset($this->isMagStripCard)) {
            $json['IsMagStripCard']               = $this->isMagStripCard;
        }
        if (isset($this->isVirtualCard)) {
            $json['IsVirtualCard']                = $this->isVirtualCard;
        }
        if (!empty($this->purchaseCategoryCode)) {
            $json['PurchaseCategoryCode']         = $this->purchaseCategoryCode['value'];
        }
        if (isset($this->purchaseCategoryId)) {
            $json['PurchaseCategoryId']           = $this->purchaseCategoryId;
        }
        if (!empty($this->purchaseCategoryName)) {
            $json['PurchaseCategoryName']         = $this->purchaseCategoryName['value'];
        }
        if (isset($this->isCRT)) {
            $json['IsCRT']                        = $this->isCRT;
        }
        if (isset($this->isFleet)) {
            $json['IsFleet']                      = $this->isFleet;
        }
        if (isset($this->isInternational)) {
            $json['IsInternational']              = $this->isInternational;
        }
        if (isset($this->isNational)) {
            $json['IsNational']                   = $this->isNational;
        }
        if (isset($this->isPartnerSitesIncluded)) {
            $json['IsPartnerSitesIncluded']       = $this->isPartnerSitesIncluded;
        }
        if (isset($this->isShellSitesOnly)) {
            $json['IsShellSitesOnly']             = $this->isShellSitesOnly;
        }
        if (isset($this->fuelSets)) {
            $json['FuelSets']                     = $this->fuelSets;
        }
        if (isset($this->nonFuelSets)) {
            $json['NonFuelSets']                  = $this->nonFuelSets;
        }
        if (!empty($this->issuedDate)) {
            $json['IssuedDate']                   = $this->issuedDate['value'];
        }
        if (isset($this->expiryDate)) {
            $json['ExpiryDate']                   = $this->expiryDate;
        }
        if (!empty($this->lastUsedDate)) {
            $json['LastUsedDate']                 = $this->lastUsedDate['value'];
        }
        if (!empty($this->misuseDate)) {
            $json['MisuseDate']                   = $this->misuseDate['value'];
        }
        if (!empty($this->temperature)) {
            $json['Temperature']                  = $this->temperature['value'];
        }
        if (isset($this->driverName)) {
            $json['DriverName']                   = $this->driverName;
        }
        if (isset($this->vRN)) {
            $json['VRN']                          = $this->vRN;
        }
        if (isset($this->embossText)) {
            $json['EmbossText']                   = $this->embossText;
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']                  = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']                = $this->cardGroupName['value'];
        }
        if (!empty($this->renewalDate)) {
            $json['RenewalDate']                  = $this->renewalDate['value'];
        }
        if (!empty($this->renewedCardId)) {
            $json['RenewedCardId']                = $this->renewedCardId['value'];
        }
        if (!empty($this->renewedCardStatusId)) {
            $json['RenewedCardStatusId']          = $this->renewedCardStatusId['value'];
        }
        if (isset($this->renewedCardStatus)) {
            $json['RenewedCardStatus']            = $this->renewedCardStatus;
        }
        if (isset($this->renewedCardExpiryDate)) {
            $json['RenewedCardExpiryDate']        = $this->renewedCardExpiryDate;
        }
        if (!empty($this->renewedCardIssueNumber)) {
            $json['RenewedCardIssueNumber']       = $this->renewedCardIssueNumber['value'];
        }
        if (isset($this->renewedCardReissueSetting)) {
            $json['RenewedCardReissueSetting']    =
                CardDetailsResponseRenewedCardReissueSettingEnum::checkValue(
                    $this->renewedCardReissueSetting
                );
        }
        if (!empty($this->creationDate)) {
            $json['CreationDate']                 = $this->creationDate['value'];
        }
        if (!empty($this->effectiveDate)) {
            $json['EffectiveDate']                = $this->effectiveDate['value'];
        }
        if (!empty($this->lastModifiedDate)) {
            $json['LastModifiedDate']             = $this->lastModifiedDate['value'];
        }
        if (!empty($this->bundleId)) {
            $json['BundleId']                     = $this->bundleId['value'];
        }
        if (isset($this->cardDeliveryAddress)) {
            $json['CardDeliveryAddress']          = $this->cardDeliveryAddress;
        }
        if (isset($this->pINDeliveryAddress)) {
            $json['PINDeliveryAddress']           = $this->pINDeliveryAddress;
        }
        if (!empty($this->cardBlockSchedules)) {
            $json['CardBlockSchedules']           = $this->cardBlockSchedules['value'];
        }
        if (isset($this->error)) {
            $json['Error']                        = $this->error;
        }
        if (isset($this->requestId)) {
            $json['RequestId']                    = $this->requestId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
